
DW_Prime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080082e4  080082e4  000182e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008514  08008514  00018514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000021c  20000000  08008518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000166c  20000220  08008734  00020220  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2000188c  08008734  0002188c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000383fb  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005838  00000000  00000000  00058640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00018d5f  00000000  00000000  0005de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000023f8  00000000  00000000  00076bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000021e8  00000000  00000000  00078fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00011810  00000000  00000000  0007b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000ad3d  00000000  00000000  0008c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      000000e9  00000000  00000000  00097705  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006fe0  00000000  00000000  000977f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000220 	.word	0x20000220
 800012c:	00000000 	.word	0x00000000
 8000130:	080082cc 	.word	0x080082cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000224 	.word	0x20000224
 800014c:	080082cc 	.word	0x080082cc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295
 800093c:	f04f 30ff 	movne.w	r0, #4294967295
 8000940:	f000 b9ae 	b.w	8000ca0 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f840 	bl	80009d0 <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__aeabi_d2lz>:
 800095c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800095e:	2200      	movs	r2, #0
 8000960:	2300      	movs	r3, #0
 8000962:	4607      	mov	r7, r0
 8000964:	460e      	mov	r6, r1
 8000966:	f000 f9fd 	bl	8000d64 <__aeabi_dcmplt>
 800096a:	b928      	cbnz	r0, 8000978 <__aeabi_d2lz+0x1c>
 800096c:	4638      	mov	r0, r7
 800096e:	4631      	mov	r1, r6
 8000970:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8000974:	f000 b80a 	b.w	800098c <__aeabi_d2ulz>
 8000978:	4638      	mov	r0, r7
 800097a:	f106 4100 	add.w	r1, r6, #2147483648	; 0x80000000
 800097e:	f000 f805 	bl	800098c <__aeabi_d2ulz>
 8000982:	4240      	negs	r0, r0
 8000984:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800098a:	bf00      	nop

0800098c <__aeabi_d2ulz>:
 800098c:	b5d0      	push	{r4, r6, r7, lr}
 800098e:	2200      	movs	r2, #0
 8000990:	4b0d      	ldr	r3, [pc, #52]	; (80009c8 <__aeabi_d2ulz+0x3c>)
 8000992:	4606      	mov	r6, r0
 8000994:	460f      	mov	r7, r1
 8000996:	f7ff fd97 	bl	80004c8 <__aeabi_dmul>
 800099a:	f7ff ffa7 	bl	80008ec <__aeabi_d2uiz>
 800099e:	4604      	mov	r4, r0
 80009a0:	f7ff fd18 	bl	80003d4 <__aeabi_ui2d>
 80009a4:	2200      	movs	r2, #0
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <__aeabi_d2ulz+0x40>)
 80009a8:	f7ff fd8e 	bl	80004c8 <__aeabi_dmul>
 80009ac:	4602      	mov	r2, r0
 80009ae:	460b      	mov	r3, r1
 80009b0:	4630      	mov	r0, r6
 80009b2:	4639      	mov	r1, r7
 80009b4:	f7ff fbd0 	bl	8000158 <__aeabi_dsub>
 80009b8:	f7ff ff98 	bl	80008ec <__aeabi_d2uiz>
 80009bc:	2200      	movs	r2, #0
 80009be:	4623      	mov	r3, r4
 80009c0:	4310      	orrs	r0, r2
 80009c2:	4619      	mov	r1, r3
 80009c4:	bdd0      	pop	{r4, r6, r7, pc}
 80009c6:	bf00      	nop
 80009c8:	3df00000 	.word	0x3df00000
 80009cc:	41f00000 	.word	0x41f00000

080009d0 <__udivmoddi4>:
 80009d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d4:	468c      	mov	ip, r1
 80009d6:	4604      	mov	r4, r0
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d14b      	bne.n	8000a76 <__udivmoddi4+0xa6>
 80009de:	428a      	cmp	r2, r1
 80009e0:	4615      	mov	r5, r2
 80009e2:	d967      	bls.n	8000ab4 <__udivmoddi4+0xe4>
 80009e4:	fab2 f282 	clz	r2, r2
 80009e8:	b14a      	cbz	r2, 80009fe <__udivmoddi4+0x2e>
 80009ea:	f1c2 0720 	rsb	r7, r2, #32
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	fa20 f707 	lsr.w	r7, r0, r7
 80009f6:	4095      	lsls	r5, r2
 80009f8:	ea47 0c03 	orr.w	ip, r7, r3
 80009fc:	4094      	lsls	r4, r2
 80009fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a02:	fbbc f7fe 	udiv	r7, ip, lr
 8000a06:	fa1f f885 	uxth.w	r8, r5
 8000a0a:	fb0e c317 	mls	r3, lr, r7, ip
 8000a0e:	fb07 f908 	mul.w	r9, r7, r8
 8000a12:	0c21      	lsrs	r1, r4, #16
 8000a14:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a18:	4599      	cmp	r9, r3
 8000a1a:	d909      	bls.n	8000a30 <__udivmoddi4+0x60>
 8000a1c:	18eb      	adds	r3, r5, r3
 8000a1e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000a22:	f080 811c 	bcs.w	8000c5e <__udivmoddi4+0x28e>
 8000a26:	4599      	cmp	r9, r3
 8000a28:	f240 8119 	bls.w	8000c5e <__udivmoddi4+0x28e>
 8000a2c:	3f02      	subs	r7, #2
 8000a2e:	442b      	add	r3, r5
 8000a30:	eba3 0309 	sub.w	r3, r3, r9
 8000a34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a3c:	fb00 f108 	mul.w	r1, r0, r8
 8000a40:	b2a4      	uxth	r4, r4
 8000a42:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a46:	42a1      	cmp	r1, r4
 8000a48:	d909      	bls.n	8000a5e <__udivmoddi4+0x8e>
 8000a4a:	192c      	adds	r4, r5, r4
 8000a4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a50:	f080 8107 	bcs.w	8000c62 <__udivmoddi4+0x292>
 8000a54:	42a1      	cmp	r1, r4
 8000a56:	f240 8104 	bls.w	8000c62 <__udivmoddi4+0x292>
 8000a5a:	3802      	subs	r0, #2
 8000a5c:	442c      	add	r4, r5
 8000a5e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a62:	2700      	movs	r7, #0
 8000a64:	1a64      	subs	r4, r4, r1
 8000a66:	b11e      	cbz	r6, 8000a70 <__udivmoddi4+0xa0>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	40d4      	lsrs	r4, r2
 8000a6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000a70:	4639      	mov	r1, r7
 8000a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a76:	428b      	cmp	r3, r1
 8000a78:	d909      	bls.n	8000a8e <__udivmoddi4+0xbe>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	f000 80ec 	beq.w	8000c58 <__udivmoddi4+0x288>
 8000a80:	2700      	movs	r7, #0
 8000a82:	e9c6 0100 	strd	r0, r1, [r6]
 8000a86:	4638      	mov	r0, r7
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8e:	fab3 f783 	clz	r7, r3
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d148      	bne.n	8000b28 <__udivmoddi4+0x158>
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xd0>
 8000a9a:	4282      	cmp	r2, r0
 8000a9c:	f200 80fb 	bhi.w	8000c96 <__udivmoddi4+0x2c6>
 8000aa0:	1a84      	subs	r4, r0, r2
 8000aa2:	eb61 0303 	sbc.w	r3, r1, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	d0e0      	beq.n	8000a70 <__udivmoddi4+0xa0>
 8000aae:	e9c6 4c00 	strd	r4, ip, [r6]
 8000ab2:	e7dd      	b.n	8000a70 <__udivmoddi4+0xa0>
 8000ab4:	b902      	cbnz	r2, 8000ab8 <__udivmoddi4+0xe8>
 8000ab6:	deff      	udf	#255	; 0xff
 8000ab8:	fab2 f282 	clz	r2, r2
 8000abc:	2a00      	cmp	r2, #0
 8000abe:	f040 808f 	bne.w	8000be0 <__udivmoddi4+0x210>
 8000ac2:	2701      	movs	r7, #1
 8000ac4:	1b49      	subs	r1, r1, r5
 8000ac6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000aca:	fa1f f985 	uxth.w	r9, r5
 8000ace:	fbb1 fef8 	udiv	lr, r1, r8
 8000ad2:	fb08 111e 	mls	r1, r8, lr, r1
 8000ad6:	fb09 f00e 	mul.w	r0, r9, lr
 8000ada:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000ade:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	d907      	bls.n	8000af6 <__udivmoddi4+0x126>
 8000ae6:	18eb      	adds	r3, r5, r3
 8000ae8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000aec:	d202      	bcs.n	8000af4 <__udivmoddi4+0x124>
 8000aee:	4298      	cmp	r0, r3
 8000af0:	f200 80cd 	bhi.w	8000c8e <__udivmoddi4+0x2be>
 8000af4:	468e      	mov	lr, r1
 8000af6:	1a1b      	subs	r3, r3, r0
 8000af8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000afc:	fb08 3310 	mls	r3, r8, r0, r3
 8000b00:	fb09 f900 	mul.w	r9, r9, r0
 8000b04:	b2a4      	uxth	r4, r4
 8000b06:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0a:	45a1      	cmp	r9, r4
 8000b0c:	d907      	bls.n	8000b1e <__udivmoddi4+0x14e>
 8000b0e:	192c      	adds	r4, r5, r4
 8000b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b14:	d202      	bcs.n	8000b1c <__udivmoddi4+0x14c>
 8000b16:	45a1      	cmp	r9, r4
 8000b18:	f200 80b6 	bhi.w	8000c88 <__udivmoddi4+0x2b8>
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	eba4 0409 	sub.w	r4, r4, r9
 8000b22:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b26:	e79e      	b.n	8000a66 <__udivmoddi4+0x96>
 8000b28:	f1c7 0520 	rsb	r5, r7, #32
 8000b2c:	40bb      	lsls	r3, r7
 8000b2e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000b32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b36:	fa21 f405 	lsr.w	r4, r1, r5
 8000b3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b3e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000b42:	fa1f f88c 	uxth.w	r8, ip
 8000b46:	fb0e 4419 	mls	r4, lr, r9, r4
 8000b4a:	fa20 f305 	lsr.w	r3, r0, r5
 8000b4e:	40b9      	lsls	r1, r7
 8000b50:	fb09 fa08 	mul.w	sl, r9, r8
 8000b54:	4319      	orrs	r1, r3
 8000b56:	0c0b      	lsrs	r3, r1, #16
 8000b58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b5c:	45a2      	cmp	sl, r4
 8000b5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000b62:	fa00 f307 	lsl.w	r3, r0, r7
 8000b66:	d90b      	bls.n	8000b80 <__udivmoddi4+0x1b0>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b70:	f080 8088 	bcs.w	8000c84 <__udivmoddi4+0x2b4>
 8000b74:	45a2      	cmp	sl, r4
 8000b76:	f240 8085 	bls.w	8000c84 <__udivmoddi4+0x2b4>
 8000b7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000b7e:	4464      	add	r4, ip
 8000b80:	eba4 040a 	sub.w	r4, r4, sl
 8000b84:	fbb4 f0fe 	udiv	r0, r4, lr
 8000b88:	fb0e 4410 	mls	r4, lr, r0, r4
 8000b8c:	fb00 fa08 	mul.w	sl, r0, r8
 8000b90:	b289      	uxth	r1, r1
 8000b92:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000b96:	45a2      	cmp	sl, r4
 8000b98:	d908      	bls.n	8000bac <__udivmoddi4+0x1dc>
 8000b9a:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	d26b      	bcs.n	8000c7c <__udivmoddi4+0x2ac>
 8000ba4:	45a2      	cmp	sl, r4
 8000ba6:	d969      	bls.n	8000c7c <__udivmoddi4+0x2ac>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	4464      	add	r4, ip
 8000bac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb0:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb4:	eba4 040a 	sub.w	r4, r4, sl
 8000bb8:	454c      	cmp	r4, r9
 8000bba:	4641      	mov	r1, r8
 8000bbc:	46ce      	mov	lr, r9
 8000bbe:	d354      	bcc.n	8000c6a <__udivmoddi4+0x29a>
 8000bc0:	d051      	beq.n	8000c66 <__udivmoddi4+0x296>
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d069      	beq.n	8000c9a <__udivmoddi4+0x2ca>
 8000bc6:	1a5a      	subs	r2, r3, r1
 8000bc8:	eb64 040e 	sbc.w	r4, r4, lr
 8000bcc:	fa04 f505 	lsl.w	r5, r4, r5
 8000bd0:	fa22 f307 	lsr.w	r3, r2, r7
 8000bd4:	40fc      	lsrs	r4, r7
 8000bd6:	431d      	orrs	r5, r3
 8000bd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e747      	b.n	8000a70 <__udivmoddi4+0xa0>
 8000be0:	4095      	lsls	r5, r2
 8000be2:	f1c2 0320 	rsb	r3, r2, #32
 8000be6:	fa21 f003 	lsr.w	r0, r1, r3
 8000bea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000bee:	fbb0 f7f8 	udiv	r7, r0, r8
 8000bf2:	fa1f f985 	uxth.w	r9, r5
 8000bf6:	fb08 0017 	mls	r0, r8, r7, r0
 8000bfa:	fa24 f303 	lsr.w	r3, r4, r3
 8000bfe:	4091      	lsls	r1, r2
 8000c00:	fb07 fc09 	mul.w	ip, r7, r9
 8000c04:	430b      	orrs	r3, r1
 8000c06:	0c19      	lsrs	r1, r3, #16
 8000c08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c0c:	458c      	cmp	ip, r1
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d907      	bls.n	8000c24 <__udivmoddi4+0x254>
 8000c14:	1869      	adds	r1, r5, r1
 8000c16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c1a:	d231      	bcs.n	8000c80 <__udivmoddi4+0x2b0>
 8000c1c:	458c      	cmp	ip, r1
 8000c1e:	d92f      	bls.n	8000c80 <__udivmoddi4+0x2b0>
 8000c20:	3f02      	subs	r7, #2
 8000c22:	4429      	add	r1, r5
 8000c24:	eba1 010c 	sub.w	r1, r1, ip
 8000c28:	fbb1 f0f8 	udiv	r0, r1, r8
 8000c2c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000c30:	fb00 fe09 	mul.w	lr, r0, r9
 8000c34:	b299      	uxth	r1, r3
 8000c36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c3a:	458e      	cmp	lr, r1
 8000c3c:	d907      	bls.n	8000c4e <__udivmoddi4+0x27e>
 8000c3e:	1869      	adds	r1, r5, r1
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	d218      	bcs.n	8000c78 <__udivmoddi4+0x2a8>
 8000c46:	458e      	cmp	lr, r1
 8000c48:	d916      	bls.n	8000c78 <__udivmoddi4+0x2a8>
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	4429      	add	r1, r5
 8000c4e:	eba1 010e 	sub.w	r1, r1, lr
 8000c52:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c56:	e73a      	b.n	8000ace <__udivmoddi4+0xfe>
 8000c58:	4637      	mov	r7, r6
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	e708      	b.n	8000a70 <__udivmoddi4+0xa0>
 8000c5e:	460f      	mov	r7, r1
 8000c60:	e6e6      	b.n	8000a30 <__udivmoddi4+0x60>
 8000c62:	4618      	mov	r0, r3
 8000c64:	e6fb      	b.n	8000a5e <__udivmoddi4+0x8e>
 8000c66:	4543      	cmp	r3, r8
 8000c68:	d2ab      	bcs.n	8000bc2 <__udivmoddi4+0x1f2>
 8000c6a:	ebb8 0102 	subs.w	r1, r8, r2
 8000c6e:	eb69 020c 	sbc.w	r2, r9, ip
 8000c72:	3801      	subs	r0, #1
 8000c74:	4696      	mov	lr, r2
 8000c76:	e7a4      	b.n	8000bc2 <__udivmoddi4+0x1f2>
 8000c78:	4618      	mov	r0, r3
 8000c7a:	e7e8      	b.n	8000c4e <__udivmoddi4+0x27e>
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	e795      	b.n	8000bac <__udivmoddi4+0x1dc>
 8000c80:	4607      	mov	r7, r0
 8000c82:	e7cf      	b.n	8000c24 <__udivmoddi4+0x254>
 8000c84:	4681      	mov	r9, r0
 8000c86:	e77b      	b.n	8000b80 <__udivmoddi4+0x1b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	442c      	add	r4, r5
 8000c8c:	e747      	b.n	8000b1e <__udivmoddi4+0x14e>
 8000c8e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c92:	442b      	add	r3, r5
 8000c94:	e72f      	b.n	8000af6 <__udivmoddi4+0x126>
 8000c96:	4638      	mov	r0, r7
 8000c98:	e707      	b.n	8000aaa <__udivmoddi4+0xda>
 8000c9a:	4637      	mov	r7, r6
 8000c9c:	e6e8      	b.n	8000a70 <__udivmoddi4+0xa0>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <__gedf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpdf2+0x4>
 8000caa:	bf00      	nop

08000cac <__ledf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpdf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpdf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cce:	d01b      	beq.n	8000d08 <__cmpdf2+0x54>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cd6:	bf0c      	ite	eq
 8000cd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cdc:	ea91 0f03 	teqne	r1, r3
 8000ce0:	bf02      	ittt	eq
 8000ce2:	ea90 0f02 	teqeq	r0, r2
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	4770      	bxeq	lr
 8000cea:	f110 0f00 	cmn.w	r0, #0
 8000cee:	ea91 0f03 	teq	r1, r3
 8000cf2:	bf58      	it	pl
 8000cf4:	4299      	cmppl	r1, r3
 8000cf6:	bf08      	it	eq
 8000cf8:	4290      	cmpeq	r0, r2
 8000cfa:	bf2c      	ite	cs
 8000cfc:	17d8      	asrcs	r0, r3, #31
 8000cfe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d02:	f040 0001 	orr.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d10:	d102      	bne.n	8000d18 <__cmpdf2+0x64>
 8000d12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d16:	d107      	bne.n	8000d28 <__cmpdf2+0x74>
 8000d18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d20:	d1d6      	bne.n	8000cd0 <__cmpdf2+0x1c>
 8000d22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d26:	d0d3      	beq.n	8000cd0 <__cmpdf2+0x1c>
 8000d28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop

08000d30 <__aeabi_cdrcmple>:
 8000d30:	4684      	mov	ip, r0
 8000d32:	4610      	mov	r0, r2
 8000d34:	4662      	mov	r2, ip
 8000d36:	468c      	mov	ip, r1
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4663      	mov	r3, ip
 8000d3c:	e000      	b.n	8000d40 <__aeabi_cdcmpeq>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_cdcmpeq>:
 8000d40:	b501      	push	{r0, lr}
 8000d42:	f7ff ffb7 	bl	8000cb4 <__cmpdf2>
 8000d46:	2800      	cmp	r0, #0
 8000d48:	bf48      	it	mi
 8000d4a:	f110 0f00 	cmnmi.w	r0, #0
 8000d4e:	bd01      	pop	{r0, pc}

08000d50 <__aeabi_dcmpeq>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff fff4 	bl	8000d40 <__aeabi_cdcmpeq>
 8000d58:	bf0c      	ite	eq
 8000d5a:	2001      	moveq	r0, #1
 8000d5c:	2000      	movne	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_dcmplt>:
 8000d64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d68:	f7ff ffea 	bl	8000d40 <__aeabi_cdcmpeq>
 8000d6c:	bf34      	ite	cc
 8000d6e:	2001      	movcc	r0, #1
 8000d70:	2000      	movcs	r0, #0
 8000d72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d76:	bf00      	nop

08000d78 <__aeabi_dcmple>:
 8000d78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d7c:	f7ff ffe0 	bl	8000d40 <__aeabi_cdcmpeq>
 8000d80:	bf94      	ite	ls
 8000d82:	2001      	movls	r0, #1
 8000d84:	2000      	movhi	r0, #0
 8000d86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8a:	bf00      	nop

08000d8c <__aeabi_dcmpge>:
 8000d8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d90:	f7ff ffce 	bl	8000d30 <__aeabi_cdrcmple>
 8000d94:	bf94      	ite	ls
 8000d96:	2001      	movls	r0, #1
 8000d98:	2000      	movhi	r0, #0
 8000d9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d9e:	bf00      	nop

08000da0 <__aeabi_dcmpgt>:
 8000da0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da4:	f7ff ffc4 	bl	8000d30 <__aeabi_cdrcmple>
 8000da8:	bf34      	ite	cc
 8000daa:	2001      	movcc	r0, #1
 8000dac:	2000      	movcs	r0, #0
 8000dae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000db2:	bf00      	nop

08000db4 <HAL_InitTick>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	4604      	mov	r4, r0
 8000db8:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_InitTick+0x40>)
 8000dba:	7818      	ldrb	r0, [r3, #0]
 8000dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc0:	fbb3 f3f0 	udiv	r3, r3, r0
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_InitTick+0x44>)
 8000dc6:	6810      	ldr	r0, [r2, #0]
 8000dc8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dcc:	f000 f9f6 	bl	80011bc <HAL_SYSTICK_Config>
 8000dd0:	b958      	cbnz	r0, 8000dea <HAL_InitTick+0x36>
 8000dd2:	2c0f      	cmp	r4, #15
 8000dd4:	d80b      	bhi.n	8000dee <HAL_InitTick+0x3a>
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	4621      	mov	r1, r4
 8000dda:	f04f 30ff 	mov.w	r0, #4294967295
 8000dde:	f000 f9a1 	bl	8001124 <HAL_NVIC_SetPriority>
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_InitTick+0x40>)
 8000de4:	605c      	str	r4, [r3, #4]
 8000de6:	2000      	movs	r0, #0
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	2001      	movs	r0, #1
 8000dec:	bd10      	pop	{r4, pc}
 8000dee:	2001      	movs	r0, #1
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000138 	.word	0x20000138

08000dfc <HAL_Init>:
 8000dfc:	b508      	push	{r3, lr}
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x20>)
 8000e00:	6813      	ldr	r3, [r2, #0]
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f979 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f7ff ffd0 	bl	8000db4 <HAL_InitTick>
 8000e14:	f005 f8c4 	bl	8005fa0 <HAL_MspInit>
 8000e18:	2000      	movs	r0, #0
 8000e1a:	bd08      	pop	{r3, pc}
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_IncTick>:
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_IncTick+0x10>)
 8000e22:	6813      	ldr	r3, [r2, #0]
 8000e24:	4903      	ldr	r1, [pc, #12]	; (8000e34 <HAL_IncTick+0x14>)
 8000e26:	7809      	ldrb	r1, [r1, #0]
 8000e28:	440b      	add	r3, r1
 8000e2a:	6013      	str	r3, [r2, #0]
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	2000051c 	.word	0x2000051c
 8000e34:	20000000 	.word	0x20000000

08000e38 <HAL_GetTick>:
 8000e38:	4b01      	ldr	r3, [pc, #4]	; (8000e40 <HAL_GetTick+0x8>)
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	2000051c 	.word	0x2000051c

08000e44 <HAL_Delay>:
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	4604      	mov	r4, r0
 8000e48:	f7ff fff6 	bl	8000e38 <HAL_GetTick>
 8000e4c:	4605      	mov	r5, r0
 8000e4e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e52:	d002      	beq.n	8000e5a <HAL_Delay+0x16>
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_Delay+0x24>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	441c      	add	r4, r3
 8000e5a:	f7ff ffed 	bl	8000e38 <HAL_GetTick>
 8000e5e:	1b40      	subs	r0, r0, r5
 8000e60:	4284      	cmp	r4, r0
 8000e62:	d8fa      	bhi.n	8000e5a <HAL_Delay+0x16>
 8000e64:	bd38      	pop	{r3, r4, r5, pc}
 8000e66:	bf00      	nop
 8000e68:	20000000 	.word	0x20000000

08000e6c <HAL_ADC_ConfigChannel>:
 8000e6c:	b470      	push	{r4, r5, r6}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	2300      	movs	r3, #0
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f000 8088 	beq.w	8000f8e <HAL_ADC_ConfigChannel+0x122>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000e84:	684b      	ldr	r3, [r1, #4]
 8000e86:	2b06      	cmp	r3, #6
 8000e88:	d80e      	bhi.n	8000ea8 <HAL_ADC_ConfigChannel+0x3c>
 8000e8a:	6806      	ldr	r6, [r0, #0]
 8000e8c:	6b75      	ldr	r5, [r6, #52]	; 0x34
 8000e8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e92:	3b05      	subs	r3, #5
 8000e94:	241f      	movs	r4, #31
 8000e96:	409c      	lsls	r4, r3
 8000e98:	ea25 0404 	bic.w	r4, r5, r4
 8000e9c:	680a      	ldr	r2, [r1, #0]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	4323      	orrs	r3, r4
 8000ea4:	6373      	str	r3, [r6, #52]	; 0x34
 8000ea6:	e01e      	b.n	8000ee6 <HAL_ADC_ConfigChannel+0x7a>
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d80e      	bhi.n	8000eca <HAL_ADC_ConfigChannel+0x5e>
 8000eac:	6805      	ldr	r5, [r0, #0]
 8000eae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000eb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000eb4:	3b23      	subs	r3, #35	; 0x23
 8000eb6:	241f      	movs	r4, #31
 8000eb8:	409c      	lsls	r4, r3
 8000eba:	ea22 0404 	bic.w	r4, r2, r4
 8000ebe:	680a      	ldr	r2, [r1, #0]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	4323      	orrs	r3, r4
 8000ec6:	632b      	str	r3, [r5, #48]	; 0x30
 8000ec8:	e00d      	b.n	8000ee6 <HAL_ADC_ConfigChannel+0x7a>
 8000eca:	6805      	ldr	r5, [r0, #0]
 8000ecc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ece:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ed2:	3b41      	subs	r3, #65	; 0x41
 8000ed4:	241f      	movs	r4, #31
 8000ed6:	409c      	lsls	r4, r3
 8000ed8:	ea22 0404 	bic.w	r4, r2, r4
 8000edc:	680a      	ldr	r2, [r1, #0]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000ee6:	680b      	ldr	r3, [r1, #0]
 8000ee8:	2b09      	cmp	r3, #9
 8000eea:	d90e      	bls.n	8000f0a <HAL_ADC_ConfigChannel+0x9e>
 8000eec:	6806      	ldr	r6, [r0, #0]
 8000eee:	68f5      	ldr	r5, [r6, #12]
 8000ef0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ef4:	3b1e      	subs	r3, #30
 8000ef6:	2407      	movs	r4, #7
 8000ef8:	409c      	lsls	r4, r3
 8000efa:	ea25 0404 	bic.w	r4, r5, r4
 8000efe:	688a      	ldr	r2, [r1, #8]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	4323      	orrs	r3, r4
 8000f06:	60f3      	str	r3, [r6, #12]
 8000f08:	e00c      	b.n	8000f24 <HAL_ADC_ConfigChannel+0xb8>
 8000f0a:	6806      	ldr	r6, [r0, #0]
 8000f0c:	6935      	ldr	r5, [r6, #16]
 8000f0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000f12:	2407      	movs	r4, #7
 8000f14:	409c      	lsls	r4, r3
 8000f16:	ea25 0404 	bic.w	r4, r5, r4
 8000f1a:	688a      	ldr	r2, [r1, #8]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	4323      	orrs	r3, r4
 8000f22:	6133      	str	r3, [r6, #16]
 8000f24:	680b      	ldr	r3, [r1, #0]
 8000f26:	3b10      	subs	r3, #16
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d826      	bhi.n	8000f7a <HAL_ADC_ConfigChannel+0x10e>
 8000f2c:	6803      	ldr	r3, [r0, #0]
 8000f2e:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <HAL_ADC_ConfigChannel+0x12c>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d11c      	bne.n	8000f6e <HAL_ADC_ConfigChannel+0x102>
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8000f3a:	d120      	bne.n	8000f7e <HAL_ADC_ConfigChannel+0x112>
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	680b      	ldr	r3, [r1, #0]
 8000f46:	2b10      	cmp	r3, #16
 8000f48:	d11b      	bne.n	8000f82 <HAL_ADC_ConfigChannel+0x116>
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_ADC_ConfigChannel+0x130>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <HAL_ADC_ConfigChannel+0x134>)
 8000f50:	fba2 2303 	umull	r2, r3, r2, r3
 8000f54:	0c9b      	lsrs	r3, r3, #18
 8000f56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f5a:	005a      	lsls	r2, r3, #1
 8000f5c:	9201      	str	r2, [sp, #4]
 8000f5e:	e002      	b.n	8000f66 <HAL_ADC_ConfigChannel+0xfa>
 8000f60:	9b01      	ldr	r3, [sp, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	9b01      	ldr	r3, [sp, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f9      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0xf4>
 8000f6c:	e00a      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x118>
 8000f6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f70:	f043 0320 	orr.w	r3, r3, #32
 8000f74:	6283      	str	r3, [r0, #40]	; 0x28
 8000f76:	2301      	movs	r3, #1
 8000f78:	e004      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x118>
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e002      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x118>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_ADC_ConfigChannel+0x118>
 8000f82:	2300      	movs	r3, #0
 8000f84:	2200      	movs	r2, #0
 8000f86:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	e000      	b.n	8000f90 <HAL_ADC_ConfigChannel+0x124>
 8000f8e:	2002      	movs	r0, #2
 8000f90:	b003      	add	sp, #12
 8000f92:	bc70      	pop	{r4, r5, r6}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40012400 	.word	0x40012400
 8000f9c:	20000138 	.word	0x20000138
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <ADC_ConversionStop_Disable>:
 8000fa4:	b538      	push	{r3, r4, r5, lr}
 8000fa6:	6803      	ldr	r3, [r0, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	f012 0f01 	tst.w	r2, #1
 8000fae:	d01e      	beq.n	8000fee <ADC_ConversionStop_Disable+0x4a>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	f7ff ff3d 	bl	8000e38 <HAL_GetTick>
 8000fbe:	4605      	mov	r5, r0
 8000fc0:	e00e      	b.n	8000fe0 <ADC_ConversionStop_Disable+0x3c>
 8000fc2:	f7ff ff39 	bl	8000e38 <HAL_GetTick>
 8000fc6:	1b40      	subs	r0, r0, r5
 8000fc8:	2802      	cmp	r0, #2
 8000fca:	d909      	bls.n	8000fe0 <ADC_ConversionStop_Disable+0x3c>
 8000fcc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000fdc:	2001      	movs	r0, #1
 8000fde:	bd38      	pop	{r3, r4, r5, pc}
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	689b      	ldr	r3, [r3, #8]
 8000fe4:	f013 0f01 	tst.w	r3, #1
 8000fe8:	d1eb      	bne.n	8000fc2 <ADC_ConversionStop_Disable+0x1e>
 8000fea:	2000      	movs	r0, #0
 8000fec:	bd38      	pop	{r3, r4, r5, pc}
 8000fee:	2000      	movs	r0, #0
 8000ff0:	bd38      	pop	{r3, r4, r5, pc}
 8000ff2:	bf00      	nop

08000ff4 <HAL_ADC_Init>:
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d07d      	beq.n	80010f4 <HAL_ADC_Init+0x100>
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4604      	mov	r4, r0
 8000ffc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ffe:	b923      	cbnz	r3, 800100a <HAL_ADC_Init+0x16>
 8001000:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001002:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8001006:	f004 ffeb 	bl	8005fe0 <HAL_ADC_MspInit>
 800100a:	4620      	mov	r0, r4
 800100c:	f7ff ffca 	bl	8000fa4 <ADC_ConversionStop_Disable>
 8001010:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001012:	f013 0f10 	tst.w	r3, #16
 8001016:	d167      	bne.n	80010e8 <HAL_ADC_Init+0xf4>
 8001018:	2800      	cmp	r0, #0
 800101a:	d165      	bne.n	80010e8 <HAL_ADC_Init+0xf4>
 800101c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800101e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001022:	f023 0302 	bic.w	r3, r3, #2
 8001026:	f043 0302 	orr.w	r3, r3, #2
 800102a:	62a3      	str	r3, [r4, #40]	; 0x28
 800102c:	6862      	ldr	r2, [r4, #4]
 800102e:	69e3      	ldr	r3, [r4, #28]
 8001030:	4313      	orrs	r3, r2
 8001032:	68e1      	ldr	r1, [r4, #12]
 8001034:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8001038:	68a2      	ldr	r2, [r4, #8]
 800103a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800103e:	d004      	beq.n	800104a <HAL_ADC_Init+0x56>
 8001040:	2a01      	cmp	r2, #1
 8001042:	d105      	bne.n	8001050 <HAL_ADC_Init+0x5c>
 8001044:	f44f 7580 	mov.w	r5, #256	; 0x100
 8001048:	e003      	b.n	8001052 <HAL_ADC_Init+0x5e>
 800104a:	f44f 7580 	mov.w	r5, #256	; 0x100
 800104e:	e000      	b.n	8001052 <HAL_ADC_Init+0x5e>
 8001050:	2500      	movs	r5, #0
 8001052:	6962      	ldr	r2, [r4, #20]
 8001054:	2a01      	cmp	r2, #1
 8001056:	d10f      	bne.n	8001078 <HAL_ADC_Init+0x84>
 8001058:	b931      	cbnz	r1, 8001068 <HAL_ADC_Init+0x74>
 800105a:	69a2      	ldr	r2, [r4, #24]
 800105c:	3a01      	subs	r2, #1
 800105e:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8001062:	f442 6500 	orr.w	r5, r2, #2048	; 0x800
 8001066:	e007      	b.n	8001078 <HAL_ADC_Init+0x84>
 8001068:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800106a:	f042 0220 	orr.w	r2, r2, #32
 800106e:	62a2      	str	r2, [r4, #40]	; 0x28
 8001070:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001072:	f042 0201 	orr.w	r2, r2, #1
 8001076:	62e2      	str	r2, [r4, #44]	; 0x2c
 8001078:	6821      	ldr	r1, [r4, #0]
 800107a:	684a      	ldr	r2, [r1, #4]
 800107c:	f422 4269 	bic.w	r2, r2, #59648	; 0xe900
 8001080:	432a      	orrs	r2, r5
 8001082:	604a      	str	r2, [r1, #4]
 8001084:	6821      	ldr	r1, [r4, #0]
 8001086:	688d      	ldr	r5, [r1, #8]
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_ADC_Init+0x104>)
 800108a:	402a      	ands	r2, r5
 800108c:	431a      	orrs	r2, r3
 800108e:	608a      	str	r2, [r1, #8]
 8001090:	68a2      	ldr	r2, [r4, #8]
 8001092:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001096:	d001      	beq.n	800109c <HAL_ADC_Init+0xa8>
 8001098:	2a01      	cmp	r2, #1
 800109a:	d103      	bne.n	80010a4 <HAL_ADC_Init+0xb0>
 800109c:	6922      	ldr	r2, [r4, #16]
 800109e:	3a01      	subs	r2, #1
 80010a0:	0511      	lsls	r1, r2, #20
 80010a2:	e000      	b.n	80010a6 <HAL_ADC_Init+0xb2>
 80010a4:	2100      	movs	r1, #0
 80010a6:	6825      	ldr	r5, [r4, #0]
 80010a8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80010aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010ae:	430a      	orrs	r2, r1
 80010b0:	62ea      	str	r2, [r5, #44]	; 0x2c
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	6891      	ldr	r1, [r2, #8]
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <HAL_ADC_Init+0x108>)
 80010b8:	400a      	ands	r2, r1
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d108      	bne.n	80010d0 <HAL_ADC_Init+0xdc>
 80010be:	2300      	movs	r3, #0
 80010c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010c4:	f023 0303 	bic.w	r3, r3, #3
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80010ce:	bd38      	pop	{r3, r4, r5, pc}
 80010d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010d2:	f023 0312 	bic.w	r3, r3, #18
 80010d6:	f043 0310 	orr.w	r3, r3, #16
 80010da:	62a3      	str	r3, [r4, #40]	; 0x28
 80010dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80010e4:	2001      	movs	r0, #1
 80010e6:	bd38      	pop	{r3, r4, r5, pc}
 80010e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80010f0:	2001      	movs	r0, #1
 80010f2:	bd38      	pop	{r3, r4, r5, pc}
 80010f4:	2001      	movs	r0, #1
 80010f6:	4770      	bx	lr
 80010f8:	ffe1f7fd 	.word	0xffe1f7fd
 80010fc:	ff1f0efe 	.word	0xff1f0efe

08001100 <HAL_NVIC_SetPriorityGrouping>:
 8001100:	4a07      	ldr	r2, [pc, #28]	; (8001120 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001102:	68d3      	ldr	r3, [r2, #12]
 8001104:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001108:	041b      	lsls	r3, r3, #16
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	0200      	lsls	r0, r0, #8
 800110e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001112:	4318      	orrs	r0, r3
 8001114:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001118:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 800111c:	60d0      	str	r0, [r2, #12]
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <HAL_NVIC_SetPriority>:
 8001124:	b430      	push	{r4, r5}
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_NVIC_SetPriority+0x5c>)
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800112e:	f1c3 0407 	rsb	r4, r3, #7
 8001132:	2c04      	cmp	r4, #4
 8001134:	bf28      	it	cs
 8001136:	2404      	movcs	r4, #4
 8001138:	1d1d      	adds	r5, r3, #4
 800113a:	2d06      	cmp	r5, #6
 800113c:	d901      	bls.n	8001142 <HAL_NVIC_SetPriority+0x1e>
 800113e:	1edd      	subs	r5, r3, #3
 8001140:	e000      	b.n	8001144 <HAL_NVIC_SetPriority+0x20>
 8001142:	2500      	movs	r5, #0
 8001144:	2301      	movs	r3, #1
 8001146:	fa03 f404 	lsl.w	r4, r3, r4
 800114a:	3c01      	subs	r4, #1
 800114c:	4021      	ands	r1, r4
 800114e:	40a9      	lsls	r1, r5
 8001150:	40ab      	lsls	r3, r5
 8001152:	3b01      	subs	r3, #1
 8001154:	401a      	ands	r2, r3
 8001156:	430a      	orrs	r2, r1
 8001158:	2800      	cmp	r0, #0
 800115a:	da06      	bge.n	800116a <HAL_NVIC_SetPriority+0x46>
 800115c:	f000 000f 	and.w	r0, r0, #15
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_NVIC_SetPriority+0x60>)
 8001166:	541a      	strb	r2, [r3, r0]
 8001168:	e007      	b.n	800117a <HAL_NVIC_SetPriority+0x56>
 800116a:	0112      	lsls	r2, r2, #4
 800116c:	b2d2      	uxtb	r2, r2
 800116e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001172:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001176:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 800117a:	bc30      	pop	{r4, r5}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	e000ed14 	.word	0xe000ed14

08001188 <HAL_NVIC_EnableIRQ>:
 8001188:	0942      	lsrs	r2, r0, #5
 800118a:	f000 001f 	and.w	r0, r0, #31
 800118e:	2301      	movs	r3, #1
 8001190:	fa03 f000 	lsl.w	r0, r3, r0
 8001194:	4b01      	ldr	r3, [pc, #4]	; (800119c <HAL_NVIC_EnableIRQ+0x14>)
 8001196:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100

080011a0 <HAL_NVIC_DisableIRQ>:
 80011a0:	0943      	lsrs	r3, r0, #5
 80011a2:	f000 001f 	and.w	r0, r0, #31
 80011a6:	2201      	movs	r2, #1
 80011a8:	fa02 f000 	lsl.w	r0, r2, r0
 80011ac:	3320      	adds	r3, #32
 80011ae:	4a02      	ldr	r2, [pc, #8]	; (80011b8 <HAL_NVIC_DisableIRQ+0x18>)
 80011b0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <HAL_SYSTICK_Config>:
 80011bc:	3801      	subs	r0, #1
 80011be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80011c2:	d20a      	bcs.n	80011da <HAL_SYSTICK_Config+0x1e>
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_SYSTICK_Config+0x24>)
 80011c6:	6058      	str	r0, [r3, #4]
 80011c8:	21f0      	movs	r1, #240	; 0xf0
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_SYSTICK_Config+0x28>)
 80011cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 80011d0:	2000      	movs	r0, #0
 80011d2:	6098      	str	r0, [r3, #8]
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	4770      	bx	lr
 80011da:	2001      	movs	r0, #1
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e010 	.word	0xe000e010
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_DMA_Abort_IT>:
 80011e8:	b508      	push	{r3, lr}
 80011ea:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d003      	beq.n	80011fa <HAL_DMA_Abort_IT+0x12>
 80011f2:	2304      	movs	r3, #4
 80011f4:	6383      	str	r3, [r0, #56]	; 0x38
 80011f6:	2001      	movs	r0, #1
 80011f8:	bd08      	pop	{r3, pc}
 80011fa:	6802      	ldr	r2, [r0, #0]
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	f023 030e 	bic.w	r3, r3, #14
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	6802      	ldr	r2, [r0, #0]
 8001206:	6813      	ldr	r3, [r2, #0]
 8001208:	f023 0301 	bic.w	r3, r3, #1
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	6803      	ldr	r3, [r0, #0]
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_DMA_Abort_IT+0x90>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d011      	beq.n	800123a <HAL_DMA_Abort_IT+0x52>
 8001216:	3214      	adds	r2, #20
 8001218:	4293      	cmp	r3, r2
 800121a:	d010      	beq.n	800123e <HAL_DMA_Abort_IT+0x56>
 800121c:	3214      	adds	r2, #20
 800121e:	4293      	cmp	r3, r2
 8001220:	d00f      	beq.n	8001242 <HAL_DMA_Abort_IT+0x5a>
 8001222:	3214      	adds	r2, #20
 8001224:	4293      	cmp	r3, r2
 8001226:	d00f      	beq.n	8001248 <HAL_DMA_Abort_IT+0x60>
 8001228:	3214      	adds	r2, #20
 800122a:	4293      	cmp	r3, r2
 800122c:	d00f      	beq.n	800124e <HAL_DMA_Abort_IT+0x66>
 800122e:	3214      	adds	r2, #20
 8001230:	4293      	cmp	r3, r2
 8001232:	d10f      	bne.n	8001254 <HAL_DMA_Abort_IT+0x6c>
 8001234:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001238:	e00e      	b.n	8001258 <HAL_DMA_Abort_IT+0x70>
 800123a:	2201      	movs	r2, #1
 800123c:	e00c      	b.n	8001258 <HAL_DMA_Abort_IT+0x70>
 800123e:	2210      	movs	r2, #16
 8001240:	e00a      	b.n	8001258 <HAL_DMA_Abort_IT+0x70>
 8001242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001246:	e007      	b.n	8001258 <HAL_DMA_Abort_IT+0x70>
 8001248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124c:	e004      	b.n	8001258 <HAL_DMA_Abort_IT+0x70>
 800124e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001252:	e001      	b.n	8001258 <HAL_DMA_Abort_IT+0x70>
 8001254:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HAL_DMA_Abort_IT+0x94>)
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	2301      	movs	r3, #1
 800125e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8001262:	2300      	movs	r3, #0
 8001264:	f880 3020 	strb.w	r3, [r0, #32]
 8001268:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800126a:	b113      	cbz	r3, 8001272 <HAL_DMA_Abort_IT+0x8a>
 800126c:	4798      	blx	r3
 800126e:	2000      	movs	r0, #0
 8001270:	bd08      	pop	{r3, pc}
 8001272:	2000      	movs	r0, #0
 8001274:	bd08      	pop	{r3, pc}
 8001276:	bf00      	nop
 8001278:	40020008 	.word	0x40020008
 800127c:	40020000 	.word	0x40020000

08001280 <HAL_GPIO_Init>:
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b083      	sub	sp, #12
 8001284:	2600      	movs	r6, #0
 8001286:	4634      	mov	r4, r6
 8001288:	e0d5      	b.n	8001436 <HAL_GPIO_Init+0x1b6>
 800128a:	2201      	movs	r2, #1
 800128c:	40a2      	lsls	r2, r4
 800128e:	680b      	ldr	r3, [r1, #0]
 8001290:	4013      	ands	r3, r2
 8001292:	429a      	cmp	r2, r3
 8001294:	f040 80ce 	bne.w	8001434 <HAL_GPIO_Init+0x1b4>
 8001298:	684d      	ldr	r5, [r1, #4]
 800129a:	2d12      	cmp	r5, #18
 800129c:	d02d      	beq.n	80012fa <HAL_GPIO_Init+0x7a>
 800129e:	d80b      	bhi.n	80012b8 <HAL_GPIO_Init+0x38>
 80012a0:	2d02      	cmp	r5, #2
 80012a2:	d027      	beq.n	80012f4 <HAL_GPIO_Init+0x74>
 80012a4:	d803      	bhi.n	80012ae <HAL_GPIO_Init+0x2e>
 80012a6:	b35d      	cbz	r5, 8001300 <HAL_GPIO_Init+0x80>
 80012a8:	2d01      	cmp	r5, #1
 80012aa:	d01e      	beq.n	80012ea <HAL_GPIO_Init+0x6a>
 80012ac:	e035      	b.n	800131a <HAL_GPIO_Init+0x9a>
 80012ae:	2d03      	cmp	r5, #3
 80012b0:	d030      	beq.n	8001314 <HAL_GPIO_Init+0x94>
 80012b2:	2d11      	cmp	r5, #17
 80012b4:	d01b      	beq.n	80012ee <HAL_GPIO_Init+0x6e>
 80012b6:	e030      	b.n	800131a <HAL_GPIO_Init+0x9a>
 80012b8:	4f61      	ldr	r7, [pc, #388]	; (8001440 <HAL_GPIO_Init+0x1c0>)
 80012ba:	42bd      	cmp	r5, r7
 80012bc:	d020      	beq.n	8001300 <HAL_GPIO_Init+0x80>
 80012be:	d808      	bhi.n	80012d2 <HAL_GPIO_Init+0x52>
 80012c0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80012c4:	42bd      	cmp	r5, r7
 80012c6:	d01b      	beq.n	8001300 <HAL_GPIO_Init+0x80>
 80012c8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80012cc:	42bd      	cmp	r5, r7
 80012ce:	d124      	bne.n	800131a <HAL_GPIO_Init+0x9a>
 80012d0:	e016      	b.n	8001300 <HAL_GPIO_Init+0x80>
 80012d2:	4f5c      	ldr	r7, [pc, #368]	; (8001444 <HAL_GPIO_Init+0x1c4>)
 80012d4:	42bd      	cmp	r5, r7
 80012d6:	d013      	beq.n	8001300 <HAL_GPIO_Init+0x80>
 80012d8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80012dc:	42bd      	cmp	r5, r7
 80012de:	d00f      	beq.n	8001300 <HAL_GPIO_Init+0x80>
 80012e0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80012e4:	42bd      	cmp	r5, r7
 80012e6:	d118      	bne.n	800131a <HAL_GPIO_Init+0x9a>
 80012e8:	e00a      	b.n	8001300 <HAL_GPIO_Init+0x80>
 80012ea:	68ce      	ldr	r6, [r1, #12]
 80012ec:	e015      	b.n	800131a <HAL_GPIO_Init+0x9a>
 80012ee:	68ce      	ldr	r6, [r1, #12]
 80012f0:	3604      	adds	r6, #4
 80012f2:	e012      	b.n	800131a <HAL_GPIO_Init+0x9a>
 80012f4:	68ce      	ldr	r6, [r1, #12]
 80012f6:	3608      	adds	r6, #8
 80012f8:	e00f      	b.n	800131a <HAL_GPIO_Init+0x9a>
 80012fa:	68ce      	ldr	r6, [r1, #12]
 80012fc:	360c      	adds	r6, #12
 80012fe:	e00c      	b.n	800131a <HAL_GPIO_Init+0x9a>
 8001300:	688d      	ldr	r5, [r1, #8]
 8001302:	b14d      	cbz	r5, 8001318 <HAL_GPIO_Init+0x98>
 8001304:	2d01      	cmp	r5, #1
 8001306:	d102      	bne.n	800130e <HAL_GPIO_Init+0x8e>
 8001308:	6102      	str	r2, [r0, #16]
 800130a:	2608      	movs	r6, #8
 800130c:	e005      	b.n	800131a <HAL_GPIO_Init+0x9a>
 800130e:	6142      	str	r2, [r0, #20]
 8001310:	2608      	movs	r6, #8
 8001312:	e002      	b.n	800131a <HAL_GPIO_Init+0x9a>
 8001314:	2600      	movs	r6, #0
 8001316:	e000      	b.n	800131a <HAL_GPIO_Init+0x9a>
 8001318:	2604      	movs	r6, #4
 800131a:	2bff      	cmp	r3, #255	; 0xff
 800131c:	d801      	bhi.n	8001322 <HAL_GPIO_Init+0xa2>
 800131e:	4686      	mov	lr, r0
 8001320:	e001      	b.n	8001326 <HAL_GPIO_Init+0xa6>
 8001322:	f100 0e04 	add.w	lr, r0, #4
 8001326:	2bff      	cmp	r3, #255	; 0xff
 8001328:	d801      	bhi.n	800132e <HAL_GPIO_Init+0xae>
 800132a:	00a2      	lsls	r2, r4, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0xb4>
 800132e:	f1a4 0208 	sub.w	r2, r4, #8
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	f8de 7000 	ldr.w	r7, [lr]
 8001338:	250f      	movs	r5, #15
 800133a:	4095      	lsls	r5, r2
 800133c:	ea27 0505 	bic.w	r5, r7, r5
 8001340:	fa06 f202 	lsl.w	r2, r6, r2
 8001344:	432a      	orrs	r2, r5
 8001346:	f8ce 2000 	str.w	r2, [lr]
 800134a:	684a      	ldr	r2, [r1, #4]
 800134c:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8001350:	d070      	beq.n	8001434 <HAL_GPIO_Init+0x1b4>
 8001352:	4a3d      	ldr	r2, [pc, #244]	; (8001448 <HAL_GPIO_Init+0x1c8>)
 8001354:	6995      	ldr	r5, [r2, #24]
 8001356:	f045 0501 	orr.w	r5, r5, #1
 800135a:	6195      	str	r5, [r2, #24]
 800135c:	6992      	ldr	r2, [r2, #24]
 800135e:	f002 0201 	and.w	r2, r2, #1
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9a01      	ldr	r2, [sp, #4]
 8001366:	08a7      	lsrs	r7, r4, #2
 8001368:	1cbd      	adds	r5, r7, #2
 800136a:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_GPIO_Init+0x1cc>)
 800136c:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 8001370:	f004 0203 	and.w	r2, r4, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	f04f 0e0f 	mov.w	lr, #15
 800137a:	fa0e fe02 	lsl.w	lr, lr, r2
 800137e:	ea25 0e0e 	bic.w	lr, r5, lr
 8001382:	4d33      	ldr	r5, [pc, #204]	; (8001450 <HAL_GPIO_Init+0x1d0>)
 8001384:	42a8      	cmp	r0, r5
 8001386:	d00d      	beq.n	80013a4 <HAL_GPIO_Init+0x124>
 8001388:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800138c:	42a8      	cmp	r0, r5
 800138e:	d00b      	beq.n	80013a8 <HAL_GPIO_Init+0x128>
 8001390:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001394:	42a8      	cmp	r0, r5
 8001396:	d009      	beq.n	80013ac <HAL_GPIO_Init+0x12c>
 8001398:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800139c:	42a8      	cmp	r0, r5
 800139e:	d107      	bne.n	80013b0 <HAL_GPIO_Init+0x130>
 80013a0:	2503      	movs	r5, #3
 80013a2:	e006      	b.n	80013b2 <HAL_GPIO_Init+0x132>
 80013a4:	2500      	movs	r5, #0
 80013a6:	e004      	b.n	80013b2 <HAL_GPIO_Init+0x132>
 80013a8:	2501      	movs	r5, #1
 80013aa:	e002      	b.n	80013b2 <HAL_GPIO_Init+0x132>
 80013ac:	2502      	movs	r5, #2
 80013ae:	e000      	b.n	80013b2 <HAL_GPIO_Init+0x132>
 80013b0:	2504      	movs	r5, #4
 80013b2:	fa05 f202 	lsl.w	r2, r5, r2
 80013b6:	ea4e 0202 	orr.w	r2, lr, r2
 80013ba:	3702      	adds	r7, #2
 80013bc:	4d23      	ldr	r5, [pc, #140]	; (800144c <HAL_GPIO_Init+0x1cc>)
 80013be:	f845 2027 	str.w	r2, [r5, r7, lsl #2]
 80013c2:	684a      	ldr	r2, [r1, #4]
 80013c4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80013c8:	d005      	beq.n	80013d6 <HAL_GPIO_Init+0x156>
 80013ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80013ce:	682a      	ldr	r2, [r5, #0]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	602a      	str	r2, [r5, #0]
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x160>
 80013d6:	4d1f      	ldr	r5, [pc, #124]	; (8001454 <HAL_GPIO_Init+0x1d4>)
 80013d8:	682a      	ldr	r2, [r5, #0]
 80013da:	ea22 0203 	bic.w	r2, r2, r3
 80013de:	602a      	str	r2, [r5, #0]
 80013e0:	684a      	ldr	r2, [r1, #4]
 80013e2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80013e6:	d004      	beq.n	80013f2 <HAL_GPIO_Init+0x172>
 80013e8:	4d1a      	ldr	r5, [pc, #104]	; (8001454 <HAL_GPIO_Init+0x1d4>)
 80013ea:	686a      	ldr	r2, [r5, #4]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	606a      	str	r2, [r5, #4]
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x17c>
 80013f2:	4d18      	ldr	r5, [pc, #96]	; (8001454 <HAL_GPIO_Init+0x1d4>)
 80013f4:	686a      	ldr	r2, [r5, #4]
 80013f6:	ea22 0203 	bic.w	r2, r2, r3
 80013fa:	606a      	str	r2, [r5, #4]
 80013fc:	684a      	ldr	r2, [r1, #4]
 80013fe:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 8001402:	d004      	beq.n	800140e <HAL_GPIO_Init+0x18e>
 8001404:	4d13      	ldr	r5, [pc, #76]	; (8001454 <HAL_GPIO_Init+0x1d4>)
 8001406:	68aa      	ldr	r2, [r5, #8]
 8001408:	431a      	orrs	r2, r3
 800140a:	60aa      	str	r2, [r5, #8]
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x198>
 800140e:	4d11      	ldr	r5, [pc, #68]	; (8001454 <HAL_GPIO_Init+0x1d4>)
 8001410:	68aa      	ldr	r2, [r5, #8]
 8001412:	ea22 0203 	bic.w	r2, r2, r3
 8001416:	60aa      	str	r2, [r5, #8]
 8001418:	684a      	ldr	r2, [r1, #4]
 800141a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800141e:	d004      	beq.n	800142a <HAL_GPIO_Init+0x1aa>
 8001420:	4d0c      	ldr	r5, [pc, #48]	; (8001454 <HAL_GPIO_Init+0x1d4>)
 8001422:	68ea      	ldr	r2, [r5, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	60eb      	str	r3, [r5, #12]
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x1b4>
 800142a:	4d0a      	ldr	r5, [pc, #40]	; (8001454 <HAL_GPIO_Init+0x1d4>)
 800142c:	68ea      	ldr	r2, [r5, #12]
 800142e:	ea22 0303 	bic.w	r3, r2, r3
 8001432:	60eb      	str	r3, [r5, #12]
 8001434:	3401      	adds	r4, #1
 8001436:	2c0f      	cmp	r4, #15
 8001438:	f67f af27 	bls.w	800128a <HAL_GPIO_Init+0xa>
 800143c:	b003      	add	sp, #12
 800143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001440:	10210000 	.word	0x10210000
 8001444:	10310000 	.word	0x10310000
 8001448:	40021000 	.word	0x40021000
 800144c:	40010000 	.word	0x40010000
 8001450:	40010800 	.word	0x40010800
 8001454:	40010400 	.word	0x40010400

08001458 <HAL_GPIO_ReadPin>:
 8001458:	6883      	ldr	r3, [r0, #8]
 800145a:	4219      	tst	r1, r3
 800145c:	d001      	beq.n	8001462 <HAL_GPIO_ReadPin+0xa>
 800145e:	2001      	movs	r0, #1
 8001460:	4770      	bx	lr
 8001462:	2000      	movs	r0, #0
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <HAL_GPIO_WritePin>:
 8001468:	b10a      	cbz	r2, 800146e <HAL_GPIO_WritePin+0x6>
 800146a:	6101      	str	r1, [r0, #16]
 800146c:	4770      	bx	lr
 800146e:	0409      	lsls	r1, r1, #16
 8001470:	6101      	str	r1, [r0, #16]
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_TogglePin>:
 8001474:	68c3      	ldr	r3, [r0, #12]
 8001476:	4059      	eors	r1, r3
 8001478:	60c1      	str	r1, [r0, #12]
 800147a:	4770      	bx	lr

0800147c <HAL_GPIO_EXTI_IRQHandler>:
 800147c:	b508      	push	{r3, lr}
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	4203      	tst	r3, r0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_EXTI_IRQHandler+0x12>
 8001486:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001488:	6158      	str	r0, [r3, #20]
 800148a:	f005 ffd3 	bl	8007434 <HAL_GPIO_EXTI_Callback>
 800148e:	bd08      	pop	{r3, pc}
 8001490:	40010400 	.word	0x40010400

08001494 <I2C_Master_SB>:
 8001494:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b40      	cmp	r3, #64	; 0x40
 800149c:	d10e      	bne.n	80014bc <I2C_Master_SB+0x28>
 800149e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014a0:	b92b      	cbnz	r3, 80014ae <I2C_Master_SB+0x1a>
 80014a2:	6802      	ldr	r2, [r0, #0]
 80014a4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014a6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80014aa:	6113      	str	r3, [r2, #16]
 80014ac:	e032      	b.n	8001514 <I2C_Master_SB+0x80>
 80014ae:	6802      	ldr	r2, [r0, #0]
 80014b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	6113      	str	r3, [r2, #16]
 80014ba:	e02b      	b.n	8001514 <I2C_Master_SB+0x80>
 80014bc:	6903      	ldr	r3, [r0, #16]
 80014be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014c2:	d111      	bne.n	80014e8 <I2C_Master_SB+0x54>
 80014c4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b21      	cmp	r3, #33	; 0x21
 80014cc:	d105      	bne.n	80014da <I2C_Master_SB+0x46>
 80014ce:	6802      	ldr	r2, [r0, #0]
 80014d0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80014d6:	6113      	str	r3, [r2, #16]
 80014d8:	e01c      	b.n	8001514 <I2C_Master_SB+0x80>
 80014da:	6802      	ldr	r2, [r0, #0]
 80014dc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	6113      	str	r3, [r2, #16]
 80014e6:	e015      	b.n	8001514 <I2C_Master_SB+0x80>
 80014e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014ea:	b943      	cbnz	r3, 80014fe <I2C_Master_SB+0x6a>
 80014ec:	6802      	ldr	r2, [r0, #0]
 80014ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80014f0:	11db      	asrs	r3, r3, #7
 80014f2:	f003 0306 	and.w	r3, r3, #6
 80014f6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80014fa:	6113      	str	r3, [r2, #16]
 80014fc:	e00a      	b.n	8001514 <I2C_Master_SB+0x80>
 80014fe:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001500:	2b01      	cmp	r3, #1
 8001502:	d107      	bne.n	8001514 <I2C_Master_SB+0x80>
 8001504:	6802      	ldr	r2, [r0, #0]
 8001506:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001508:	11db      	asrs	r3, r3, #7
 800150a:	f003 0306 	and.w	r3, r3, #6
 800150e:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 8001512:	6113      	str	r3, [r2, #16]
 8001514:	2000      	movs	r0, #0
 8001516:	4770      	bx	lr

08001518 <I2C_Master_ADD10>:
 8001518:	6802      	ldr	r2, [r0, #0]
 800151a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800151c:	b2db      	uxtb	r3, r3
 800151e:	6113      	str	r3, [r2, #16]
 8001520:	2000      	movs	r0, #0
 8001522:	4770      	bx	lr

08001524 <I2C_Master_ADDR>:
 8001524:	b410      	push	{r4}
 8001526:	b08d      	sub	sp, #52	; 0x34
 8001528:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800152c:	b2da      	uxtb	r2, r3
 800152e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001530:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001532:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b22      	cmp	r3, #34	; 0x22
 800153a:	f040 80d3 	bne.w	80016e4 <I2C_Master_ADDR+0x1c0>
 800153e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001540:	b94b      	cbnz	r3, 8001556 <I2C_Master_ADDR+0x32>
 8001542:	2a40      	cmp	r2, #64	; 0x40
 8001544:	d107      	bne.n	8001556 <I2C_Master_ADDR+0x32>
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	6803      	ldr	r3, [r0, #0]
 800154a:	695a      	ldr	r2, [r3, #20]
 800154c:	9201      	str	r2, [sp, #4]
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	9301      	str	r3, [sp, #4]
 8001552:	9b01      	ldr	r3, [sp, #4]
 8001554:	e0ce      	b.n	80016f4 <I2C_Master_ADDR+0x1d0>
 8001556:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001558:	b99b      	cbnz	r3, 8001582 <I2C_Master_ADDR+0x5e>
 800155a:	6903      	ldr	r3, [r0, #16]
 800155c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001560:	d10f      	bne.n	8001582 <I2C_Master_ADDR+0x5e>
 8001562:	2300      	movs	r3, #0
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	6803      	ldr	r3, [r0, #0]
 8001568:	695a      	ldr	r2, [r3, #20]
 800156a:	9202      	str	r2, [sp, #8]
 800156c:	699a      	ldr	r2, [r3, #24]
 800156e:	9202      	str	r2, [sp, #8]
 8001570:	9a02      	ldr	r2, [sp, #8]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800157c:	3301      	adds	r3, #1
 800157e:	6503      	str	r3, [r0, #80]	; 0x50
 8001580:	e0b8      	b.n	80016f4 <I2C_Master_ADDR+0x1d0>
 8001582:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001584:	b29b      	uxth	r3, r3
 8001586:	b95b      	cbnz	r3, 80015a0 <I2C_Master_ADDR+0x7c>
 8001588:	9303      	str	r3, [sp, #12]
 800158a:	6803      	ldr	r3, [r0, #0]
 800158c:	695a      	ldr	r2, [r3, #20]
 800158e:	9203      	str	r2, [sp, #12]
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	9203      	str	r2, [sp, #12]
 8001594:	9a03      	ldr	r2, [sp, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	e09e      	b.n	80016de <I2C_Master_ADDR+0x1ba>
 80015a0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d154      	bne.n	8001652 <I2C_Master_ADDR+0x12e>
 80015a8:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 80015ac:	d122      	bne.n	80015f4 <I2C_Master_ADDR+0xd0>
 80015ae:	6802      	ldr	r2, [r0, #0]
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	6803      	ldr	r3, [r0, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80015c0:	d00c      	beq.n	80015dc <I2C_Master_ADDR+0xb8>
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	2300      	movs	r3, #0
 80015cc:	9304      	str	r3, [sp, #16]
 80015ce:	6803      	ldr	r3, [r0, #0]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	9204      	str	r2, [sp, #16]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	9304      	str	r3, [sp, #16]
 80015d8:	9b04      	ldr	r3, [sp, #16]
 80015da:	e080      	b.n	80016de <I2C_Master_ADDR+0x1ba>
 80015dc:	2200      	movs	r2, #0
 80015de:	9205      	str	r2, [sp, #20]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	9205      	str	r2, [sp, #20]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	9205      	str	r2, [sp, #20]
 80015e8:	9a05      	ldr	r2, [sp, #20]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e074      	b.n	80016de <I2C_Master_ADDR+0x1ba>
 80015f4:	2904      	cmp	r1, #4
 80015f6:	d01a      	beq.n	800162e <I2C_Master_ADDR+0x10a>
 80015f8:	2908      	cmp	r1, #8
 80015fa:	d018      	beq.n	800162e <I2C_Master_ADDR+0x10a>
 80015fc:	2c12      	cmp	r4, #18
 80015fe:	d016      	beq.n	800162e <I2C_Master_ADDR+0x10a>
 8001600:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001602:	2b02      	cmp	r3, #2
 8001604:	d005      	beq.n	8001612 <I2C_Master_ADDR+0xee>
 8001606:	6802      	ldr	r2, [r0, #0]
 8001608:	6813      	ldr	r3, [r2, #0]
 800160a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e004      	b.n	800161c <I2C_Master_ADDR+0xf8>
 8001612:	6802      	ldr	r2, [r0, #0]
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	9306      	str	r3, [sp, #24]
 8001620:	6803      	ldr	r3, [r0, #0]
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	9206      	str	r2, [sp, #24]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	9306      	str	r3, [sp, #24]
 800162a:	9b06      	ldr	r3, [sp, #24]
 800162c:	e057      	b.n	80016de <I2C_Master_ADDR+0x1ba>
 800162e:	6802      	ldr	r2, [r0, #0]
 8001630:	6813      	ldr	r3, [r2, #0]
 8001632:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	2300      	movs	r3, #0
 800163a:	9307      	str	r3, [sp, #28]
 800163c:	6803      	ldr	r3, [r0, #0]
 800163e:	695a      	ldr	r2, [r3, #20]
 8001640:	9207      	str	r2, [sp, #28]
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	9207      	str	r2, [sp, #28]
 8001646:	9a07      	ldr	r2, [sp, #28]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e045      	b.n	80016de <I2C_Master_ADDR+0x1ba>
 8001652:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d12b      	bne.n	80016b2 <I2C_Master_ADDR+0x18e>
 800165a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800165c:	2b02      	cmp	r3, #2
 800165e:	d011      	beq.n	8001684 <I2C_Master_ADDR+0x160>
 8001660:	6802      	ldr	r2, [r0, #0]
 8001662:	6813      	ldr	r3, [r2, #0]
 8001664:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	2300      	movs	r3, #0
 800166c:	9308      	str	r3, [sp, #32]
 800166e:	6803      	ldr	r3, [r0, #0]
 8001670:	695a      	ldr	r2, [r3, #20]
 8001672:	9208      	str	r2, [sp, #32]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	9208      	str	r2, [sp, #32]
 8001678:	9a08      	ldr	r2, [sp, #32]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e00c      	b.n	800169e <I2C_Master_ADDR+0x17a>
 8001684:	6802      	ldr	r2, [r0, #0]
 8001686:	6813      	ldr	r3, [r2, #0]
 8001688:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	2300      	movs	r3, #0
 8001690:	9309      	str	r3, [sp, #36]	; 0x24
 8001692:	6803      	ldr	r3, [r0, #0]
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	9209      	str	r2, [sp, #36]	; 0x24
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	9309      	str	r3, [sp, #36]	; 0x24
 800169c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800169e:	6803      	ldr	r3, [r0, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80016a6:	d01a      	beq.n	80016de <I2C_Master_ADDR+0x1ba>
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	e015      	b.n	80016de <I2C_Master_ADDR+0x1ba>
 80016b2:	6802      	ldr	r2, [r0, #0]
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	6803      	ldr	r3, [r0, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80016c4:	d003      	beq.n	80016ce <I2C_Master_ADDR+0x1aa>
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	2300      	movs	r3, #0
 80016d0:	930a      	str	r3, [sp, #40]	; 0x28
 80016d2:	6803      	ldr	r3, [r0, #0]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	920a      	str	r2, [sp, #40]	; 0x28
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	930a      	str	r3, [sp, #40]	; 0x28
 80016dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80016de:	2300      	movs	r3, #0
 80016e0:	6503      	str	r3, [r0, #80]	; 0x50
 80016e2:	e007      	b.n	80016f4 <I2C_Master_ADDR+0x1d0>
 80016e4:	2300      	movs	r3, #0
 80016e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	920b      	str	r2, [sp, #44]	; 0x2c
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80016f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80016f4:	2000      	movs	r0, #0
 80016f6:	b00d      	add	sp, #52	; 0x34
 80016f8:	bc10      	pop	{r4}
 80016fa:	4770      	bx	lr

080016fc <I2C_SlaveTransmit_BTF>:
 80016fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	b153      	cbz	r3, 8001718 <I2C_SlaveTransmit_BTF+0x1c>
 8001702:	6802      	ldr	r2, [r0, #0]
 8001704:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001706:	1c59      	adds	r1, r3, #1
 8001708:	6241      	str	r1, [r0, #36]	; 0x24
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	6113      	str	r3, [r2, #16]
 800170e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29b      	uxth	r3, r3
 8001716:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001718:	2000      	movs	r0, #0
 800171a:	4770      	bx	lr

0800171c <I2C_SlaveReceive_BTF>:
 800171c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800171e:	b29b      	uxth	r3, r3
 8001720:	b153      	cbz	r3, 8001738 <I2C_SlaveReceive_BTF+0x1c>
 8001722:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	6242      	str	r2, [r0, #36]	; 0x24
 8001728:	6802      	ldr	r2, [r0, #0]
 800172a:	6912      	ldr	r2, [r2, #16]
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b29b      	uxth	r3, r3
 8001736:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001738:	2000      	movs	r0, #0
 800173a:	4770      	bx	lr

0800173c <HAL_I2C_Init>:
 800173c:	2800      	cmp	r0, #0
 800173e:	f000 80a2 	beq.w	8001886 <HAL_I2C_Init+0x14a>
 8001742:	b570      	push	{r4, r5, r6, lr}
 8001744:	4604      	mov	r4, r0
 8001746:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800174a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800174e:	d104      	bne.n	800175a <HAL_I2C_Init+0x1e>
 8001750:	2300      	movs	r3, #0
 8001752:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8001756:	f004 fc73 	bl	8006040 <HAL_I2C_MspInit>
 800175a:	2324      	movs	r3, #36	; 0x24
 800175c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001760:	6822      	ldr	r2, [r4, #0]
 8001762:	6813      	ldr	r3, [r2, #0]
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	f001 fd63 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 800176e:	6862      	ldr	r2, [r4, #4]
 8001770:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_I2C_Init+0x154>)
 8001772:	429a      	cmp	r2, r3
 8001774:	d805      	bhi.n	8001782 <HAL_I2C_Init+0x46>
 8001776:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_I2C_Init+0x158>)
 8001778:	4298      	cmp	r0, r3
 800177a:	bf8c      	ite	hi
 800177c:	2300      	movhi	r3, #0
 800177e:	2301      	movls	r3, #1
 8001780:	e004      	b.n	800178c <HAL_I2C_Init+0x50>
 8001782:	4b45      	ldr	r3, [pc, #276]	; (8001898 <HAL_I2C_Init+0x15c>)
 8001784:	4298      	cmp	r0, r3
 8001786:	bf8c      	ite	hi
 8001788:	2300      	movhi	r3, #0
 800178a:	2301      	movls	r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d17c      	bne.n	800188a <HAL_I2C_Init+0x14e>
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_I2C_Init+0x160>)
 8001792:	fba3 2300 	umull	r2, r3, r3, r0
 8001796:	0c9b      	lsrs	r3, r3, #18
 8001798:	6822      	ldr	r2, [r4, #0]
 800179a:	6053      	str	r3, [r2, #4]
 800179c:	6821      	ldr	r1, [r4, #0]
 800179e:	6865      	ldr	r5, [r4, #4]
 80017a0:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_I2C_Init+0x154>)
 80017a2:	4295      	cmp	r5, r2
 80017a4:	d801      	bhi.n	80017aa <HAL_I2C_Init+0x6e>
 80017a6:	3301      	adds	r3, #1
 80017a8:	e008      	b.n	80017bc <HAL_I2C_Init+0x80>
 80017aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a3b      	ldr	r2, [pc, #236]	; (80018a0 <HAL_I2C_Init+0x164>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	099b      	lsrs	r3, r3, #6
 80017ba:	3301      	adds	r3, #1
 80017bc:	620b      	str	r3, [r1, #32]
 80017be:	6822      	ldr	r2, [r4, #0]
 80017c0:	6861      	ldr	r1, [r4, #4]
 80017c2:	4b33      	ldr	r3, [pc, #204]	; (8001890 <HAL_I2C_Init+0x154>)
 80017c4:	4299      	cmp	r1, r3
 80017c6:	d80a      	bhi.n	80017de <HAL_I2C_Init+0xa2>
 80017c8:	3801      	subs	r0, #1
 80017ca:	0049      	lsls	r1, r1, #1
 80017cc:	fbb0 f0f1 	udiv	r0, r0, r1
 80017d0:	3001      	adds	r0, #1
 80017d2:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80017d6:	2804      	cmp	r0, #4
 80017d8:	bf38      	it	cc
 80017da:	2004      	movcc	r0, #4
 80017dc:	e035      	b.n	800184a <HAL_I2C_Init+0x10e>
 80017de:	68a5      	ldr	r5, [r4, #8]
 80017e0:	b95d      	cbnz	r5, 80017fa <HAL_I2C_Init+0xbe>
 80017e2:	1e43      	subs	r3, r0, #1
 80017e4:	eb01 0641 	add.w	r6, r1, r1, lsl #1
 80017e8:	fbb3 f3f6 	udiv	r3, r3, r6
 80017ec:	3301      	adds	r3, #1
 80017ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017f2:	fab3 f383 	clz	r3, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	e00c      	b.n	8001814 <HAL_I2C_Init+0xd8>
 80017fa:	1e43      	subs	r3, r0, #1
 80017fc:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 8001800:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001804:	fbb3 f3f6 	udiv	r3, r3, r6
 8001808:	3301      	adds	r3, #1
 800180a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180e:	fab3 f383 	clz	r3, r3
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	b9c3      	cbnz	r3, 8001848 <HAL_I2C_Init+0x10c>
 8001816:	b955      	cbnz	r5, 800182e <HAL_I2C_Init+0xf2>
 8001818:	1e43      	subs	r3, r0, #1
 800181a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800181e:	fbb3 f0f0 	udiv	r0, r3, r0
 8001822:	3001      	adds	r0, #1
 8001824:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001828:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800182c:	e00d      	b.n	800184a <HAL_I2C_Init+0x10e>
 800182e:	1e43      	subs	r3, r0, #1
 8001830:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001834:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001838:	fbb3 f0f0 	udiv	r0, r3, r0
 800183c:	3001      	adds	r0, #1
 800183e:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001842:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8001846:	e000      	b.n	800184a <HAL_I2C_Init+0x10e>
 8001848:	2001      	movs	r0, #1
 800184a:	61d0      	str	r0, [r2, #28]
 800184c:	6822      	ldr	r2, [r4, #0]
 800184e:	69e1      	ldr	r1, [r4, #28]
 8001850:	6a23      	ldr	r3, [r4, #32]
 8001852:	430b      	orrs	r3, r1
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	6822      	ldr	r2, [r4, #0]
 8001858:	6921      	ldr	r1, [r4, #16]
 800185a:	68e3      	ldr	r3, [r4, #12]
 800185c:	430b      	orrs	r3, r1
 800185e:	6093      	str	r3, [r2, #8]
 8001860:	6822      	ldr	r2, [r4, #0]
 8001862:	6961      	ldr	r1, [r4, #20]
 8001864:	69a3      	ldr	r3, [r4, #24]
 8001866:	430b      	orrs	r3, r1
 8001868:	60d3      	str	r3, [r2, #12]
 800186a:	6822      	ldr	r2, [r4, #0]
 800186c:	6813      	ldr	r3, [r2, #0]
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	2000      	movs	r0, #0
 8001876:	6420      	str	r0, [r4, #64]	; 0x40
 8001878:	2320      	movs	r3, #32
 800187a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800187e:	6320      	str	r0, [r4, #48]	; 0x30
 8001880:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 8001884:	bd70      	pop	{r4, r5, r6, pc}
 8001886:	2001      	movs	r0, #1
 8001888:	4770      	bx	lr
 800188a:	2001      	movs	r0, #1
 800188c:	bd70      	pop	{r4, r5, r6, pc}
 800188e:	bf00      	nop
 8001890:	000186a0 	.word	0x000186a0
 8001894:	001e847f 	.word	0x001e847f
 8001898:	003d08ff 	.word	0x003d08ff
 800189c:	431bde83 	.word	0x431bde83
 80018a0:	10624dd3 	.word	0x10624dd3

080018a4 <HAL_I2C_MasterTxCpltCallback>:
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <HAL_I2C_MasterRxCpltCallback>:
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop

080018ac <HAL_I2C_SlaveTxCpltCallback>:
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop

080018b0 <I2C_SlaveTransmit_TXE>:
 80018b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	b1f3      	cbz	r3, 80018fa <I2C_SlaveTransmit_TXE+0x4a>
 80018bc:	b510      	push	{r4, lr}
 80018be:	6801      	ldr	r1, [r0, #0]
 80018c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80018c2:	1c5c      	adds	r4, r3, #1
 80018c4:	6244      	str	r4, [r0, #36]	; 0x24
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	610b      	str	r3, [r1, #16]
 80018ca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	8543      	strh	r3, [r0, #42]	; 0x2a
 80018d4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b96b      	cbnz	r3, 80018f6 <I2C_SlaveTransmit_TXE+0x46>
 80018da:	2a29      	cmp	r2, #41	; 0x29
 80018dc:	d10b      	bne.n	80018f6 <I2C_SlaveTransmit_TXE+0x46>
 80018de:	6802      	ldr	r2, [r0, #0]
 80018e0:	6853      	ldr	r3, [r2, #4]
 80018e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018e6:	6053      	str	r3, [r2, #4]
 80018e8:	2321      	movs	r3, #33	; 0x21
 80018ea:	6303      	str	r3, [r0, #48]	; 0x30
 80018ec:	2328      	movs	r3, #40	; 0x28
 80018ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80018f2:	f7ff ffdb 	bl	80018ac <HAL_I2C_SlaveTxCpltCallback>
 80018f6:	2000      	movs	r0, #0
 80018f8:	bd10      	pop	{r4, pc}
 80018fa:	2000      	movs	r0, #0
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <HAL_I2C_SlaveRxCpltCallback>:
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop

08001904 <I2C_SlaveReceive_RXNE>:
 8001904:	b508      	push	{r3, lr}
 8001906:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800190a:	b2da      	uxtb	r2, r3
 800190c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800190e:	b29b      	uxth	r3, r3
 8001910:	b1db      	cbz	r3, 800194a <I2C_SlaveReceive_RXNE+0x46>
 8001912:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001914:	1c59      	adds	r1, r3, #1
 8001916:	6241      	str	r1, [r0, #36]	; 0x24
 8001918:	6801      	ldr	r1, [r0, #0]
 800191a:	6909      	ldr	r1, [r1, #16]
 800191c:	7019      	strb	r1, [r3, #0]
 800191e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001920:	b29b      	uxth	r3, r3
 8001922:	3b01      	subs	r3, #1
 8001924:	b29b      	uxth	r3, r3
 8001926:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001928:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800192a:	b29b      	uxth	r3, r3
 800192c:	b96b      	cbnz	r3, 800194a <I2C_SlaveReceive_RXNE+0x46>
 800192e:	2a2a      	cmp	r2, #42	; 0x2a
 8001930:	d10b      	bne.n	800194a <I2C_SlaveReceive_RXNE+0x46>
 8001932:	6802      	ldr	r2, [r0, #0]
 8001934:	6853      	ldr	r3, [r2, #4]
 8001936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800193a:	6053      	str	r3, [r2, #4]
 800193c:	2322      	movs	r3, #34	; 0x22
 800193e:	6303      	str	r3, [r0, #48]	; 0x30
 8001940:	2328      	movs	r3, #40	; 0x28
 8001942:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001946:	f7ff ffdb 	bl	8001900 <HAL_I2C_SlaveRxCpltCallback>
 800194a:	2000      	movs	r0, #0
 800194c:	bd08      	pop	{r3, pc}
 800194e:	bf00      	nop

08001950 <HAL_I2C_AddrCallback>:
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop

08001954 <I2C_Slave_ADDR>:
 8001954:	b508      	push	{r3, lr}
 8001956:	6803      	ldr	r3, [r0, #0]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	f012 0f04 	tst.w	r2, #4
 800195e:	d001      	beq.n	8001964 <I2C_Slave_ADDR+0x10>
 8001960:	2100      	movs	r1, #0
 8001962:	e000      	b.n	8001966 <I2C_Slave_ADDR+0x12>
 8001964:	2101      	movs	r1, #1
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	f013 0f80 	tst.w	r3, #128	; 0x80
 800196c:	d101      	bne.n	8001972 <I2C_Slave_ADDR+0x1e>
 800196e:	8982      	ldrh	r2, [r0, #12]
 8001970:	e000      	b.n	8001974 <I2C_Slave_ADDR+0x20>
 8001972:	8b02      	ldrh	r2, [r0, #24]
 8001974:	f7ff ffec 	bl	8001950 <HAL_I2C_AddrCallback>
 8001978:	2000      	movs	r0, #0
 800197a:	bd08      	pop	{r3, pc}

0800197c <HAL_I2C_ListenCpltCallback>:
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <I2C_Slave_AF>:
 8001980:	b508      	push	{r3, lr}
 8001982:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001986:	b2db      	uxtb	r3, r3
 8001988:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800198a:	2a04      	cmp	r2, #4
 800198c:	d001      	beq.n	8001992 <I2C_Slave_AF+0x12>
 800198e:	2a08      	cmp	r2, #8
 8001990:	d11b      	bne.n	80019ca <I2C_Slave_AF+0x4a>
 8001992:	2b28      	cmp	r3, #40	; 0x28
 8001994:	d119      	bne.n	80019ca <I2C_Slave_AF+0x4a>
 8001996:	4b1e      	ldr	r3, [pc, #120]	; (8001a10 <I2C_Slave_AF+0x90>)
 8001998:	62c3      	str	r3, [r0, #44]	; 0x2c
 800199a:	6802      	ldr	r2, [r0, #0]
 800199c:	6853      	ldr	r3, [r2, #4]
 800199e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019a2:	6053      	str	r3, [r2, #4]
 80019a4:	6803      	ldr	r3, [r0, #0]
 80019a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	6802      	ldr	r2, [r0, #0]
 80019ae:	6813      	ldr	r3, [r2, #0]
 80019b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	2300      	movs	r3, #0
 80019b8:	6303      	str	r3, [r0, #48]	; 0x30
 80019ba:	2220      	movs	r2, #32
 80019bc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 80019c0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80019c4:	f7ff ffda 	bl	800197c <HAL_I2C_ListenCpltCallback>
 80019c8:	e020      	b.n	8001a0c <I2C_Slave_AF+0x8c>
 80019ca:	2b21      	cmp	r3, #33	; 0x21
 80019cc:	d11a      	bne.n	8001a04 <I2C_Slave_AF+0x84>
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <I2C_Slave_AF+0x90>)
 80019d0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80019d2:	2321      	movs	r3, #33	; 0x21
 80019d4:	6303      	str	r3, [r0, #48]	; 0x30
 80019d6:	2320      	movs	r3, #32
 80019d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80019dc:	2300      	movs	r3, #0
 80019de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80019e2:	6802      	ldr	r2, [r0, #0]
 80019e4:	6853      	ldr	r3, [r2, #4]
 80019e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019ea:	6053      	str	r3, [r2, #4]
 80019ec:	6803      	ldr	r3, [r0, #0]
 80019ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019f2:	615a      	str	r2, [r3, #20]
 80019f4:	6802      	ldr	r2, [r0, #0]
 80019f6:	6813      	ldr	r3, [r2, #0]
 80019f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	f7ff ff55 	bl	80018ac <HAL_I2C_SlaveTxCpltCallback>
 8001a02:	e003      	b.n	8001a0c <I2C_Slave_AF+0x8c>
 8001a04:	6803      	ldr	r3, [r0, #0]
 8001a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001a0a:	615a      	str	r2, [r3, #20]
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	bd08      	pop	{r3, pc}
 8001a10:	ffff0000 	.word	0xffff0000

08001a14 <HAL_I2C_MemTxCpltCallback>:
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop

08001a18 <I2C_MasterTransmit_TXE>:
 8001a18:	b510      	push	{r4, lr}
 8001a1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001a28:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8001a2a:	2900      	cmp	r1, #0
 8001a2c:	d138      	bne.n	8001aa0 <I2C_MasterTransmit_TXE+0x88>
 8001a2e:	2b21      	cmp	r3, #33	; 0x21
 8001a30:	d136      	bne.n	8001aa0 <I2C_MasterTransmit_TXE+0x88>
 8001a32:	2c04      	cmp	r4, #4
 8001a34:	d014      	beq.n	8001a60 <I2C_MasterTransmit_TXE+0x48>
 8001a36:	2c08      	cmp	r4, #8
 8001a38:	d012      	beq.n	8001a60 <I2C_MasterTransmit_TXE+0x48>
 8001a3a:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8001a3e:	d00f      	beq.n	8001a60 <I2C_MasterTransmit_TXE+0x48>
 8001a40:	6802      	ldr	r2, [r0, #0]
 8001a42:	6853      	ldr	r3, [r2, #4]
 8001a44:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a48:	6053      	str	r3, [r2, #4]
 8001a4a:	2311      	movs	r3, #17
 8001a4c:	6303      	str	r3, [r0, #48]	; 0x30
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001a54:	2320      	movs	r3, #32
 8001a56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001a5a:	f7ff ff23 	bl	80018a4 <HAL_I2C_MasterTxCpltCallback>
 8001a5e:	e07e      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001a60:	6802      	ldr	r2, [r0, #0]
 8001a62:	6853      	ldr	r3, [r2, #4]
 8001a64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a68:	6053      	str	r3, [r2, #4]
 8001a6a:	6802      	ldr	r2, [r0, #0]
 8001a6c:	6813      	ldr	r3, [r2, #0]
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	2300      	movs	r3, #0
 8001a76:	6303      	str	r3, [r0, #48]	; 0x30
 8001a78:	2320      	movs	r3, #32
 8001a7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001a7e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b40      	cmp	r3, #64	; 0x40
 8001a86:	d105      	bne.n	8001a94 <I2C_MasterTransmit_TXE+0x7c>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001a8e:	f7ff ffc1 	bl	8001a14 <HAL_I2C_MemTxCpltCallback>
 8001a92:	e064      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001a94:	2300      	movs	r3, #0
 8001a96:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001a9a:	f7ff ff03 	bl	80018a4 <HAL_I2C_MasterTxCpltCallback>
 8001a9e:	e05e      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001aa0:	2b21      	cmp	r3, #33	; 0x21
 8001aa2:	d003      	beq.n	8001aac <I2C_MasterTransmit_TXE+0x94>
 8001aa4:	2a40      	cmp	r2, #64	; 0x40
 8001aa6:	d15a      	bne.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001aa8:	2b22      	cmp	r3, #34	; 0x22
 8001aaa:	d158      	bne.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001aac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	b92b      	cbnz	r3, 8001abe <I2C_MasterTransmit_TXE+0xa6>
 8001ab2:	6802      	ldr	r2, [r0, #0]
 8001ab4:	6853      	ldr	r3, [r2, #4]
 8001ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001aba:	6053      	str	r3, [r2, #4]
 8001abc:	e04f      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001abe:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b40      	cmp	r3, #64	; 0x40
 8001ac6:	d13f      	bne.n	8001b48 <I2C_MasterTransmit_TXE+0x130>
 8001ac8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001aca:	b99b      	cbnz	r3, 8001af4 <I2C_MasterTransmit_TXE+0xdc>
 8001acc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d107      	bne.n	8001ae2 <I2C_MasterTransmit_TXE+0xca>
 8001ad2:	6802      	ldr	r2, [r0, #0]
 8001ad4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	6113      	str	r3, [r2, #16]
 8001ada:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001adc:	3302      	adds	r3, #2
 8001ade:	6503      	str	r3, [r0, #80]	; 0x50
 8001ae0:	e03d      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001ae2:	6802      	ldr	r2, [r0, #0]
 8001ae4:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001ae6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001aea:	6113      	str	r3, [r2, #16]
 8001aec:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001aee:	3301      	adds	r3, #1
 8001af0:	6503      	str	r3, [r0, #80]	; 0x50
 8001af2:	e034      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001af4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <I2C_MasterTransmit_TXE+0xf2>
 8001afa:	6802      	ldr	r2, [r0, #0]
 8001afc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	6113      	str	r3, [r2, #16]
 8001b02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b04:	3301      	adds	r3, #1
 8001b06:	6503      	str	r3, [r0, #80]	; 0x50
 8001b08:	e029      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001b0a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d126      	bne.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001b10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b22      	cmp	r3, #34	; 0x22
 8001b18:	d105      	bne.n	8001b26 <I2C_MasterTransmit_TXE+0x10e>
 8001b1a:	6802      	ldr	r2, [r0, #0]
 8001b1c:	6813      	ldr	r3, [r2, #0]
 8001b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e01b      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001b26:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b21      	cmp	r3, #33	; 0x21
 8001b2e:	d116      	bne.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001b30:	6802      	ldr	r2, [r0, #0]
 8001b32:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b34:	1c59      	adds	r1, r3, #1
 8001b36:	6241      	str	r1, [r0, #36]	; 0x24
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	6113      	str	r3, [r2, #16]
 8001b3c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001b46:	e00a      	b.n	8001b5e <I2C_MasterTransmit_TXE+0x146>
 8001b48:	6802      	ldr	r2, [r0, #0]
 8001b4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b4c:	1c59      	adds	r1, r3, #1
 8001b4e:	6241      	str	r1, [r0, #36]	; 0x24
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	6113      	str	r3, [r2, #16]
 8001b54:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001b5e:	2000      	movs	r0, #0
 8001b60:	bd10      	pop	{r4, pc}
 8001b62:	bf00      	nop

08001b64 <I2C_MasterTransmit_BTF>:
 8001b64:	b508      	push	{r3, lr}
 8001b66:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001b68:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b21      	cmp	r3, #33	; 0x21
 8001b70:	d144      	bne.n	8001bfc <I2C_MasterTransmit_BTF+0x98>
 8001b72:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	b15b      	cbz	r3, 8001b90 <I2C_MasterTransmit_BTF+0x2c>
 8001b78:	6802      	ldr	r2, [r0, #0]
 8001b7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001b7c:	1c59      	adds	r1, r3, #1
 8001b7e:	6241      	str	r1, [r0, #36]	; 0x24
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	6113      	str	r3, [r2, #16]
 8001b84:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001b8e:	e035      	b.n	8001bfc <I2C_MasterTransmit_BTF+0x98>
 8001b90:	2a04      	cmp	r2, #4
 8001b92:	d014      	beq.n	8001bbe <I2C_MasterTransmit_BTF+0x5a>
 8001b94:	2a08      	cmp	r2, #8
 8001b96:	d012      	beq.n	8001bbe <I2C_MasterTransmit_BTF+0x5a>
 8001b98:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001b9c:	d00f      	beq.n	8001bbe <I2C_MasterTransmit_BTF+0x5a>
 8001b9e:	6802      	ldr	r2, [r0, #0]
 8001ba0:	6853      	ldr	r3, [r2, #4]
 8001ba2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ba6:	6053      	str	r3, [r2, #4]
 8001ba8:	2311      	movs	r3, #17
 8001baa:	6303      	str	r3, [r0, #48]	; 0x30
 8001bac:	2300      	movs	r3, #0
 8001bae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001bb8:	f7ff fe74 	bl	80018a4 <HAL_I2C_MasterTxCpltCallback>
 8001bbc:	e01e      	b.n	8001bfc <I2C_MasterTransmit_BTF+0x98>
 8001bbe:	6802      	ldr	r2, [r0, #0]
 8001bc0:	6853      	ldr	r3, [r2, #4]
 8001bc2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bc6:	6053      	str	r3, [r2, #4]
 8001bc8:	6802      	ldr	r2, [r0, #0]
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	6303      	str	r3, [r0, #48]	; 0x30
 8001bd6:	2320      	movs	r3, #32
 8001bd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001bdc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b40      	cmp	r3, #64	; 0x40
 8001be4:	d105      	bne.n	8001bf2 <I2C_MasterTransmit_BTF+0x8e>
 8001be6:	2300      	movs	r3, #0
 8001be8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001bec:	f7ff ff12 	bl	8001a14 <HAL_I2C_MemTxCpltCallback>
 8001bf0:	e004      	b.n	8001bfc <I2C_MasterTransmit_BTF+0x98>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001bf8:	f7ff fe54 	bl	80018a4 <HAL_I2C_MasterTxCpltCallback>
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	bd08      	pop	{r3, pc}

08001c00 <HAL_I2C_MemRxCpltCallback>:
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <I2C_MasterReceive_RXNE>:
 8001c04:	b508      	push	{r3, lr}
 8001c06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b22      	cmp	r3, #34	; 0x22
 8001c0e:	d15e      	bne.n	8001cce <I2C_MasterReceive_RXNE+0xca>
 8001c10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d90b      	bls.n	8001c30 <I2C_MasterReceive_RXNE+0x2c>
 8001c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	6242      	str	r2, [r0, #36]	; 0x24
 8001c1e:	6802      	ldr	r2, [r0, #0]
 8001c20:	6912      	ldr	r2, [r2, #16]
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001c2e:	e04e      	b.n	8001cce <I2C_MasterReceive_RXNE+0xca>
 8001c30:	3b02      	subs	r3, #2
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d818      	bhi.n	8001c68 <I2C_MasterReceive_RXNE+0x64>
 8001c36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d00a      	beq.n	8001c52 <I2C_MasterReceive_RXNE+0x4e>
 8001c3c:	6802      	ldr	r2, [r0, #0]
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	6802      	ldr	r2, [r0, #0]
 8001c48:	6813      	ldr	r3, [r2, #0]
 8001c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e004      	b.n	8001c5c <I2C_MasterReceive_RXNE+0x58>
 8001c52:	6802      	ldr	r2, [r0, #0]
 8001c54:	6813      	ldr	r3, [r2, #0]
 8001c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	6802      	ldr	r2, [r0, #0]
 8001c5e:	6853      	ldr	r3, [r2, #4]
 8001c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c64:	6053      	str	r3, [r2, #4]
 8001c66:	e032      	b.n	8001cce <I2C_MasterReceive_RXNE+0xca>
 8001c68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d005      	beq.n	8001c7a <I2C_MasterReceive_RXNE+0x76>
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	6813      	ldr	r3, [r2, #0]
 8001c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c76:	6013      	str	r3, [r2, #0]
 8001c78:	e004      	b.n	8001c84 <I2C_MasterReceive_RXNE+0x80>
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	6813      	ldr	r3, [r2, #0]
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	6802      	ldr	r2, [r0, #0]
 8001c86:	6853      	ldr	r3, [r2, #4]
 8001c88:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c8c:	6053      	str	r3, [r2, #4]
 8001c8e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	6242      	str	r2, [r0, #36]	; 0x24
 8001c94:	6802      	ldr	r2, [r0, #0]
 8001c96:	6912      	ldr	r2, [r2, #16]
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001ca4:	2320      	movs	r3, #32
 8001ca6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001caa:	2300      	movs	r3, #0
 8001cac:	6303      	str	r3, [r0, #48]	; 0x30
 8001cae:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d105      	bne.n	8001cc4 <I2C_MasterReceive_RXNE+0xc0>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001cbe:	f7ff ff9f 	bl	8001c00 <HAL_I2C_MemRxCpltCallback>
 8001cc2:	e004      	b.n	8001cce <I2C_MasterReceive_RXNE+0xca>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001cca:	f7ff fded 	bl	80018a8 <HAL_I2C_MasterRxCpltCallback>
 8001cce:	2000      	movs	r0, #0
 8001cd0:	bd08      	pop	{r3, pc}
 8001cd2:	bf00      	nop

08001cd4 <I2C_MasterReceive_BTF>:
 8001cd4:	b508      	push	{r3, lr}
 8001cd6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001cd8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d117      	bne.n	8001d10 <I2C_MasterReceive_BTF+0x3c>
 8001ce0:	2a04      	cmp	r2, #4
 8001ce2:	d004      	beq.n	8001cee <I2C_MasterReceive_BTF+0x1a>
 8001ce4:	2a08      	cmp	r2, #8
 8001ce6:	d002      	beq.n	8001cee <I2C_MasterReceive_BTF+0x1a>
 8001ce8:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001cec:	d104      	bne.n	8001cf8 <I2C_MasterReceive_BTF+0x24>
 8001cee:	6802      	ldr	r2, [r0, #0]
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	6242      	str	r2, [r0, #36]	; 0x24
 8001cfe:	6802      	ldr	r2, [r0, #0]
 8001d00:	6912      	ldr	r2, [r2, #16]
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001d0e:	e05e      	b.n	8001dce <I2C_MasterReceive_BTF+0xfa>
 8001d10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d14f      	bne.n	8001db8 <I2C_MasterReceive_BTF+0xe4>
 8001d18:	2a04      	cmp	r2, #4
 8001d1a:	d017      	beq.n	8001d4c <I2C_MasterReceive_BTF+0x78>
 8001d1c:	2a08      	cmp	r2, #8
 8001d1e:	d015      	beq.n	8001d4c <I2C_MasterReceive_BTF+0x78>
 8001d20:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001d24:	d012      	beq.n	8001d4c <I2C_MasterReceive_BTF+0x78>
 8001d26:	2a02      	cmp	r2, #2
 8001d28:	d005      	beq.n	8001d36 <I2C_MasterReceive_BTF+0x62>
 8001d2a:	6802      	ldr	r2, [r0, #0]
 8001d2c:	6813      	ldr	r3, [r2, #0]
 8001d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	e004      	b.n	8001d40 <I2C_MasterReceive_BTF+0x6c>
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	6813      	ldr	r3, [r2, #0]
 8001d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	6802      	ldr	r2, [r0, #0]
 8001d42:	6853      	ldr	r3, [r2, #4]
 8001d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d48:	6053      	str	r3, [r2, #4]
 8001d4a:	e009      	b.n	8001d60 <I2C_MasterReceive_BTF+0x8c>
 8001d4c:	6802      	ldr	r2, [r0, #0]
 8001d4e:	6853      	ldr	r3, [r2, #4]
 8001d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d54:	6053      	str	r3, [r2, #4]
 8001d56:	6802      	ldr	r2, [r0, #0]
 8001d58:	6813      	ldr	r3, [r2, #0]
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	6242      	str	r2, [r0, #36]	; 0x24
 8001d66:	6802      	ldr	r2, [r0, #0]
 8001d68:	6912      	ldr	r2, [r2, #16]
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001d76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	6242      	str	r2, [r0, #36]	; 0x24
 8001d7c:	6802      	ldr	r2, [r0, #0]
 8001d7e:	6912      	ldr	r2, [r2, #16]
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001d8c:	2320      	movs	r3, #32
 8001d8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001d92:	2300      	movs	r3, #0
 8001d94:	6303      	str	r3, [r0, #48]	; 0x30
 8001d96:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b40      	cmp	r3, #64	; 0x40
 8001d9e:	d105      	bne.n	8001dac <I2C_MasterReceive_BTF+0xd8>
 8001da0:	2300      	movs	r3, #0
 8001da2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001da6:	f7ff ff2b 	bl	8001c00 <HAL_I2C_MemRxCpltCallback>
 8001daa:	e010      	b.n	8001dce <I2C_MasterReceive_BTF+0xfa>
 8001dac:	2300      	movs	r3, #0
 8001dae:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001db2:	f7ff fd79 	bl	80018a8 <HAL_I2C_MasterRxCpltCallback>
 8001db6:	e00a      	b.n	8001dce <I2C_MasterReceive_BTF+0xfa>
 8001db8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	6242      	str	r2, [r0, #36]	; 0x24
 8001dbe:	6802      	ldr	r2, [r0, #0]
 8001dc0:	6912      	ldr	r2, [r2, #16]
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001dce:	2000      	movs	r0, #0
 8001dd0:	bd08      	pop	{r3, pc}
 8001dd2:	bf00      	nop

08001dd4 <HAL_I2C_ErrorCallback>:
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop

08001dd8 <HAL_I2C_AbortCpltCallback>:
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <I2C_ITError>:
 8001ddc:	b510      	push	{r4, lr}
 8001dde:	4604      	mov	r4, r0
 8001de0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001de4:	3b29      	subs	r3, #41	; 0x29
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d805      	bhi.n	8001df6 <I2C_ITError+0x1a>
 8001dea:	2300      	movs	r3, #0
 8001dec:	6303      	str	r3, [r0, #48]	; 0x30
 8001dee:	2328      	movs	r3, #40	; 0x28
 8001df0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001df4:	e010      	b.n	8001e18 <I2C_ITError+0x3c>
 8001df6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b60      	cmp	r3, #96	; 0x60
 8001dfe:	d007      	beq.n	8001e10 <I2C_ITError+0x34>
 8001e00:	6803      	ldr	r3, [r0, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001e08:	d102      	bne.n	8001e10 <I2C_ITError+0x34>
 8001e0a:	2320      	movs	r3, #32
 8001e0c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8001e10:	2300      	movs	r3, #0
 8001e12:	6323      	str	r3, [r4, #48]	; 0x30
 8001e14:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001e18:	6822      	ldr	r2, [r4, #0]
 8001e1a:	6813      	ldr	r3, [r2, #0]
 8001e1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001e2a:	d039      	beq.n	8001ea0 <I2C_ITError+0xc4>
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e36:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001e3a:	2a01      	cmp	r2, #1
 8001e3c:	d012      	beq.n	8001e64 <I2C_ITError+0x88>
 8001e3e:	4a37      	ldr	r2, [pc, #220]	; (8001f1c <I2C_ITError+0x140>)
 8001e40:	635a      	str	r2, [r3, #52]	; 0x34
 8001e42:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001e44:	f7ff f9d0 	bl	80011e8 <HAL_DMA_Abort_IT>
 8001e48:	2800      	cmp	r0, #0
 8001e4a:	d051      	beq.n	8001ef0 <I2C_ITError+0x114>
 8001e4c:	6822      	ldr	r2, [r4, #0]
 8001e4e:	6813      	ldr	r3, [r2, #0]
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	2320      	movs	r3, #32
 8001e58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001e5c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001e5e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e60:	4798      	blx	r3
 8001e62:	e045      	b.n	8001ef0 <I2C_ITError+0x114>
 8001e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e66:	4a2d      	ldr	r2, [pc, #180]	; (8001f1c <I2C_ITError+0x140>)
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
 8001e6a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e6c:	f7ff f9bc 	bl	80011e8 <HAL_DMA_Abort_IT>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	d03d      	beq.n	8001ef0 <I2C_ITError+0x114>
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e7c:	d004      	beq.n	8001e88 <I2C_ITError+0xac>
 8001e7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e80:	1c51      	adds	r1, r2, #1
 8001e82:	6261      	str	r1, [r4, #36]	; 0x24
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	7013      	strb	r3, [r2, #0]
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	6813      	ldr	r3, [r2, #0]
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	2320      	movs	r3, #32
 8001e94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8001e98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e9a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e9c:	4798      	blx	r3
 8001e9e:	e027      	b.n	8001ef0 <I2C_ITError+0x114>
 8001ea0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	2a60      	cmp	r2, #96	; 0x60
 8001ea8:	d116      	bne.n	8001ed8 <I2C_ITError+0xfc>
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	6422      	str	r2, [r4, #64]	; 0x40
 8001eb4:	695a      	ldr	r2, [r3, #20]
 8001eb6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001eba:	d004      	beq.n	8001ec6 <I2C_ITError+0xea>
 8001ebc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ebe:	1c51      	adds	r1, r2, #1
 8001ec0:	6261      	str	r1, [r4, #36]	; 0x24
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	7013      	strb	r3, [r2, #0]
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	6813      	ldr	r3, [r2, #0]
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7ff ff81 	bl	8001dd8 <HAL_I2C_AbortCpltCallback>
 8001ed6:	e00b      	b.n	8001ef0 <I2C_ITError+0x114>
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001ede:	d004      	beq.n	8001eea <I2C_ITError+0x10e>
 8001ee0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ee2:	1c51      	adds	r1, r2, #1
 8001ee4:	6261      	str	r1, [r4, #36]	; 0x24
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	7013      	strb	r3, [r2, #0]
 8001eea:	4620      	mov	r0, r4
 8001eec:	f7ff ff72 	bl	8001dd4 <HAL_I2C_ErrorCallback>
 8001ef0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b28      	cmp	r3, #40	; 0x28
 8001ef8:	d10f      	bne.n	8001f1a <I2C_ITError+0x13e>
 8001efa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001efc:	f013 0f04 	tst.w	r3, #4
 8001f00:	d00b      	beq.n	8001f1a <I2C_ITError+0x13e>
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <I2C_ITError+0x144>)
 8001f04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001f06:	2300      	movs	r3, #0
 8001f08:	6323      	str	r3, [r4, #48]	; 0x30
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001f10:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8001f14:	4620      	mov	r0, r4
 8001f16:	f7ff fd31 	bl	800197c <HAL_I2C_ListenCpltCallback>
 8001f1a:	bd10      	pop	{r4, pc}
 8001f1c:	08002261 	.word	0x08002261
 8001f20:	ffff0000 	.word	0xffff0000

08001f24 <I2C_Slave_STOPF>:
 8001f24:	b510      	push	{r4, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	6801      	ldr	r1, [r0, #0]
 8001f30:	684a      	ldr	r2, [r1, #4]
 8001f32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f36:	604a      	str	r2, [r1, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	9201      	str	r2, [sp, #4]
 8001f3c:	6802      	ldr	r2, [r0, #0]
 8001f3e:	6951      	ldr	r1, [r2, #20]
 8001f40:	9101      	str	r1, [sp, #4]
 8001f42:	6811      	ldr	r1, [r2, #0]
 8001f44:	f041 0101 	orr.w	r1, r1, #1
 8001f48:	6011      	str	r1, [r2, #0]
 8001f4a:	9a01      	ldr	r2, [sp, #4]
 8001f4c:	6801      	ldr	r1, [r0, #0]
 8001f4e:	680a      	ldr	r2, [r1, #0]
 8001f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f54:	600a      	str	r2, [r1, #0]
 8001f56:	6801      	ldr	r1, [r0, #0]
 8001f58:	684a      	ldr	r2, [r1, #4]
 8001f5a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001f5e:	d014      	beq.n	8001f8a <I2C_Slave_STOPF+0x66>
 8001f60:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	2a22      	cmp	r2, #34	; 0x22
 8001f68:	d004      	beq.n	8001f74 <I2C_Slave_STOPF+0x50>
 8001f6a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	2a2a      	cmp	r2, #42	; 0x2a
 8001f72:	d105      	bne.n	8001f80 <I2C_Slave_STOPF+0x5c>
 8001f74:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001f76:	6812      	ldr	r2, [r2, #0]
 8001f78:	6852      	ldr	r2, [r2, #4]
 8001f7a:	b292      	uxth	r2, r2
 8001f7c:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001f7e:	e004      	b.n	8001f8a <I2C_Slave_STOPF+0x66>
 8001f80:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	6852      	ldr	r2, [r2, #4]
 8001f86:	b292      	uxth	r2, r2
 8001f88:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001f8a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001f8c:	b292      	uxth	r2, r2
 8001f8e:	b302      	cbz	r2, 8001fd2 <I2C_Slave_STOPF+0xae>
 8001f90:	694a      	ldr	r2, [r1, #20]
 8001f92:	f012 0f04 	tst.w	r2, #4
 8001f96:	d009      	beq.n	8001fac <I2C_Slave_STOPF+0x88>
 8001f98:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f9a:	1c54      	adds	r4, r2, #1
 8001f9c:	6244      	str	r4, [r0, #36]	; 0x24
 8001f9e:	6909      	ldr	r1, [r1, #16]
 8001fa0:	7011      	strb	r1, [r2, #0]
 8001fa2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	3a01      	subs	r2, #1
 8001fa8:	b292      	uxth	r2, r2
 8001faa:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001fac:	6802      	ldr	r2, [r0, #0]
 8001fae:	6951      	ldr	r1, [r2, #20]
 8001fb0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001fb4:	d009      	beq.n	8001fca <I2C_Slave_STOPF+0xa6>
 8001fb6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001fb8:	1c4c      	adds	r4, r1, #1
 8001fba:	6244      	str	r4, [r0, #36]	; 0x24
 8001fbc:	6912      	ldr	r2, [r2, #16]
 8001fbe:	700a      	strb	r2, [r1, #0]
 8001fc0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001fc2:	b292      	uxth	r2, r2
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	b292      	uxth	r2, r2
 8001fc8:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001fca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001fcc:	f042 0204 	orr.w	r2, r2, #4
 8001fd0:	6402      	str	r2, [r0, #64]	; 0x40
 8001fd2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001fd4:	b112      	cbz	r2, 8001fdc <I2C_Slave_STOPF+0xb8>
 8001fd6:	f7ff ff01 	bl	8001ddc <I2C_ITError>
 8001fda:	e01f      	b.n	800201c <I2C_Slave_STOPF+0xf8>
 8001fdc:	2b28      	cmp	r3, #40	; 0x28
 8001fde:	d003      	beq.n	8001fe8 <I2C_Slave_STOPF+0xc4>
 8001fe0:	2b2a      	cmp	r3, #42	; 0x2a
 8001fe2:	d001      	beq.n	8001fe8 <I2C_Slave_STOPF+0xc4>
 8001fe4:	2b29      	cmp	r3, #41	; 0x29
 8001fe6:	d10b      	bne.n	8002000 <I2C_Slave_STOPF+0xdc>
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <I2C_Slave_STOPF+0x100>)
 8001fea:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001fec:	2300      	movs	r3, #0
 8001fee:	6303      	str	r3, [r0, #48]	; 0x30
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 8001ff6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8001ffa:	f7ff fcbf 	bl	800197c <HAL_I2C_ListenCpltCallback>
 8001ffe:	e00d      	b.n	800201c <I2C_Slave_STOPF+0xf8>
 8002000:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002002:	2a22      	cmp	r2, #34	; 0x22
 8002004:	d001      	beq.n	800200a <I2C_Slave_STOPF+0xe6>
 8002006:	2b22      	cmp	r3, #34	; 0x22
 8002008:	d108      	bne.n	800201c <I2C_Slave_STOPF+0xf8>
 800200a:	2300      	movs	r3, #0
 800200c:	6303      	str	r3, [r0, #48]	; 0x30
 800200e:	2220      	movs	r2, #32
 8002010:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 8002014:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002018:	f7ff fc72 	bl	8001900 <HAL_I2C_SlaveRxCpltCallback>
 800201c:	2000      	movs	r0, #0
 800201e:	b002      	add	sp, #8
 8002020:	bd10      	pop	{r4, pc}
 8002022:	bf00      	nop
 8002024:	ffff0000 	.word	0xffff0000

08002028 <HAL_I2C_EV_IRQHandler>:
 8002028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800202a:	4605      	mov	r5, r0
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	699f      	ldr	r7, [r3, #24]
 8002030:	695c      	ldr	r4, [r3, #20]
 8002032:	685e      	ldr	r6, [r3, #4]
 8002034:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b10      	cmp	r3, #16
 800203c:	d001      	beq.n	8002042 <HAL_I2C_EV_IRQHandler+0x1a>
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d14f      	bne.n	80020e2 <HAL_I2C_EV_IRQHandler+0xba>
 8002042:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 8002046:	d006      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2e>
 8002048:	f416 7f00 	tst.w	r6, #512	; 0x200
 800204c:	d003      	beq.n	8002056 <HAL_I2C_EV_IRQHandler+0x2e>
 800204e:	4628      	mov	r0, r5
 8002050:	f7ff fa20 	bl	8001494 <I2C_Master_SB>
 8002054:	e012      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x54>
 8002056:	4b45      	ldr	r3, [pc, #276]	; (800216c <HAL_I2C_EV_IRQHandler+0x144>)
 8002058:	4023      	ands	r3, r4
 800205a:	b133      	cbz	r3, 800206a <HAL_I2C_EV_IRQHandler+0x42>
 800205c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002060:	d003      	beq.n	800206a <HAL_I2C_EV_IRQHandler+0x42>
 8002062:	4628      	mov	r0, r5
 8002064:	f7ff fa58 	bl	8001518 <I2C_Master_ADD10>
 8002068:	e008      	b.n	800207c <HAL_I2C_EV_IRQHandler+0x54>
 800206a:	4b41      	ldr	r3, [pc, #260]	; (8002170 <HAL_I2C_EV_IRQHandler+0x148>)
 800206c:	4023      	ands	r3, r4
 800206e:	b12b      	cbz	r3, 800207c <HAL_I2C_EV_IRQHandler+0x54>
 8002070:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002074:	d002      	beq.n	800207c <HAL_I2C_EV_IRQHandler+0x54>
 8002076:	4628      	mov	r0, r5
 8002078:	f7ff fa54 	bl	8001524 <I2C_Master_ADDR>
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_I2C_EV_IRQHandler+0x14c>)
 800207e:	403b      	ands	r3, r7
 8002080:	b1bb      	cbz	r3, 80020b2 <HAL_I2C_EV_IRQHandler+0x8a>
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_I2C_EV_IRQHandler+0x150>)
 8002084:	4023      	ands	r3, r4
 8002086:	b14b      	cbz	r3, 800209c <HAL_I2C_EV_IRQHandler+0x74>
 8002088:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800208c:	d006      	beq.n	800209c <HAL_I2C_EV_IRQHandler+0x74>
 800208e:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 8002090:	4023      	ands	r3, r4
 8002092:	b91b      	cbnz	r3, 800209c <HAL_I2C_EV_IRQHandler+0x74>
 8002094:	4628      	mov	r0, r5
 8002096:	f7ff fcbf 	bl	8001a18 <I2C_MasterTransmit_TXE>
 800209a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800209c:	4b37      	ldr	r3, [pc, #220]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 800209e:	4023      	ands	r3, r4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d061      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x140>
 80020a4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80020a8:	d05e      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x140>
 80020aa:	4628      	mov	r0, r5
 80020ac:	f7ff fd5a 	bl	8001b64 <I2C_MasterTransmit_BTF>
 80020b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020b2:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_I2C_EV_IRQHandler+0x158>)
 80020b4:	4023      	ands	r3, r4
 80020b6:	b14b      	cbz	r3, 80020cc <HAL_I2C_EV_IRQHandler+0xa4>
 80020b8:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80020bc:	d006      	beq.n	80020cc <HAL_I2C_EV_IRQHandler+0xa4>
 80020be:	4b2f      	ldr	r3, [pc, #188]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 80020c0:	4023      	ands	r3, r4
 80020c2:	b91b      	cbnz	r3, 80020cc <HAL_I2C_EV_IRQHandler+0xa4>
 80020c4:	4628      	mov	r0, r5
 80020c6:	f7ff fd9d 	bl	8001c04 <I2C_MasterReceive_RXNE>
 80020ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 80020ce:	4023      	ands	r3, r4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d049      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x140>
 80020d4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80020d8:	d046      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x140>
 80020da:	4628      	mov	r0, r5
 80020dc:	f7ff fdfa 	bl	8001cd4 <I2C_MasterReceive_BTF>
 80020e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e2:	4b23      	ldr	r3, [pc, #140]	; (8002170 <HAL_I2C_EV_IRQHandler+0x148>)
 80020e4:	4023      	ands	r3, r4
 80020e6:	b12b      	cbz	r3, 80020f4 <HAL_I2C_EV_IRQHandler+0xcc>
 80020e8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80020ec:	d002      	beq.n	80020f4 <HAL_I2C_EV_IRQHandler+0xcc>
 80020ee:	f7ff fc31 	bl	8001954 <I2C_Slave_ADDR>
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_I2C_EV_IRQHandler+0x15c>)
 80020f6:	4023      	ands	r3, r4
 80020f8:	b133      	cbz	r3, 8002108 <HAL_I2C_EV_IRQHandler+0xe0>
 80020fa:	f416 7f00 	tst.w	r6, #512	; 0x200
 80020fe:	d003      	beq.n	8002108 <HAL_I2C_EV_IRQHandler+0xe0>
 8002100:	4628      	mov	r0, r5
 8002102:	f7ff ff0f 	bl	8001f24 <I2C_Slave_STOPF>
 8002106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_I2C_EV_IRQHandler+0x14c>)
 800210a:	403b      	ands	r3, r7
 800210c:	b1b3      	cbz	r3, 800213c <HAL_I2C_EV_IRQHandler+0x114>
 800210e:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_I2C_EV_IRQHandler+0x150>)
 8002110:	4023      	ands	r3, r4
 8002112:	b14b      	cbz	r3, 8002128 <HAL_I2C_EV_IRQHandler+0x100>
 8002114:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002118:	d006      	beq.n	8002128 <HAL_I2C_EV_IRQHandler+0x100>
 800211a:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 800211c:	4023      	ands	r3, r4
 800211e:	b91b      	cbnz	r3, 8002128 <HAL_I2C_EV_IRQHandler+0x100>
 8002120:	4628      	mov	r0, r5
 8002122:	f7ff fbc5 	bl	80018b0 <I2C_SlaveTransmit_TXE>
 8002126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 800212a:	4023      	ands	r3, r4
 800212c:	b1e3      	cbz	r3, 8002168 <HAL_I2C_EV_IRQHandler+0x140>
 800212e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002132:	d019      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x140>
 8002134:	4628      	mov	r0, r5
 8002136:	f7ff fae1 	bl	80016fc <I2C_SlaveTransmit_BTF>
 800213a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_I2C_EV_IRQHandler+0x158>)
 800213e:	4023      	ands	r3, r4
 8002140:	b14b      	cbz	r3, 8002156 <HAL_I2C_EV_IRQHandler+0x12e>
 8002142:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8002146:	d006      	beq.n	8002156 <HAL_I2C_EV_IRQHandler+0x12e>
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 800214a:	4023      	ands	r3, r4
 800214c:	b91b      	cbnz	r3, 8002156 <HAL_I2C_EV_IRQHandler+0x12e>
 800214e:	4628      	mov	r0, r5
 8002150:	f7ff fbd8 	bl	8001904 <I2C_SlaveReceive_RXNE>
 8002154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_I2C_EV_IRQHandler+0x154>)
 8002158:	4023      	ands	r3, r4
 800215a:	b12b      	cbz	r3, 8002168 <HAL_I2C_EV_IRQHandler+0x140>
 800215c:	f416 7f00 	tst.w	r6, #512	; 0x200
 8002160:	d002      	beq.n	8002168 <HAL_I2C_EV_IRQHandler+0x140>
 8002162:	4628      	mov	r0, r5
 8002164:	f7ff fada 	bl	800171c <I2C_SlaveReceive_BTF>
 8002168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800216a:	bf00      	nop
 800216c:	00010008 	.word	0x00010008
 8002170:	00010002 	.word	0x00010002
 8002174:	00100004 	.word	0x00100004
 8002178:	00010080 	.word	0x00010080
 800217c:	00010004 	.word	0x00010004
 8002180:	00010040 	.word	0x00010040
 8002184:	00010010 	.word	0x00010010

08002188 <HAL_I2C_ER_IRQHandler>:
 8002188:	b570      	push	{r4, r5, r6, lr}
 800218a:	4604      	mov	r4, r0
 800218c:	6803      	ldr	r3, [r0, #0]
 800218e:	695d      	ldr	r5, [r3, #20]
 8002190:	685e      	ldr	r6, [r3, #4]
 8002192:	4a32      	ldr	r2, [pc, #200]	; (800225c <HAL_I2C_ER_IRQHandler+0xd4>)
 8002194:	4215      	tst	r5, r2
 8002196:	d00e      	beq.n	80021b6 <HAL_I2C_ER_IRQHandler+0x2e>
 8002198:	f416 7f80 	tst.w	r6, #256	; 0x100
 800219c:	d00b      	beq.n	80021b6 <HAL_I2C_ER_IRQHandler+0x2e>
 800219e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	6402      	str	r2, [r0, #64]	; 0x40
 80021a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021aa:	615a      	str	r2, [r3, #20]
 80021ac:	6802      	ldr	r2, [r0, #0]
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 80021ba:	d00a      	beq.n	80021d2 <HAL_I2C_ER_IRQHandler+0x4a>
 80021bc:	f416 7f80 	tst.w	r6, #256	; 0x100
 80021c0:	d007      	beq.n	80021d2 <HAL_I2C_ER_IRQHandler+0x4a>
 80021c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6423      	str	r3, [r4, #64]	; 0x40
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 80021d6:	d02c      	beq.n	8002232 <HAL_I2C_ER_IRQHandler+0xaa>
 80021d8:	f416 7f80 	tst.w	r6, #256	; 0x100
 80021dc:	d029      	beq.n	8002232 <HAL_I2C_ER_IRQHandler+0xaa>
 80021de:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80021e6:	b291      	uxth	r1, r2
 80021e8:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d10c      	bne.n	800220e <HAL_I2C_ER_IRQHandler+0x86>
 80021f4:	b959      	cbnz	r1, 800220e <HAL_I2C_ER_IRQHandler+0x86>
 80021f6:	2a21      	cmp	r2, #33	; 0x21
 80021f8:	d005      	beq.n	8002206 <HAL_I2C_ER_IRQHandler+0x7e>
 80021fa:	2a29      	cmp	r2, #41	; 0x29
 80021fc:	d003      	beq.n	8002206 <HAL_I2C_ER_IRQHandler+0x7e>
 80021fe:	2a28      	cmp	r2, #40	; 0x28
 8002200:	d105      	bne.n	800220e <HAL_I2C_ER_IRQHandler+0x86>
 8002202:	2821      	cmp	r0, #33	; 0x21
 8002204:	d103      	bne.n	800220e <HAL_I2C_ER_IRQHandler+0x86>
 8002206:	4620      	mov	r0, r4
 8002208:	f7ff fbba 	bl	8001980 <I2C_Slave_AF>
 800220c:	e011      	b.n	8002232 <HAL_I2C_ER_IRQHandler+0xaa>
 800220e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6423      	str	r3, [r4, #64]	; 0x40
 8002216:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b10      	cmp	r3, #16
 800221e:	d104      	bne.n	800222a <HAL_I2C_ER_IRQHandler+0xa2>
 8002220:	6822      	ldr	r2, [r4, #0]
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	6823      	ldr	r3, [r4, #0]
 800222c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002230:	615a      	str	r2, [r3, #20]
 8002232:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8002236:	d00a      	beq.n	800224e <HAL_I2C_ER_IRQHandler+0xc6>
 8002238:	f416 7f80 	tst.w	r6, #256	; 0x100
 800223c:	d007      	beq.n	800224e <HAL_I2C_ER_IRQHandler+0xc6>
 800223e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002240:	f043 0308 	orr.w	r3, r3, #8
 8002244:	6423      	str	r3, [r4, #64]	; 0x40
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800224c:	615a      	str	r2, [r3, #20]
 800224e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002250:	b113      	cbz	r3, 8002258 <HAL_I2C_ER_IRQHandler+0xd0>
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff fdc2 	bl	8001ddc <I2C_ITError>
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	bf00      	nop
 800225c:	00010100 	.word	0x00010100

08002260 <I2C_DMAAbort>:
 8002260:	b508      	push	{r3, lr}
 8002262:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002264:	6802      	ldr	r2, [r0, #0]
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	2300      	movs	r3, #0
 8002270:	8543      	strh	r3, [r0, #42]	; 0x2a
 8002272:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002274:	6353      	str	r3, [r2, #52]	; 0x34
 8002276:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002278:	6353      	str	r3, [r2, #52]	; 0x34
 800227a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b60      	cmp	r3, #96	; 0x60
 8002282:	d10e      	bne.n	80022a2 <I2C_DMAAbort+0x42>
 8002284:	2320      	movs	r3, #32
 8002286:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800228a:	2300      	movs	r3, #0
 800228c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 8002290:	6403      	str	r3, [r0, #64]	; 0x40
 8002292:	6802      	ldr	r2, [r0, #0]
 8002294:	6813      	ldr	r3, [r2, #0]
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	f7ff fd9c 	bl	8001dd8 <HAL_I2C_AbortCpltCallback>
 80022a0:	bd08      	pop	{r3, pc}
 80022a2:	2320      	movs	r3, #32
 80022a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80022a8:	2300      	movs	r3, #0
 80022aa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80022ae:	6802      	ldr	r2, [r0, #0]
 80022b0:	6813      	ldr	r3, [r2, #0]
 80022b2:	f023 0301 	bic.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	f7ff fd8c 	bl	8001dd4 <HAL_I2C_ErrorCallback>
 80022bc:	bd08      	pop	{r3, pc}
 80022be:	bf00      	nop

080022c0 <HAL_PCD_Init>:
 80022c0:	2800      	cmp	r0, #0
 80022c2:	d067      	beq.n	8002394 <HAL_PCD_Init+0xd4>
 80022c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c6:	b087      	sub	sp, #28
 80022c8:	4604      	mov	r4, r0
 80022ca:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 80022ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80022d2:	d104      	bne.n	80022de <HAL_PCD_Init+0x1e>
 80022d4:	2300      	movs	r3, #0
 80022d6:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
 80022da:	f004 f88d 	bl	80063f8 <HAL_PCD_MspInit>
 80022de:	2303      	movs	r3, #3
 80022e0:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
 80022e4:	6820      	ldr	r0, [r4, #0]
 80022e6:	f002 f985 	bl	80045f4 <USB_DisableGlobalInt>
 80022ea:	4625      	mov	r5, r4
 80022ec:	f855 7b10 	ldr.w	r7, [r5], #16
 80022f0:	466e      	mov	r6, sp
 80022f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022f6:	682b      	ldr	r3, [r5, #0]
 80022f8:	6033      	str	r3, [r6, #0]
 80022fa:	1d23      	adds	r3, r4, #4
 80022fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fe:	4638      	mov	r0, r7
 8002300:	f002 f966 	bl	80045d0 <USB_CoreInit>
 8002304:	2100      	movs	r1, #0
 8002306:	6820      	ldr	r0, [r4, #0]
 8002308:	f002 f97e 	bl	8004608 <USB_SetCurrentMode>
 800230c:	2300      	movs	r3, #0
 800230e:	e010      	b.n	8002332 <HAL_PCD_Init+0x72>
 8002310:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8002314:	2101      	movs	r1, #1
 8002316:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 800231a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 800231e:	8693      	strh	r3, [r2, #52]	; 0x34
 8002320:	2100      	movs	r1, #0
 8002322:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
 8002326:	6391      	str	r1, [r2, #56]	; 0x38
 8002328:	63d1      	str	r1, [r2, #60]	; 0x3c
 800232a:	1c9a      	adds	r2, r3, #2
 800232c:	0152      	lsls	r2, r2, #5
 800232e:	50a1      	str	r1, [r4, r2]
 8002330:	3301      	adds	r3, #1
 8002332:	2b0e      	cmp	r3, #14
 8002334:	d9ec      	bls.n	8002310 <HAL_PCD_Init+0x50>
 8002336:	2300      	movs	r3, #0
 8002338:	e012      	b.n	8002360 <HAL_PCD_Init+0xa0>
 800233a:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 800233e:	2100      	movs	r1, #0
 8002340:	f882 1229 	strb.w	r1, [r2, #553]	; 0x229
 8002344:	f882 3228 	strb.w	r3, [r2, #552]	; 0x228
 8002348:	8693      	strh	r3, [r2, #52]	; 0x34
 800234a:	f882 122b 	strb.w	r1, [r2, #555]	; 0x22b
 800234e:	f8c2 1238 	str.w	r1, [r2, #568]	; 0x238
 8002352:	f8c2 123c 	str.w	r1, [r2, #572]	; 0x23c
 8002356:	f103 0212 	add.w	r2, r3, #18
 800235a:	0152      	lsls	r2, r2, #5
 800235c:	50a1      	str	r1, [r4, r2]
 800235e:	3301      	adds	r3, #1
 8002360:	2b0e      	cmp	r3, #14
 8002362:	d9ea      	bls.n	800233a <HAL_PCD_Init+0x7a>
 8002364:	4625      	mov	r5, r4
 8002366:	f855 7b10 	ldr.w	r7, [r5], #16
 800236a:	466e      	mov	r6, sp
 800236c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800236e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	6033      	str	r3, [r6, #0]
 8002374:	1d23      	adds	r3, r4, #4
 8002376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002378:	4638      	mov	r0, r7
 800237a:	f002 f947 	bl	800460c <USB_DevInit>
 800237e:	2500      	movs	r5, #0
 8002380:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8002384:	2301      	movs	r3, #1
 8002386:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
 800238a:	6820      	ldr	r0, [r4, #0]
 800238c:	f002 fc66 	bl	8004c5c <USB_DevDisconnect>
 8002390:	4628      	mov	r0, r5
 8002392:	e001      	b.n	8002398 <HAL_PCD_Init+0xd8>
 8002394:	2001      	movs	r0, #1
 8002396:	4770      	bx	lr
 8002398:	b007      	add	sp, #28
 800239a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800239c <HAL_PCD_Start>:
 800239c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d010      	beq.n	80023c6 <HAL_PCD_Start+0x2a>
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
 80023a8:	2101      	movs	r1, #1
 80023aa:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
 80023ae:	f004 f95c 	bl	800666a <HAL_PCDEx_SetConnectionState>
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	f002 fc50 	bl	8004c58 <USB_DevConnect>
 80023b8:	6820      	ldr	r0, [r4, #0]
 80023ba:	f002 f911 	bl	80045e0 <USB_EnableGlobalInt>
 80023be:	2000      	movs	r0, #0
 80023c0:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80023c4:	bd10      	pop	{r4, pc}
 80023c6:	2002      	movs	r0, #2
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop

080023cc <HAL_PCD_SetAddress>:
 80023cc:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d00d      	beq.n	80023f0 <HAL_PCD_SetAddress+0x24>
 80023d4:	b510      	push	{r4, lr}
 80023d6:	4604      	mov	r4, r0
 80023d8:	2301      	movs	r3, #1
 80023da:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
 80023de:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80023e2:	6800      	ldr	r0, [r0, #0]
 80023e4:	f002 fc32 	bl	8004c4c <USB_SetDevAddress>
 80023e8:	2000      	movs	r0, #0
 80023ea:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80023ee:	bd10      	pop	{r4, pc}
 80023f0:	2002      	movs	r0, #2
 80023f2:	4770      	bx	lr

080023f4 <HAL_PCD_EP_Open>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	b24d      	sxtb	r5, r1
 80023f8:	2d00      	cmp	r5, #0
 80023fa:	da05      	bge.n	8002408 <HAL_PCD_EP_Open+0x14>
 80023fc:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002400:	0164      	lsls	r4, r4, #5
 8002402:	3428      	adds	r4, #40	; 0x28
 8002404:	4404      	add	r4, r0
 8002406:	e005      	b.n	8002414 <HAL_PCD_EP_Open+0x20>
 8002408:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800240c:	0164      	lsls	r4, r4, #5
 800240e:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8002412:	4404      	add	r4, r0
 8002414:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002418:	7021      	strb	r1, [r4, #0]
 800241a:	0fed      	lsrs	r5, r5, #31
 800241c:	7065      	strb	r5, [r4, #1]
 800241e:	6122      	str	r2, [r4, #16]
 8002420:	70e3      	strb	r3, [r4, #3]
 8002422:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8002426:	2b01      	cmp	r3, #1
 8002428:	d00b      	beq.n	8002442 <HAL_PCD_EP_Open+0x4e>
 800242a:	4605      	mov	r5, r0
 800242c:	2301      	movs	r3, #1
 800242e:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
 8002432:	4621      	mov	r1, r4
 8002434:	6800      	ldr	r0, [r0, #0]
 8002436:	f002 f8ff 	bl	8004638 <USB_ActivateEndpoint>
 800243a:	2000      	movs	r0, #0
 800243c:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
 8002440:	bd38      	pop	{r3, r4, r5, pc}
 8002442:	2002      	movs	r0, #2
 8002444:	bd38      	pop	{r3, r4, r5, pc}
 8002446:	bf00      	nop

08002448 <HAL_PCD_EP_Close>:
 8002448:	b24a      	sxtb	r2, r1
 800244a:	2a00      	cmp	r2, #0
 800244c:	da05      	bge.n	800245a <HAL_PCD_EP_Close+0x12>
 800244e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	3328      	adds	r3, #40	; 0x28
 8002456:	4403      	add	r3, r0
 8002458:	e005      	b.n	8002466 <HAL_PCD_EP_Close+0x1e>
 800245a:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800245e:	015b      	lsls	r3, r3, #5
 8002460:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002464:	4403      	add	r3, r0
 8002466:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800246a:	7019      	strb	r1, [r3, #0]
 800246c:	0fd2      	lsrs	r2, r2, #31
 800246e:	705a      	strb	r2, [r3, #1]
 8002470:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8002474:	2a01      	cmp	r2, #1
 8002476:	d00c      	beq.n	8002492 <HAL_PCD_EP_Close+0x4a>
 8002478:	b510      	push	{r4, lr}
 800247a:	4604      	mov	r4, r0
 800247c:	2201      	movs	r2, #1
 800247e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
 8002482:	4619      	mov	r1, r3
 8002484:	6800      	ldr	r0, [r0, #0]
 8002486:	f002 fa75 	bl	8004974 <USB_DeactivateEndpoint>
 800248a:	2000      	movs	r0, #0
 800248c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8002490:	bd10      	pop	{r4, pc}
 8002492:	2002      	movs	r0, #2
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop

08002498 <HAL_PCD_EP_Receive>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800249e:	016c      	lsls	r4, r5, #5
 80024a0:	f504 710a 	add.w	r1, r4, #552	; 0x228
 80024a4:	4401      	add	r1, r0
 80024a6:	4404      	add	r4, r0
 80024a8:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
 80024ac:	f105 0212 	add.w	r2, r5, #18
 80024b0:	0152      	lsls	r2, r2, #5
 80024b2:	1886      	adds	r6, r0, r2
 80024b4:	5083      	str	r3, [r0, r2]
 80024b6:	2300      	movs	r3, #0
 80024b8:	6073      	str	r3, [r6, #4]
 80024ba:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
 80024be:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
 80024c2:	b91d      	cbnz	r5, 80024cc <HAL_PCD_EP_Receive+0x34>
 80024c4:	6800      	ldr	r0, [r0, #0]
 80024c6:	f002 fbe5 	bl	8004c94 <USB_EPStartXfer>
 80024ca:	e002      	b.n	80024d2 <HAL_PCD_EP_Receive+0x3a>
 80024cc:	6800      	ldr	r0, [r0, #0]
 80024ce:	f002 fbe1 	bl	8004c94 <USB_EPStartXfer>
 80024d2:	2000      	movs	r0, #0
 80024d4:	bd70      	pop	{r4, r5, r6, pc}
 80024d6:	bf00      	nop

080024d8 <HAL_PCD_EP_GetRxCount>:
 80024d8:	f001 010f 	and.w	r1, r1, #15
 80024dc:	3112      	adds	r1, #18
 80024de:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80024e2:	8880      	ldrh	r0, [r0, #4]
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop

080024e8 <HAL_PCD_EP_Transmit>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80024ee:	016c      	lsls	r4, r5, #5
 80024f0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80024f4:	4401      	add	r1, r0
 80024f6:	4404      	add	r4, r0
 80024f8:	63e2      	str	r2, [r4, #60]	; 0x3c
 80024fa:	1caa      	adds	r2, r5, #2
 80024fc:	0152      	lsls	r2, r2, #5
 80024fe:	1886      	adds	r6, r0, r2
 8002500:	5083      	str	r3, [r0, r2]
 8002502:	2300      	movs	r3, #0
 8002504:	6073      	str	r3, [r6, #4]
 8002506:	2301      	movs	r3, #1
 8002508:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
 800250c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
 8002510:	b91d      	cbnz	r5, 800251a <HAL_PCD_EP_Transmit+0x32>
 8002512:	6800      	ldr	r0, [r0, #0]
 8002514:	f002 fbbe 	bl	8004c94 <USB_EPStartXfer>
 8002518:	e002      	b.n	8002520 <HAL_PCD_EP_Transmit+0x38>
 800251a:	6800      	ldr	r0, [r0, #0]
 800251c:	f002 fbba 	bl	8004c94 <USB_EPStartXfer>
 8002520:	2000      	movs	r0, #0
 8002522:	bd70      	pop	{r4, r5, r6, pc}

08002524 <PCD_EP_ISR_Handler>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	4605      	mov	r5, r0
 800252a:	2300      	movs	r3, #0
 800252c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002530:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002534:	e216      	b.n	8002964 <PCD_EP_ISR_Handler+0x440>
 8002536:	f8bd 4006 	ldrh.w	r4, [sp, #6]
 800253a:	f014 040f 	ands.w	r4, r4, #15
 800253e:	f040 80c8 	bne.w	80026d2 <PCD_EP_ISR_Handler+0x1ae>
 8002542:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	b29b      	uxth	r3, r3
 800254c:	bb9b      	cbnz	r3, 80025b6 <PCD_EP_ISR_Handler+0x92>
 800254e:	8803      	ldrh	r3, [r0, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800255a:	b29b      	uxth	r3, r3
 800255c:	8003      	strh	r3, [r0, #0]
 800255e:	6829      	ldr	r1, [r5, #0]
 8002560:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 8002564:	b29a      	uxth	r2, r3
 8002566:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800256a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800256e:	3302      	adds	r3, #2
 8002570:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002574:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800257c:	646b      	str	r3, [r5, #68]	; 0x44
 800257e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002580:	4413      	add	r3, r2
 8002582:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002584:	2100      	movs	r1, #0
 8002586:	4628      	mov	r0, r5
 8002588:	f003 ff68 	bl	800645c <HAL_PCD_DataInStageCallback>
 800258c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002590:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002594:	f000 81e6 	beq.w	8002964 <PCD_EP_ISR_Handler+0x440>
 8002598:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	f040 81e2 	bne.w	8002964 <PCD_EP_ISR_Handler+0x440>
 80025a0:	682a      	ldr	r2, [r5, #0]
 80025a2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80025a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025aa:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
 80025ae:	2300      	movs	r3, #0
 80025b0:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80025b4:	e1d6      	b.n	8002964 <PCD_EP_ISR_Handler+0x440>
 80025b6:	8803      	ldrh	r3, [r0, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f8ad 3004 	strh.w	r3, [sp, #4]
 80025be:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80025c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b303      	cbz	r3, 800260c <PCD_EP_ISR_Handler+0xe8>
 80025ca:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f895 2228 	ldrb.w	r2, [r5, #552]	; 0x228
 80025d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80025d8:	3306      	adds	r3, #6
 80025da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80025e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e6:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
 80025ea:	f8b5 222c 	ldrh.w	r2, [r5, #556]	; 0x22c
 80025ee:	f205 412c 	addw	r1, r5, #1068	; 0x42c
 80025f2:	f002 fcc3 	bl	8004f7c <USB_ReadPMA>
 80025f6:	682a      	ldr	r2, [r5, #0]
 80025f8:	8813      	ldrh	r3, [r2, #0]
 80025fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	0d1b      	lsrs	r3, r3, #20
 8002602:	8013      	strh	r3, [r2, #0]
 8002604:	4628      	mov	r0, r5
 8002606:	f003 ff17 	bl	8006438 <HAL_PCD_SetupStageCallback>
 800260a:	e1ab      	b.n	8002964 <PCD_EP_ISR_Handler+0x440>
 800260c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002610:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002614:	f000 81a6 	beq.w	8002964 <PCD_EP_ISR_Handler+0x440>
 8002618:	8803      	ldrh	r3, [r0, #0]
 800261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261e:	051b      	lsls	r3, r3, #20
 8002620:	0d1b      	lsrs	r3, r3, #20
 8002622:	8003      	strh	r3, [r0, #0]
 8002624:	6828      	ldr	r0, [r5, #0]
 8002626:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800262a:	b29b      	uxth	r3, r3
 800262c:	f895 2228 	ldrb.w	r2, [r5, #552]	; 0x228
 8002630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002634:	3306      	adds	r3, #6
 8002636:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800263a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800263e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002642:	f8c5 3244 	str.w	r3, [r5, #580]	; 0x244
 8002646:	b163      	cbz	r3, 8002662 <PCD_EP_ISR_Handler+0x13e>
 8002648:	f8b5 222c 	ldrh.w	r2, [r5, #556]	; 0x22c
 800264c:	f8d5 123c 	ldr.w	r1, [r5, #572]	; 0x23c
 8002650:	f002 fc94 	bl	8004f7c <USB_ReadPMA>
 8002654:	f8d5 223c 	ldr.w	r2, [r5, #572]	; 0x23c
 8002658:	f8d5 3244 	ldr.w	r3, [r5, #580]	; 0x244
 800265c:	4413      	add	r3, r2
 800265e:	f8c5 323c 	str.w	r3, [r5, #572]	; 0x23c
 8002662:	2100      	movs	r1, #0
 8002664:	4628      	mov	r0, r5
 8002666:	f003 feef 	bl	8006448 <HAL_PCD_DataOutStageCallback>
 800266a:	682a      	ldr	r2, [r5, #0]
 800266c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002670:	b29b      	uxth	r3, r3
 8002672:	3306      	adds	r3, #6
 8002674:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8002678:	f8d5 1238 	ldr.w	r1, [r5, #568]	; 0x238
 800267c:	293e      	cmp	r1, #62	; 0x3e
 800267e:	d90e      	bls.n	800269e <PCD_EP_ISR_Handler+0x17a>
 8002680:	f3c1 124f 	ubfx	r2, r1, #5, #16
 8002684:	f011 0f1f 	tst.w	r1, #31
 8002688:	d101      	bne.n	800268e <PCD_EP_ISR_Handler+0x16a>
 800268a:	3a01      	subs	r2, #1
 800268c:	b292      	uxth	r2, r2
 800268e:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8002692:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002696:	b292      	uxth	r2, r2
 8002698:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800269c:	e00a      	b.n	80026b4 <PCD_EP_ISR_Handler+0x190>
 800269e:	f3c1 024f 	ubfx	r2, r1, #1, #16
 80026a2:	f011 0f01 	tst.w	r1, #1
 80026a6:	d001      	beq.n	80026ac <PCD_EP_ISR_Handler+0x188>
 80026a8:	3201      	adds	r2, #1
 80026aa:	b292      	uxth	r2, r2
 80026ac:	0292      	lsls	r2, r2, #10
 80026ae:	b292      	uxth	r2, r2
 80026b0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80026b4:	682a      	ldr	r2, [r5, #0]
 80026b6:	8813      	ldrh	r3, [r2, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80026c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ce:	8013      	strh	r3, [r2, #0]
 80026d0:	e148      	b.n	8002964 <PCD_EP_ISR_Handler+0x440>
 80026d2:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80026dc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80026e0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80026e4:	f000 8096 	beq.w	8002814 <PCD_EP_ISR_Handler+0x2f0>
 80026e8:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80026ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	0d1b      	lsrs	r3, r3, #20
 80026f4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80026f8:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80026fc:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8002700:	b9e3      	cbnz	r3, 800273c <PCD_EP_ISR_Handler+0x218>
 8002702:	6828      	ldr	r0, [r5, #0]
 8002704:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002708:	b29b      	uxth	r3, r3
 800270a:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 800270e:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 8002712:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002716:	3306      	adds	r3, #6
 8002718:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800271c:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8002720:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002724:	2e00      	cmp	r6, #0
 8002726:	d052      	beq.n	80027ce <PCD_EP_ISR_Handler+0x2aa>
 8002728:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800272c:	4633      	mov	r3, r6
 800272e:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8002732:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8002736:	f002 fc21 	bl	8004f7c <USB_ReadPMA>
 800273a:	e048      	b.n	80027ce <PCD_EP_ISR_Handler+0x2aa>
 800273c:	6828      	ldr	r0, [r5, #0]
 800273e:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8002742:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8002746:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	b29b      	uxth	r3, r3
 8002750:	b1b3      	cbz	r3, 8002780 <PCD_EP_ISR_Handler+0x25c>
 8002752:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002756:	b292      	uxth	r2, r2
 8002758:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 800275c:	3302      	adds	r3, #2
 800275e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002762:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8002766:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800276a:	b1fe      	cbz	r6, 80027ac <PCD_EP_ISR_Handler+0x288>
 800276c:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8002770:	4633      	mov	r3, r6
 8002772:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8002776:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 800277a:	f002 fbff 	bl	8004f7c <USB_ReadPMA>
 800277e:	e015      	b.n	80027ac <PCD_EP_ISR_Handler+0x288>
 8002780:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002784:	b29b      	uxth	r3, r3
 8002786:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800278a:	3306      	adds	r3, #6
 800278c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002790:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8002794:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002798:	b146      	cbz	r6, 80027ac <PCD_EP_ISR_Handler+0x288>
 800279a:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800279e:	4633      	mov	r3, r6
 80027a0:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 80027a4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80027a8:	f002 fbe8 	bl	8004f7c <USB_ReadPMA>
 80027ac:	682a      	ldr	r2, [r5, #0]
 80027ae:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80027b2:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80027b6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80027ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027be:	051b      	lsls	r3, r3, #20
 80027c0:	0d1b      	lsrs	r3, r3, #20
 80027c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027ca:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80027ce:	f104 0312 	add.w	r3, r4, #18
 80027d2:	015b      	lsls	r3, r3, #5
 80027d4:	18e9      	adds	r1, r5, r3
 80027d6:	684a      	ldr	r2, [r1, #4]
 80027d8:	4432      	add	r2, r6
 80027da:	604a      	str	r2, [r1, #4]
 80027dc:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80027e0:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 80027e4:	4432      	add	r2, r6
 80027e6:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
 80027ea:	58eb      	ldr	r3, [r5, r3]
 80027ec:	b11b      	cbz	r3, 80027f6 <PCD_EP_ISR_Handler+0x2d2>
 80027ee:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 80027f2:	428e      	cmp	r6, r1
 80027f4:	d207      	bcs.n	8002806 <PCD_EP_ISR_Handler+0x2e2>
 80027f6:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80027fa:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80027fe:	4628      	mov	r0, r5
 8002800:	f003 fe22 	bl	8006448 <HAL_PCD_DataOutStageCallback>
 8002804:	e006      	b.n	8002814 <PCD_EP_ISR_Handler+0x2f0>
 8002806:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 800280a:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 800280e:	4628      	mov	r0, r5
 8002810:	f7ff fe42 	bl	8002498 <HAL_PCD_EP_Receive>
 8002814:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 80a0 	beq.w	8002964 <PCD_EP_ISR_Handler+0x440>
 8002824:	682a      	ldr	r2, [r5, #0]
 8002826:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 800282a:	b29b      	uxth	r3, r3
 800282c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002834:	b29b      	uxth	r3, r3
 8002836:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
 800283a:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 800283e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002842:	b9eb      	cbnz	r3, 8002880 <PCD_EP_ISR_Handler+0x35c>
 8002844:	6828      	ldr	r0, [r5, #0]
 8002846:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800284a:	b29b      	uxth	r3, r3
 800284c:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 8002850:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8002854:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002858:	3302      	adds	r3, #2
 800285a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800285e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002866:	1ca2      	adds	r2, r4, #2
 8002868:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 800286c:	6053      	str	r3, [r2, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d051      	beq.n	8002916 <PCD_EP_ISR_Handler+0x3f2>
 8002872:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 8002876:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8002878:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800287a:	f002 f9f7 	bl	8004c6c <USB_WritePMA>
 800287e:	e04a      	b.n	8002916 <PCD_EP_ISR_Handler+0x3f2>
 8002880:	6828      	ldr	r0, [r5, #0]
 8002882:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8002886:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800288a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002892:	b29b      	uxth	r3, r3
 8002894:	b1bb      	cbz	r3, 80028c6 <PCD_EP_ISR_Handler+0x3a2>
 8002896:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800289a:	b292      	uxth	r2, r2
 800289c:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
 80028a0:	3302      	adds	r3, #2
 80028a2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80028a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80028aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028ae:	1ca2      	adds	r2, r4, #2
 80028b0:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 80028b4:	6053      	str	r3, [r2, #4]
 80028b6:	b1eb      	cbz	r3, 80028f4 <PCD_EP_ISR_Handler+0x3d0>
 80028b8:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80028bc:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 80028be:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80028c0:	f002 f9d4 	bl	8004c6c <USB_WritePMA>
 80028c4:	e016      	b.n	80028f4 <PCD_EP_ISR_Handler+0x3d0>
 80028c6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80028d0:	3306      	adds	r3, #6
 80028d2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80028d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	1ca2      	adds	r2, r4, #2
 80028e0:	eb05 1242 	add.w	r2, r5, r2, lsl #5
 80028e4:	6053      	str	r3, [r2, #4]
 80028e6:	b12b      	cbz	r3, 80028f4 <PCD_EP_ISR_Handler+0x3d0>
 80028e8:	eb05 1144 	add.w	r1, r5, r4, lsl #5
 80028ec:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80028ee:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80028f0:	f002 f9bc 	bl	8004c6c <USB_WritePMA>
 80028f4:	682a      	ldr	r2, [r5, #0]
 80028f6:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 80028fa:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 80028fe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002906:	051b      	lsls	r3, r3, #20
 8002908:	0d1b      	lsrs	r3, r3, #20
 800290a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800290e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002912:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002916:	6829      	ldr	r1, [r5, #0]
 8002918:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 800291c:	b29a      	uxth	r2, r3
 800291e:	eb05 1044 	add.w	r0, r5, r4, lsl #5
 8002922:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8002926:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800292a:	3302      	adds	r3, #2
 800292c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002930:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002938:	1ca1      	adds	r1, r4, #2
 800293a:	0149      	lsls	r1, r1, #5
 800293c:	186a      	adds	r2, r5, r1
 800293e:	6053      	str	r3, [r2, #4]
 8002940:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002942:	441a      	add	r2, r3
 8002944:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002946:	586b      	ldr	r3, [r5, r1]
 8002948:	b92b      	cbnz	r3, 8002956 <PCD_EP_ISR_Handler+0x432>
 800294a:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 800294e:	4628      	mov	r0, r5
 8002950:	f003 fd84 	bl	800645c <HAL_PCD_DataInStageCallback>
 8002954:	e006      	b.n	8002964 <PCD_EP_ISR_Handler+0x440>
 8002956:	eb05 1444 	add.w	r4, r5, r4, lsl #5
 800295a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800295e:	4628      	mov	r0, r5
 8002960:	f7ff fdc2 	bl	80024e8 <HAL_PCD_EP_Transmit>
 8002964:	6828      	ldr	r0, [r5, #0]
 8002966:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800296a:	b29b      	uxth	r3, r3
 800296c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8002970:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002974:	f47f addf 	bne.w	8002536 <PCD_EP_ISR_Handler+0x12>
 8002978:	2000      	movs	r0, #0
 800297a:	b002      	add	sp, #8
 800297c:	bd70      	pop	{r4, r5, r6, pc}
 800297e:	bf00      	nop

08002980 <HAL_PCD_IRQHandler>:
 8002980:	b510      	push	{r4, lr}
 8002982:	4604      	mov	r4, r0
 8002984:	6800      	ldr	r0, [r0, #0]
 8002986:	f002 f96b 	bl	8004c60 <USB_ReadInterrupts>
 800298a:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800298e:	d002      	beq.n	8002996 <HAL_PCD_IRQHandler+0x16>
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff fdc7 	bl	8002524 <PCD_EP_ISR_Handler>
 8002996:	6820      	ldr	r0, [r4, #0]
 8002998:	f002 f962 	bl	8004c60 <USB_ReadInterrupts>
 800299c:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80029a0:	d00f      	beq.n	80029c2 <HAL_PCD_IRQHandler+0x42>
 80029a2:	6822      	ldr	r2, [r4, #0]
 80029a4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80029b4:	4620      	mov	r0, r4
 80029b6:	f003 fd60 	bl	800647a <HAL_PCD_ResetCallback>
 80029ba:	2100      	movs	r1, #0
 80029bc:	4620      	mov	r0, r4
 80029be:	f7ff fd05 	bl	80023cc <HAL_PCD_SetAddress>
 80029c2:	6820      	ldr	r0, [r4, #0]
 80029c4:	f002 f94c 	bl	8004c60 <USB_ReadInterrupts>
 80029c8:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80029cc:	d008      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x60>
 80029ce:	6822      	ldr	r2, [r4, #0]
 80029d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80029e0:	6820      	ldr	r0, [r4, #0]
 80029e2:	f002 f93d 	bl	8004c60 <USB_ReadInterrupts>
 80029e6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80029ea:	d008      	beq.n	80029fe <HAL_PCD_IRQHandler+0x7e>
 80029ec:	6822      	ldr	r2, [r4, #0]
 80029ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 80029fe:	6820      	ldr	r0, [r4, #0]
 8002a00:	f002 f92e 	bl	8004c60 <USB_ReadInterrupts>
 8002a04:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002a08:	d01d      	beq.n	8002a46 <HAL_PCD_IRQHandler+0xc6>
 8002a0a:	6822      	ldr	r2, [r4, #0]
 8002a0c:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f023 0304 	bic.w	r3, r3, #4
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8002a1c:	6822      	ldr	r2, [r4, #0]
 8002a1e:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	f023 0308 	bic.w	r3, r3, #8
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f003 fd40 	bl	80064b4 <HAL_PCD_ResumeCallback>
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002a46:	6820      	ldr	r0, [r4, #0]
 8002a48:	f002 f90a 	bl	8004c60 <USB_ReadInterrupts>
 8002a4c:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002a50:	d021      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x116>
 8002a52:	6822      	ldr	r2, [r4, #0]
 8002a54:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f043 0308 	orr.w	r3, r3, #8
 8002a5e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8002a62:	6822      	ldr	r2, [r4, #0]
 8002a64:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 8002a84:	6820      	ldr	r0, [r4, #0]
 8002a86:	f002 f8eb 	bl	8004c60 <USB_ReadInterrupts>
 8002a8a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8002a8e:	d102      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x116>
 8002a90:	4620      	mov	r0, r4
 8002a92:	f003 fcff 	bl	8006494 <HAL_PCD_SuspendCallback>
 8002a96:	6820      	ldr	r0, [r4, #0]
 8002a98:	f002 f8e2 	bl	8004c60 <USB_ReadInterrupts>
 8002a9c:	f410 7f00 	tst.w	r0, #512	; 0x200
 8002aa0:	d00b      	beq.n	8002aba <HAL_PCD_IRQHandler+0x13a>
 8002aa2:	6822      	ldr	r2, [r4, #0]
 8002aa4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f003 fcda 	bl	800646e <HAL_PCD_SOFCallback>
 8002aba:	6820      	ldr	r0, [r4, #0]
 8002abc:	f002 f8d0 	bl	8004c60 <USB_ReadInterrupts>
 8002ac0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002ac4:	d008      	beq.n	8002ad8 <HAL_PCD_IRQHandler+0x158>
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8002ad8:	bd10      	pop	{r4, pc}
 8002ada:	bf00      	nop

08002adc <HAL_PCD_EP_SetStall>:
 8002adc:	b538      	push	{r3, r4, r5, lr}
 8002ade:	b24a      	sxtb	r2, r1
 8002ae0:	2a00      	cmp	r2, #0
 8002ae2:	da05      	bge.n	8002af0 <HAL_PCD_EP_SetStall+0x14>
 8002ae4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002ae8:	015b      	lsls	r3, r3, #5
 8002aea:	3328      	adds	r3, #40	; 0x28
 8002aec:	4403      	add	r3, r0
 8002aee:	e003      	b.n	8002af8 <HAL_PCD_EP_SetStall+0x1c>
 8002af0:	014b      	lsls	r3, r1, #5
 8002af2:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002af6:	4403      	add	r3, r0
 8002af8:	2401      	movs	r4, #1
 8002afa:	709c      	strb	r4, [r3, #2]
 8002afc:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8002b00:	701c      	strb	r4, [r3, #0]
 8002b02:	0fd2      	lsrs	r2, r2, #31
 8002b04:	705a      	strb	r2, [r3, #1]
 8002b06:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8002b0a:	2a01      	cmp	r2, #1
 8002b0c:	d011      	beq.n	8002b32 <HAL_PCD_EP_SetStall+0x56>
 8002b0e:	4605      	mov	r5, r0
 8002b10:	2201      	movs	r2, #1
 8002b12:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
 8002b16:	4619      	mov	r1, r3
 8002b18:	6800      	ldr	r0, [r0, #0]
 8002b1a:	f002 f813 	bl	8004b44 <USB_EPSetStall>
 8002b1e:	b924      	cbnz	r4, 8002b2a <HAL_PCD_EP_SetStall+0x4e>
 8002b20:	f205 412c 	addw	r1, r5, #1068	; 0x42c
 8002b24:	6828      	ldr	r0, [r5, #0]
 8002b26:	f002 f89f 	bl	8004c68 <USB_EP0_OutStart>
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
 8002b32:	2002      	movs	r0, #2
 8002b34:	bd38      	pop	{r3, r4, r5, pc}
 8002b36:	bf00      	nop

08002b38 <HAL_PCD_EP_ClrStall>:
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	b24a      	sxtb	r2, r1
 8002b3c:	2a00      	cmp	r2, #0
 8002b3e:	da05      	bge.n	8002b4c <HAL_PCD_EP_ClrStall+0x14>
 8002b40:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8002b44:	015b      	lsls	r3, r3, #5
 8002b46:	3328      	adds	r3, #40	; 0x28
 8002b48:	4403      	add	r3, r0
 8002b4a:	e003      	b.n	8002b54 <HAL_PCD_EP_ClrStall+0x1c>
 8002b4c:	014b      	lsls	r3, r1, #5
 8002b4e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8002b52:	4403      	add	r3, r0
 8002b54:	2400      	movs	r4, #0
 8002b56:	709c      	strb	r4, [r3, #2]
 8002b58:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002b5c:	7019      	strb	r1, [r3, #0]
 8002b5e:	0fd2      	lsrs	r2, r2, #31
 8002b60:	705a      	strb	r2, [r3, #1]
 8002b62:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8002b66:	2a01      	cmp	r2, #1
 8002b68:	d00b      	beq.n	8002b82 <HAL_PCD_EP_ClrStall+0x4a>
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
 8002b72:	4619      	mov	r1, r3
 8002b74:	6800      	ldr	r0, [r0, #0]
 8002b76:	f002 f81d 	bl	8004bb4 <USB_EPClearStall>
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 8002b80:	bd10      	pop	{r4, pc}
 8002b82:	2002      	movs	r0, #2
 8002b84:	bd10      	pop	{r4, pc}
 8002b86:	bf00      	nop

08002b88 <HAL_PCDEx_PMAConfig>:
 8002b88:	b410      	push	{r4}
 8002b8a:	f001 0480 	and.w	r4, r1, #128	; 0x80
 8002b8e:	b2a4      	uxth	r4, r4
 8002b90:	b12c      	cbz	r4, 8002b9e <HAL_PCDEx_PMAConfig+0x16>
 8002b92:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002b96:	0149      	lsls	r1, r1, #5
 8002b98:	3128      	adds	r1, #40	; 0x28
 8002b9a:	4401      	add	r1, r0
 8002b9c:	e003      	b.n	8002ba6 <HAL_PCDEx_PMAConfig+0x1e>
 8002b9e:	0149      	lsls	r1, r1, #5
 8002ba0:	f501 710a 	add.w	r1, r1, #552	; 0x228
 8002ba4:	4401      	add	r1, r0
 8002ba6:	b912      	cbnz	r2, 8002bae <HAL_PCDEx_PMAConfig+0x26>
 8002ba8:	728a      	strb	r2, [r1, #10]
 8002baa:	808b      	strh	r3, [r1, #4]
 8002bac:	e004      	b.n	8002bb8 <HAL_PCDEx_PMAConfig+0x30>
 8002bae:	2201      	movs	r2, #1
 8002bb0:	728a      	strb	r2, [r1, #10]
 8002bb2:	80cb      	strh	r3, [r1, #6]
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	810b      	strh	r3, [r1, #8]
 8002bb8:	2000      	movs	r0, #0
 8002bba:	bc10      	pop	{r4}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop

08002bc0 <HAL_PWR_EnableBkUpAccess>:
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	4b01      	ldr	r3, [pc, #4]	; (8002bc8 <HAL_PWR_EnableBkUpAccess+0x8>)
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	4770      	bx	lr
 8002bc8:	420e0020 	.word	0x420e0020

08002bcc <HAL_PWR_DisableWakeUpPin>:
 8002bcc:	fa90 f0a0 	rbit	r0, r0
 8002bd0:	fab0 f080 	clz	r0, r0
 8002bd4:	4b02      	ldr	r3, [pc, #8]	; (8002be0 <HAL_PWR_DisableWakeUpPin+0x14>)
 8002bd6:	4403      	add	r3, r0
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	4770      	bx	lr
 8002be0:	10838020 	.word	0x10838020

08002be4 <RCC_Delay>:
 8002be4:	b082      	sub	sp, #8
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <RCC_Delay+0x24>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a08      	ldr	r2, [pc, #32]	; (8002c0c <RCC_Delay+0x28>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	0a5b      	lsrs	r3, r3, #9
 8002bf2:	fb00 f003 	mul.w	r0, r0, r3
 8002bf6:	9001      	str	r0, [sp, #4]
 8002bf8:	bf00      	nop
 8002bfa:	9b01      	ldr	r3, [sp, #4]
 8002bfc:	1e5a      	subs	r2, r3, #1
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1f9      	bne.n	8002bf8 <RCC_Delay+0x14>
 8002c04:	b002      	add	sp, #8
 8002c06:	4770      	bx	lr
 8002c08:	20000138 	.word	0x20000138
 8002c0c:	10624dd3 	.word	0x10624dd3

08002c10 <HAL_RCC_OscConfig>:
 8002c10:	b570      	push	{r4, r5, r6, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	4604      	mov	r4, r0
 8002c16:	6803      	ldr	r3, [r0, #0]
 8002c18:	f013 0f01 	tst.w	r3, #1
 8002c1c:	d06b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0xe6>
 8002c1e:	4ba8      	ldr	r3, [pc, #672]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCC_OscConfig+0x30>
 8002c2a:	4ba5      	ldr	r3, [pc, #660]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d10d      	bne.n	8002c52 <HAL_RCC_OscConfig+0x42>
 8002c36:	4ba2      	ldr	r3, [pc, #648]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCC_OscConfig+0x42>
 8002c40:	4b9f      	ldr	r3, [pc, #636]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c48:	d055      	beq.n	8002cf6 <HAL_RCC_OscConfig+0xe6>
 8002c4a:	6863      	ldr	r3, [r4, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d152      	bne.n	8002cf6 <HAL_RCC_OscConfig+0xe6>
 8002c50:	e1b8      	b.n	8002fc4 <HAL_RCC_OscConfig+0x3b4>
 8002c52:	6863      	ldr	r3, [r4, #4]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d105      	bne.n	8002c66 <HAL_RCC_OscConfig+0x56>
 8002c5a:	4a99      	ldr	r2, [pc, #612]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002c5c:	6813      	ldr	r3, [r2, #0]
 8002c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c62:	6013      	str	r3, [r2, #0]
 8002c64:	e026      	b.n	8002cb4 <HAL_RCC_OscConfig+0xa4>
 8002c66:	b963      	cbnz	r3, 8002c82 <HAL_RCC_OscConfig+0x72>
 8002c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c6c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e018      	b.n	8002cb4 <HAL_RCC_OscConfig+0xa4>
 8002c82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c86:	d10c      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x92>
 8002c88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c8c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0xa4>
 8002ca2:	4b87      	ldr	r3, [pc, #540]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	6863      	ldr	r3, [r4, #4]
 8002cb6:	b17b      	cbz	r3, 8002cd8 <HAL_RCC_OscConfig+0xc8>
 8002cb8:	f7fe f8be 	bl	8000e38 <HAL_GetTick>
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	e005      	b.n	8002ccc <HAL_RCC_OscConfig+0xbc>
 8002cc0:	f7fe f8ba 	bl	8000e38 <HAL_GetTick>
 8002cc4:	1b40      	subs	r0, r0, r5
 8002cc6:	2864      	cmp	r0, #100	; 0x64
 8002cc8:	f200 817e 	bhi.w	8002fc8 <HAL_RCC_OscConfig+0x3b8>
 8002ccc:	4b7c      	ldr	r3, [pc, #496]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002cd4:	d0f4      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xb0>
 8002cd6:	e00e      	b.n	8002cf6 <HAL_RCC_OscConfig+0xe6>
 8002cd8:	f7fe f8ae 	bl	8000e38 <HAL_GetTick>
 8002cdc:	4605      	mov	r5, r0
 8002cde:	e005      	b.n	8002cec <HAL_RCC_OscConfig+0xdc>
 8002ce0:	f7fe f8aa 	bl	8000e38 <HAL_GetTick>
 8002ce4:	1b40      	subs	r0, r0, r5
 8002ce6:	2864      	cmp	r0, #100	; 0x64
 8002ce8:	f200 8170 	bhi.w	8002fcc <HAL_RCC_OscConfig+0x3bc>
 8002cec:	4b74      	ldr	r3, [pc, #464]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002cf4:	d1f4      	bne.n	8002ce0 <HAL_RCC_OscConfig+0xd0>
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	f013 0f02 	tst.w	r3, #2
 8002cfc:	d050      	beq.n	8002da0 <HAL_RCC_OscConfig+0x190>
 8002cfe:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f013 0f0c 	tst.w	r3, #12
 8002d06:	d00a      	beq.n	8002d1e <HAL_RCC_OscConfig+0x10e>
 8002d08:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b08      	cmp	r3, #8
 8002d12:	d116      	bne.n	8002d42 <HAL_RCC_OscConfig+0x132>
 8002d14:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002d1c:	d111      	bne.n	8002d42 <HAL_RCC_OscConfig+0x132>
 8002d1e:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f013 0f02 	tst.w	r3, #2
 8002d26:	d003      	beq.n	8002d30 <HAL_RCC_OscConfig+0x120>
 8002d28:	6923      	ldr	r3, [r4, #16]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	f040 8150 	bne.w	8002fd0 <HAL_RCC_OscConfig+0x3c0>
 8002d30:	4a63      	ldr	r2, [pc, #396]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d32:	6813      	ldr	r3, [r2, #0]
 8002d34:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d38:	6961      	ldr	r1, [r4, #20]
 8002d3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	e02e      	b.n	8002da0 <HAL_RCC_OscConfig+0x190>
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	b1d3      	cbz	r3, 8002d7c <HAL_RCC_OscConfig+0x16c>
 8002d46:	2201      	movs	r2, #1
 8002d48:	4b5e      	ldr	r3, [pc, #376]	; (8002ec4 <HAL_RCC_OscConfig+0x2b4>)
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f7fe f874 	bl	8000e38 <HAL_GetTick>
 8002d50:	4605      	mov	r5, r0
 8002d52:	e005      	b.n	8002d60 <HAL_RCC_OscConfig+0x150>
 8002d54:	f7fe f870 	bl	8000e38 <HAL_GetTick>
 8002d58:	1b40      	subs	r0, r0, r5
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	f200 813a 	bhi.w	8002fd4 <HAL_RCC_OscConfig+0x3c4>
 8002d60:	4b57      	ldr	r3, [pc, #348]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f013 0f02 	tst.w	r3, #2
 8002d68:	d0f4      	beq.n	8002d54 <HAL_RCC_OscConfig+0x144>
 8002d6a:	4a55      	ldr	r2, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d6c:	6813      	ldr	r3, [r2, #0]
 8002d6e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d72:	6961      	ldr	r1, [r4, #20]
 8002d74:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	e011      	b.n	8002da0 <HAL_RCC_OscConfig+0x190>
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <HAL_RCC_OscConfig+0x2b4>)
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f7fe f859 	bl	8000e38 <HAL_GetTick>
 8002d86:	4605      	mov	r5, r0
 8002d88:	e005      	b.n	8002d96 <HAL_RCC_OscConfig+0x186>
 8002d8a:	f7fe f855 	bl	8000e38 <HAL_GetTick>
 8002d8e:	1b40      	subs	r0, r0, r5
 8002d90:	2802      	cmp	r0, #2
 8002d92:	f200 8121 	bhi.w	8002fd8 <HAL_RCC_OscConfig+0x3c8>
 8002d96:	4b4a      	ldr	r3, [pc, #296]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f013 0f02 	tst.w	r3, #2
 8002d9e:	d1f4      	bne.n	8002d8a <HAL_RCC_OscConfig+0x17a>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	f013 0f08 	tst.w	r3, #8
 8002da6:	d029      	beq.n	8002dfc <HAL_RCC_OscConfig+0x1ec>
 8002da8:	69a3      	ldr	r3, [r4, #24]
 8002daa:	b1ab      	cbz	r3, 8002dd8 <HAL_RCC_OscConfig+0x1c8>
 8002dac:	2201      	movs	r2, #1
 8002dae:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <HAL_RCC_OscConfig+0x2b8>)
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f7fe f841 	bl	8000e38 <HAL_GetTick>
 8002db6:	4605      	mov	r5, r0
 8002db8:	e005      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1b6>
 8002dba:	f7fe f83d 	bl	8000e38 <HAL_GetTick>
 8002dbe:	1b40      	subs	r0, r0, r5
 8002dc0:	2802      	cmp	r0, #2
 8002dc2:	f200 810b 	bhi.w	8002fdc <HAL_RCC_OscConfig+0x3cc>
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f013 0f02 	tst.w	r3, #2
 8002dce:	d0f4      	beq.n	8002dba <HAL_RCC_OscConfig+0x1aa>
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7ff ff07 	bl	8002be4 <RCC_Delay>
 8002dd6:	e011      	b.n	8002dfc <HAL_RCC_OscConfig+0x1ec>
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x2b8>)
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	f7fe f82b 	bl	8000e38 <HAL_GetTick>
 8002de2:	4605      	mov	r5, r0
 8002de4:	e005      	b.n	8002df2 <HAL_RCC_OscConfig+0x1e2>
 8002de6:	f7fe f827 	bl	8000e38 <HAL_GetTick>
 8002dea:	1b40      	subs	r0, r0, r5
 8002dec:	2802      	cmp	r0, #2
 8002dee:	f200 80f7 	bhi.w	8002fe0 <HAL_RCC_OscConfig+0x3d0>
 8002df2:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	f013 0f02 	tst.w	r3, #2
 8002dfa:	d1f4      	bne.n	8002de6 <HAL_RCC_OscConfig+0x1d6>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	f013 0f04 	tst.w	r3, #4
 8002e02:	f000 8089 	beq.w	8002f18 <HAL_RCC_OscConfig+0x308>
 8002e06:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x218>
 8002e10:	4b2b      	ldr	r3, [pc, #172]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e18:	61da      	str	r2, [r3, #28]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	9b01      	ldr	r3, [sp, #4]
 8002e24:	2501      	movs	r5, #1
 8002e26:	e000      	b.n	8002e2a <HAL_RCC_OscConfig+0x21a>
 8002e28:	2500      	movs	r5, #0
 8002e2a:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_RCC_OscConfig+0x2bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e32:	d113      	bne.n	8002e5c <HAL_RCC_OscConfig+0x24c>
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <HAL_RCC_OscConfig+0x2bc>)
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	f7fd fffb 	bl	8000e38 <HAL_GetTick>
 8002e42:	4606      	mov	r6, r0
 8002e44:	e005      	b.n	8002e52 <HAL_RCC_OscConfig+0x242>
 8002e46:	f7fd fff7 	bl	8000e38 <HAL_GetTick>
 8002e4a:	1b80      	subs	r0, r0, r6
 8002e4c:	2864      	cmp	r0, #100	; 0x64
 8002e4e:	f200 80c9 	bhi.w	8002fe4 <HAL_RCC_OscConfig+0x3d4>
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_OscConfig+0x2bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e5a:	d0f4      	beq.n	8002e46 <HAL_RCC_OscConfig+0x236>
 8002e5c:	68e3      	ldr	r3, [r4, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_RCC_OscConfig+0x25e>
 8002e62:	4a17      	ldr	r2, [pc, #92]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002e64:	6a13      	ldr	r3, [r2, #32]
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6213      	str	r3, [r2, #32]
 8002e6c:	e022      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2a4>
 8002e6e:	b963      	cbnz	r3, 8002e8a <HAL_RCC_OscConfig+0x27a>
 8002e70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e74:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002e78:	6a1a      	ldr	r2, [r3, #32]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	621a      	str	r2, [r3, #32]
 8002e80:	6a1a      	ldr	r2, [r3, #32]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	621a      	str	r2, [r3, #32]
 8002e88:	e014      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2a4>
 8002e8a:	2b05      	cmp	r3, #5
 8002e8c:	d109      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x292>
 8002e8e:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002e90:	6a1a      	ldr	r2, [r3, #32]
 8002e92:	f042 0204 	orr.w	r2, r2, #4
 8002e96:	621a      	str	r2, [r3, #32]
 8002e98:	6a1a      	ldr	r2, [r3, #32]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	621a      	str	r2, [r3, #32]
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCC_OscConfig+0x2a4>
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <HAL_RCC_OscConfig+0x2b0>)
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	621a      	str	r2, [r3, #32]
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	621a      	str	r2, [r3, #32]
 8002eb4:	68e3      	ldr	r3, [r4, #12]
 8002eb6:	b1cb      	cbz	r3, 8002eec <HAL_RCC_OscConfig+0x2dc>
 8002eb8:	f7fd ffbe 	bl	8000e38 <HAL_GetTick>
 8002ebc:	4606      	mov	r6, r0
 8002ebe:	e00f      	b.n	8002ee0 <HAL_RCC_OscConfig+0x2d0>
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	42420000 	.word	0x42420000
 8002ec8:	42420480 	.word	0x42420480
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	f7fd ffb2 	bl	8000e38 <HAL_GetTick>
 8002ed4:	1b80      	subs	r0, r0, r6
 8002ed6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002eda:	4298      	cmp	r0, r3
 8002edc:	f200 8084 	bhi.w	8002fe8 <HAL_RCC_OscConfig+0x3d8>
 8002ee0:	4b49      	ldr	r3, [pc, #292]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	f013 0f02 	tst.w	r3, #2
 8002ee8:	d0f2      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x2c0>
 8002eea:	e00f      	b.n	8002f0c <HAL_RCC_OscConfig+0x2fc>
 8002eec:	f7fd ffa4 	bl	8000e38 <HAL_GetTick>
 8002ef0:	4606      	mov	r6, r0
 8002ef2:	e006      	b.n	8002f02 <HAL_RCC_OscConfig+0x2f2>
 8002ef4:	f7fd ffa0 	bl	8000e38 <HAL_GetTick>
 8002ef8:	1b80      	subs	r0, r0, r6
 8002efa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002efe:	4298      	cmp	r0, r3
 8002f00:	d874      	bhi.n	8002fec <HAL_RCC_OscConfig+0x3dc>
 8002f02:	4b41      	ldr	r3, [pc, #260]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	f013 0f02 	tst.w	r3, #2
 8002f0a:	d1f3      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2e4>
 8002f0c:	b125      	cbz	r5, 8002f18 <HAL_RCC_OscConfig+0x308>
 8002f0e:	4a3e      	ldr	r2, [pc, #248]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002f10:	69d3      	ldr	r3, [r2, #28]
 8002f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f16:	61d3      	str	r3, [r2, #28]
 8002f18:	69e3      	ldr	r3, [r4, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d068      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x3e0>
 8002f1e:	4a3a      	ldr	r2, [pc, #232]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002f20:	6852      	ldr	r2, [r2, #4]
 8002f22:	f002 020c 	and.w	r2, r2, #12
 8002f26:	2a08      	cmp	r2, #8
 8002f28:	d064      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x3e4>
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d137      	bne.n	8002f9e <HAL_RCC_OscConfig+0x38e>
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_RCC_OscConfig+0x3fc>)
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	f7fd ff80 	bl	8000e38 <HAL_GetTick>
 8002f38:	4605      	mov	r5, r0
 8002f3a:	e004      	b.n	8002f46 <HAL_RCC_OscConfig+0x336>
 8002f3c:	f7fd ff7c 	bl	8000e38 <HAL_GetTick>
 8002f40:	1b40      	subs	r0, r0, r5
 8002f42:	2802      	cmp	r0, #2
 8002f44:	d858      	bhi.n	8002ff8 <HAL_RCC_OscConfig+0x3e8>
 8002f46:	4b30      	ldr	r3, [pc, #192]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f4e:	d1f5      	bne.n	8002f3c <HAL_RCC_OscConfig+0x32c>
 8002f50:	6a23      	ldr	r3, [r4, #32]
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x356>
 8002f58:	492b      	ldr	r1, [pc, #172]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002f5a:	684b      	ldr	r3, [r1, #4]
 8002f5c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f60:	68a3      	ldr	r3, [r4, #8]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
 8002f66:	4828      	ldr	r0, [pc, #160]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002f68:	6843      	ldr	r3, [r0, #4]
 8002f6a:	f423 1174 	bic.w	r1, r3, #3997696	; 0x3d0000
 8002f6e:	6a23      	ldr	r3, [r4, #32]
 8002f70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f72:	4313      	orrs	r3, r2
 8002f74:	430b      	orrs	r3, r1
 8002f76:	6043      	str	r3, [r0, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_RCC_OscConfig+0x3fc>)
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f7fd ff5b 	bl	8000e38 <HAL_GetTick>
 8002f82:	4604      	mov	r4, r0
 8002f84:	e004      	b.n	8002f90 <HAL_RCC_OscConfig+0x380>
 8002f86:	f7fd ff57 	bl	8000e38 <HAL_GetTick>
 8002f8a:	1b00      	subs	r0, r0, r4
 8002f8c:	2802      	cmp	r0, #2
 8002f8e:	d835      	bhi.n	8002ffc <HAL_RCC_OscConfig+0x3ec>
 8002f90:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f98:	d0f5      	beq.n	8002f86 <HAL_RCC_OscConfig+0x376>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e031      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <HAL_RCC_OscConfig+0x3fc>)
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f7fd ff48 	bl	8000e38 <HAL_GetTick>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	e004      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3a6>
 8002fac:	f7fd ff44 	bl	8000e38 <HAL_GetTick>
 8002fb0:	1b00      	subs	r0, r0, r4
 8002fb2:	2802      	cmp	r0, #2
 8002fb4:	d824      	bhi.n	8003000 <HAL_RCC_OscConfig+0x3f0>
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <HAL_RCC_OscConfig+0x3f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fbe:	d1f5      	bne.n	8002fac <HAL_RCC_OscConfig+0x39c>
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e01e      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fc4:	2001      	movs	r0, #1
 8002fc6:	e01c      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fc8:	2003      	movs	r0, #3
 8002fca:	e01a      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fcc:	2003      	movs	r0, #3
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	e016      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fd4:	2003      	movs	r0, #3
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fd8:	2003      	movs	r0, #3
 8002fda:	e012      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fdc:	2003      	movs	r0, #3
 8002fde:	e010      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	e00e      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	e00c      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fe8:	2003      	movs	r0, #3
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002fec:	2003      	movs	r0, #3
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	e006      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	e004      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002ff8:	2003      	movs	r0, #3
 8002ffa:	e002      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8002ffc:	2003      	movs	r0, #3
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x3f2>
 8003000:	2003      	movs	r0, #3
 8003002:	b002      	add	sp, #8
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	bf00      	nop
 8003008:	40021000 	.word	0x40021000
 800300c:	42420060 	.word	0x42420060

08003010 <HAL_RCC_GetSysClockFreq>:
 8003010:	b430      	push	{r4, r5}
 8003012:	b086      	sub	sp, #24
 8003014:	4d16      	ldr	r5, [pc, #88]	; (8003070 <HAL_RCC_GetSysClockFreq+0x60>)
 8003016:	ac02      	add	r4, sp, #8
 8003018:	6828      	ldr	r0, [r5, #0]
 800301a:	6869      	ldr	r1, [r5, #4]
 800301c:	68aa      	ldr	r2, [r5, #8]
 800301e:	68eb      	ldr	r3, [r5, #12]
 8003020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003022:	8a2b      	ldrh	r3, [r5, #16]
 8003024:	f8ad 3004 	strh.w	r3, [sp, #4]
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_GetSysClockFreq+0x64>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 020c 	and.w	r2, r3, #12
 8003030:	2a08      	cmp	r2, #8
 8003032:	d119      	bne.n	8003068 <HAL_RCC_GetSysClockFreq+0x58>
 8003034:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8003038:	a906      	add	r1, sp, #24
 800303a:	440a      	add	r2, r1
 800303c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8003040:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003044:	d00c      	beq.n	8003060 <HAL_RCC_GetSysClockFreq+0x50>
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_GetSysClockFreq+0x64>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800304e:	440b      	add	r3, r1
 8003050:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCC_GetSysClockFreq+0x68>)
 8003056:	fb03 f000 	mul.w	r0, r3, r0
 800305a:	fbb0 f0f2 	udiv	r0, r0, r2
 800305e:	e004      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x5a>
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_GetSysClockFreq+0x6c>)
 8003062:	fb03 f000 	mul.w	r0, r3, r0
 8003066:	e000      	b.n	800306a <HAL_RCC_GetSysClockFreq+0x5a>
 8003068:	4803      	ldr	r0, [pc, #12]	; (8003078 <HAL_RCC_GetSysClockFreq+0x68>)
 800306a:	b006      	add	sp, #24
 800306c:	bc30      	pop	{r4, r5}
 800306e:	4770      	bx	lr
 8003070:	080082e4 	.word	0x080082e4
 8003074:	40021000 	.word	0x40021000
 8003078:	007a1200 	.word	0x007a1200
 800307c:	003d0900 	.word	0x003d0900

08003080 <HAL_RCC_ClockConfig>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	4b65      	ldr	r3, [pc, #404]	; (8003218 <HAL_RCC_ClockConfig+0x198>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	428b      	cmp	r3, r1
 800308c:	d20b      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x26>
 800308e:	4a62      	ldr	r2, [pc, #392]	; (8003218 <HAL_RCC_ClockConfig+0x198>)
 8003090:	6813      	ldr	r3, [r2, #0]
 8003092:	f023 0307 	bic.w	r3, r3, #7
 8003096:	430b      	orrs	r3, r1
 8003098:	6013      	str	r3, [r2, #0]
 800309a:	6813      	ldr	r3, [r2, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4299      	cmp	r1, r3
 80030a2:	f040 80a8 	bne.w	80031f6 <HAL_RCC_ClockConfig+0x176>
 80030a6:	6803      	ldr	r3, [r0, #0]
 80030a8:	f013 0f02 	tst.w	r3, #2
 80030ac:	d017      	beq.n	80030de <HAL_RCC_ClockConfig+0x5e>
 80030ae:	f013 0f04 	tst.w	r3, #4
 80030b2:	d004      	beq.n	80030be <HAL_RCC_ClockConfig+0x3e>
 80030b4:	4a59      	ldr	r2, [pc, #356]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 80030b6:	6853      	ldr	r3, [r2, #4]
 80030b8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030bc:	6053      	str	r3, [r2, #4]
 80030be:	6803      	ldr	r3, [r0, #0]
 80030c0:	f013 0f08 	tst.w	r3, #8
 80030c4:	d004      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x50>
 80030c6:	4a55      	ldr	r2, [pc, #340]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 80030c8:	6853      	ldr	r3, [r2, #4]
 80030ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ce:	6053      	str	r3, [r2, #4]
 80030d0:	4c52      	ldr	r4, [pc, #328]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 80030d2:	6863      	ldr	r3, [r4, #4]
 80030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d8:	6883      	ldr	r3, [r0, #8]
 80030da:	4313      	orrs	r3, r2
 80030dc:	6063      	str	r3, [r4, #4]
 80030de:	460d      	mov	r5, r1
 80030e0:	4604      	mov	r4, r0
 80030e2:	6803      	ldr	r3, [r0, #0]
 80030e4:	f013 0f01 	tst.w	r3, #1
 80030e8:	d04d      	beq.n	8003186 <HAL_RCC_ClockConfig+0x106>
 80030ea:	6842      	ldr	r2, [r0, #4]
 80030ec:	2a01      	cmp	r2, #1
 80030ee:	d105      	bne.n	80030fc <HAL_RCC_ClockConfig+0x7c>
 80030f0:	4b4a      	ldr	r3, [pc, #296]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80030f8:	d10d      	bne.n	8003116 <HAL_RCC_ClockConfig+0x96>
 80030fa:	e07e      	b.n	80031fa <HAL_RCC_ClockConfig+0x17a>
 80030fc:	2a02      	cmp	r2, #2
 80030fe:	d105      	bne.n	800310c <HAL_RCC_ClockConfig+0x8c>
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003108:	d105      	bne.n	8003116 <HAL_RCC_ClockConfig+0x96>
 800310a:	e078      	b.n	80031fe <HAL_RCC_ClockConfig+0x17e>
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f013 0f02 	tst.w	r3, #2
 8003114:	d075      	beq.n	8003202 <HAL_RCC_ClockConfig+0x182>
 8003116:	4941      	ldr	r1, [pc, #260]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 8003118:	684b      	ldr	r3, [r1, #4]
 800311a:	f023 0303 	bic.w	r3, r3, #3
 800311e:	4313      	orrs	r3, r2
 8003120:	604b      	str	r3, [r1, #4]
 8003122:	f7fd fe89 	bl	8000e38 <HAL_GetTick>
 8003126:	4606      	mov	r6, r0
 8003128:	6863      	ldr	r3, [r4, #4]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10e      	bne.n	800314c <HAL_RCC_ClockConfig+0xcc>
 800312e:	e006      	b.n	800313e <HAL_RCC_ClockConfig+0xbe>
 8003130:	f7fd fe82 	bl	8000e38 <HAL_GetTick>
 8003134:	1b80      	subs	r0, r0, r6
 8003136:	f241 3388 	movw	r3, #5000	; 0x1388
 800313a:	4298      	cmp	r0, r3
 800313c:	d863      	bhi.n	8003206 <HAL_RCC_ClockConfig+0x186>
 800313e:	4b37      	ldr	r3, [pc, #220]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b04      	cmp	r3, #4
 8003148:	d1f2      	bne.n	8003130 <HAL_RCC_ClockConfig+0xb0>
 800314a:	e01c      	b.n	8003186 <HAL_RCC_ClockConfig+0x106>
 800314c:	2b02      	cmp	r3, #2
 800314e:	d115      	bne.n	800317c <HAL_RCC_ClockConfig+0xfc>
 8003150:	e006      	b.n	8003160 <HAL_RCC_ClockConfig+0xe0>
 8003152:	f7fd fe71 	bl	8000e38 <HAL_GetTick>
 8003156:	1b80      	subs	r0, r0, r6
 8003158:	f241 3388 	movw	r3, #5000	; 0x1388
 800315c:	4298      	cmp	r0, r3
 800315e:	d854      	bhi.n	800320a <HAL_RCC_ClockConfig+0x18a>
 8003160:	4b2e      	ldr	r3, [pc, #184]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 030c 	and.w	r3, r3, #12
 8003168:	2b08      	cmp	r3, #8
 800316a:	d1f2      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd2>
 800316c:	e00b      	b.n	8003186 <HAL_RCC_ClockConfig+0x106>
 800316e:	f7fd fe63 	bl	8000e38 <HAL_GetTick>
 8003172:	1b80      	subs	r0, r0, r6
 8003174:	f241 3388 	movw	r3, #5000	; 0x1388
 8003178:	4298      	cmp	r0, r3
 800317a:	d848      	bhi.n	800320e <HAL_RCC_ClockConfig+0x18e>
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f013 0f0c 	tst.w	r3, #12
 8003184:	d1f3      	bne.n	800316e <HAL_RCC_ClockConfig+0xee>
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_ClockConfig+0x198>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	429d      	cmp	r5, r3
 8003190:	d20a      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x128>
 8003192:	4a21      	ldr	r2, [pc, #132]	; (8003218 <HAL_RCC_ClockConfig+0x198>)
 8003194:	6813      	ldr	r3, [r2, #0]
 8003196:	f023 0307 	bic.w	r3, r3, #7
 800319a:	432b      	orrs	r3, r5
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	6813      	ldr	r3, [r2, #0]
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	429d      	cmp	r5, r3
 80031a6:	d134      	bne.n	8003212 <HAL_RCC_ClockConfig+0x192>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	f013 0f04 	tst.w	r3, #4
 80031ae:	d006      	beq.n	80031be <HAL_RCC_ClockConfig+0x13e>
 80031b0:	491a      	ldr	r1, [pc, #104]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 80031b2:	684b      	ldr	r3, [r1, #4]
 80031b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031b8:	68e3      	ldr	r3, [r4, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
 80031be:	6823      	ldr	r3, [r4, #0]
 80031c0:	f013 0f08 	tst.w	r3, #8
 80031c4:	d007      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x156>
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 80031c8:	6853      	ldr	r3, [r2, #4]
 80031ca:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80031ce:	6921      	ldr	r1, [r4, #16]
 80031d0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80031d4:	6053      	str	r3, [r2, #4]
 80031d6:	f7ff ff1b 	bl	8003010 <HAL_RCC_GetSysClockFreq>
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <HAL_RCC_ClockConfig+0x19c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031e2:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <HAL_RCC_ClockConfig+0x1a0>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	40d8      	lsrs	r0, r3
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HAL_RCC_ClockConfig+0x1a4>)
 80031ea:	6018      	str	r0, [r3, #0]
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fd fde1 	bl	8000db4 <HAL_InitTick>
 80031f2:	2000      	movs	r0, #0
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
 80031f6:	2001      	movs	r0, #1
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
 80031fa:	2001      	movs	r0, #1
 80031fc:	bd70      	pop	{r4, r5, r6, pc}
 80031fe:	2001      	movs	r0, #1
 8003200:	bd70      	pop	{r4, r5, r6, pc}
 8003202:	2001      	movs	r0, #1
 8003204:	bd70      	pop	{r4, r5, r6, pc}
 8003206:	2003      	movs	r0, #3
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	2003      	movs	r0, #3
 800320c:	bd70      	pop	{r4, r5, r6, pc}
 800320e:	2003      	movs	r0, #3
 8003210:	bd70      	pop	{r4, r5, r6, pc}
 8003212:	2001      	movs	r0, #1
 8003214:	bd70      	pop	{r4, r5, r6, pc}
 8003216:	bf00      	nop
 8003218:	40022000 	.word	0x40022000
 800321c:	40021000 	.word	0x40021000
 8003220:	0800830c 	.word	0x0800830c
 8003224:	20000138 	.word	0x20000138

08003228 <HAL_RCC_GetHCLKFreq>:
 8003228:	4b01      	ldr	r3, [pc, #4]	; (8003230 <HAL_RCC_GetHCLKFreq+0x8>)
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20000138 	.word	0x20000138

08003234 <HAL_RCC_GetPCLK1Freq>:
 8003234:	b508      	push	{r3, lr}
 8003236:	f7ff fff7 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 800323a:	4b04      	ldr	r3, [pc, #16]	; (800324c <HAL_RCC_GetPCLK1Freq+0x18>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003242:	4a03      	ldr	r2, [pc, #12]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003244:	5cd3      	ldrb	r3, [r2, r3]
 8003246:	40d8      	lsrs	r0, r3
 8003248:	bd08      	pop	{r3, pc}
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000
 8003250:	0800831c 	.word	0x0800831c

08003254 <HAL_RCC_GetPCLK2Freq>:
 8003254:	b508      	push	{r3, lr}
 8003256:	f7ff ffe7 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <HAL_RCC_GetPCLK2Freq+0x18>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003262:	4a03      	ldr	r2, [pc, #12]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003264:	5cd3      	ldrb	r3, [r2, r3]
 8003266:	40d8      	lsrs	r0, r3
 8003268:	bd08      	pop	{r3, pc}
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	0800831c 	.word	0x0800831c

08003274 <HAL_RCCEx_PeriphCLKConfig>:
 8003274:	b570      	push	{r4, r5, r6, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	4604      	mov	r4, r0
 800327a:	6803      	ldr	r3, [r0, #0]
 800327c:	f013 0f01 	tst.w	r3, #1
 8003280:	d05c      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003282:	4b3e      	ldr	r3, [pc, #248]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800328a:	d10b      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x30>
 800328c:	4b3b      	ldr	r3, [pc, #236]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800328e:	69da      	ldr	r2, [r3, #28]
 8003290:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003294:	61da      	str	r2, [r3, #28]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	9b01      	ldr	r3, [sp, #4]
 80032a0:	2601      	movs	r6, #1
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032a4:	2600      	movs	r6, #0
 80032a6:	4b36      	ldr	r3, [pc, #216]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032ae:	d112      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80032b0:	4a33      	ldr	r2, [pc, #204]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]
 80032ba:	f7fd fdbd 	bl	8000e38 <HAL_GetTick>
 80032be:	4605      	mov	r5, r0
 80032c0:	e004      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x58>
 80032c2:	f7fd fdb9 	bl	8000e38 <HAL_GetTick>
 80032c6:	1b40      	subs	r0, r0, r5
 80032c8:	2864      	cmp	r0, #100	; 0x64
 80032ca:	d84f      	bhi.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 80032cc:	4b2c      	ldr	r3, [pc, #176]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80032d4:	d0f5      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80032d6:	4b29      	ldr	r3, [pc, #164]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80032de:	d021      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80032e0:	6862      	ldr	r2, [r4, #4]
 80032e2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d01c      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 80032ea:	4a24      	ldr	r2, [pc, #144]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80032ec:	6a13      	ldr	r3, [r2, #32]
 80032ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032f2:	4924      	ldr	r1, [pc, #144]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80032f4:	2501      	movs	r5, #1
 80032f6:	600d      	str	r5, [r1, #0]
 80032f8:	2500      	movs	r5, #0
 80032fa:	600d      	str	r5, [r1, #0]
 80032fc:	6210      	str	r0, [r2, #32]
 80032fe:	f013 0f01 	tst.w	r3, #1
 8003302:	d00f      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0xb0>
 8003304:	f7fd fd98 	bl	8000e38 <HAL_GetTick>
 8003308:	4605      	mov	r5, r0
 800330a:	e006      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800330c:	f7fd fd94 	bl	8000e38 <HAL_GetTick>
 8003310:	1b40      	subs	r0, r0, r5
 8003312:	f241 3388 	movw	r3, #5000	; 0x1388
 8003316:	4298      	cmp	r0, r3
 8003318:	d82a      	bhi.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 800331a:	4b18      	ldr	r3, [pc, #96]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f013 0f02 	tst.w	r3, #2
 8003322:	d0f3      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003324:	4915      	ldr	r1, [pc, #84]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003326:	6a0b      	ldr	r3, [r1, #32]
 8003328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800332c:	6863      	ldr	r3, [r4, #4]
 800332e:	4313      	orrs	r3, r2
 8003330:	620b      	str	r3, [r1, #32]
 8003332:	b11e      	cbz	r6, 800333c <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003334:	69cb      	ldr	r3, [r1, #28]
 8003336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333a:	61cb      	str	r3, [r1, #28]
 800333c:	6823      	ldr	r3, [r4, #0]
 800333e:	f013 0f02 	tst.w	r3, #2
 8003342:	d006      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003344:	490d      	ldr	r1, [pc, #52]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8003346:	684b      	ldr	r3, [r1, #4]
 8003348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800334c:	68a3      	ldr	r3, [r4, #8]
 800334e:	4313      	orrs	r3, r2
 8003350:	604b      	str	r3, [r1, #4]
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f013 0f10 	tst.w	r3, #16
 8003358:	d00c      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x100>
 800335a:	4908      	ldr	r1, [pc, #32]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800335c:	684b      	ldr	r3, [r1, #4]
 800335e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003362:	68e3      	ldr	r3, [r4, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	604b      	str	r3, [r1, #4]
 8003368:	2000      	movs	r0, #0
 800336a:	e004      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x102>
 800336c:	2003      	movs	r0, #3
 800336e:	e002      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8003370:	2003      	movs	r0, #3
 8003372:	e000      	b.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x102>
 8003374:	2000      	movs	r0, #0
 8003376:	b002      	add	sp, #8
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000
 8003380:	40007000 	.word	0x40007000
 8003384:	42420440 	.word	0x42420440

08003388 <HAL_RCCEx_GetPeriphCLKFreq>:
 8003388:	b570      	push	{r4, r5, r6, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	4606      	mov	r6, r0
 800338e:	4d3b      	ldr	r5, [pc, #236]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 8003390:	ac02      	add	r4, sp, #8
 8003392:	6828      	ldr	r0, [r5, #0]
 8003394:	6869      	ldr	r1, [r5, #4]
 8003396:	68aa      	ldr	r2, [r5, #8]
 8003398:	68eb      	ldr	r3, [r5, #12]
 800339a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800339c:	8a2b      	ldrh	r3, [r5, #16]
 800339e:	f8ad 3004 	strh.w	r3, [sp, #4]
 80033a2:	2e02      	cmp	r6, #2
 80033a4:	d04e      	beq.n	8003444 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80033a6:	2e10      	cmp	r6, #16
 80033a8:	d002      	beq.n	80033b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80033aa:	2e01      	cmp	r6, #1
 80033ac:	d155      	bne.n	800345a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80033ae:	e02d      	b.n	800340c <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80033b0:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80033ba:	d050      	beq.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80033bc:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80033c0:	a906      	add	r1, sp, #24
 80033c2:	440b      	add	r3, r1
 80033c4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80033c8:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 80033cc:	d00e      	beq.n	80033ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80033ce:	492c      	ldr	r1, [pc, #176]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80033d0:	6849      	ldr	r1, [r1, #4]
 80033d2:	f3c1 4140 	ubfx	r1, r1, #17, #1
 80033d6:	a806      	add	r0, sp, #24
 80033d8:	4401      	add	r1, r0
 80033da:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80033de:	b14a      	cbz	r2, 80033f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 80033e0:	4a28      	ldr	r2, [pc, #160]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>)
 80033e2:	fbb2 f0f0 	udiv	r0, r2, r0
 80033e6:	fb00 f003 	mul.w	r0, r0, r3
 80033ea:	e004      	b.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80033ec:	4826      	ldr	r0, [pc, #152]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x100>)
 80033ee:	fb00 f003 	mul.w	r0, r0, r3
 80033f2:	e000      	b.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80033f4:	2000      	movs	r0, #0
 80033f6:	4b22      	ldr	r3, [pc, #136]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80033fe:	d13a      	bne.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8003400:	0040      	lsls	r0, r0, #1
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x104>)
 8003404:	fba3 3000 	umull	r3, r0, r3, r0
 8003408:	0840      	lsrs	r0, r0, #1
 800340a:	e034      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	f240 3202 	movw	r2, #770	; 0x302
 8003414:	401a      	ands	r2, r3
 8003416:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800341a:	d022      	beq.n	8003462 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800341c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003424:	d104      	bne.n	8003430 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8003428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800342a:	f012 0f02 	tst.w	r2, #2
 800342e:	d11b      	bne.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003434:	d11b      	bne.n	800346e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800343e:	d118      	bne.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
 8003440:	2000      	movs	r0, #0
 8003442:	e018      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8003444:	f7ff ff06 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003450:	3301      	adds	r3, #1
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fbb0 f0f3 	udiv	r0, r0, r3
 8003458:	e00d      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800345a:	2000      	movs	r0, #0
 800345c:	e00b      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800345e:	2000      	movs	r0, #0
 8003460:	e009      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8003462:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003466:	e006      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8003468:	f649 4040 	movw	r0, #40000	; 0x9c40
 800346c:	e003      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 800346e:	2000      	movs	r0, #0
 8003470:	e001      	b.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8003472:	f24f 4024 	movw	r0, #62500	; 0xf424
 8003476:	b006      	add	sp, #24
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	bf00      	nop
 800347c:	080082f8 	.word	0x080082f8
 8003480:	40021000 	.word	0x40021000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	003d0900 	.word	0x003d0900
 800348c:	aaaaaaab 	.word	0xaaaaaaab

08003490 <RTC_ReadTimeCounter>:
 8003490:	b430      	push	{r4, r5}
 8003492:	6802      	ldr	r2, [r0, #0]
 8003494:	6991      	ldr	r1, [r2, #24]
 8003496:	b28d      	uxth	r5, r1
 8003498:	69d3      	ldr	r3, [r2, #28]
 800349a:	6990      	ldr	r0, [r2, #24]
 800349c:	b284      	uxth	r4, r0
 800349e:	42a5      	cmp	r5, r4
 80034a0:	d004      	beq.n	80034ac <RTC_ReadTimeCounter+0x1c>
 80034a2:	69d3      	ldr	r3, [r2, #28]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80034aa:	e002      	b.n	80034b2 <RTC_ReadTimeCounter+0x22>
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	ea43 4001 	orr.w	r0, r3, r1, lsl #16
 80034b2:	bc30      	pop	{r4, r5}
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop

080034b8 <RTC_ReadAlarmCounter>:
 80034b8:	6803      	ldr	r3, [r0, #0]
 80034ba:	6a18      	ldr	r0, [r3, #32]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	b29b      	uxth	r3, r3
 80034c0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop

080034c8 <RTC_Bcd2ToByte>:
 80034c8:	0903      	lsrs	r3, r0, #4
 80034ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034ce:	005a      	lsls	r2, r3, #1
 80034d0:	f000 000f 	and.w	r0, r0, #15
 80034d4:	4410      	add	r0, r2
 80034d6:	b2c0      	uxtb	r0, r0
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <RTC_WeekDayNum>:
 80034dc:	b410      	push	{r4}
 80034de:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
 80034e2:	2902      	cmp	r1, #2
 80034e4:	d820      	bhi.n	8003528 <RTC_WeekDayNum+0x4c>
 80034e6:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80034ea:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80034ee:	4b1f      	ldr	r3, [pc, #124]	; (800356c <RTC_WeekDayNum+0x90>)
 80034f0:	fba3 3101 	umull	r3, r1, r3, r1
 80034f4:	eb02 0251 	add.w	r2, r2, r1, lsr #1
 80034f8:	4422      	add	r2, r4
 80034fa:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 80034fe:	eb02 0290 	add.w	r2, r2, r0, lsr #2
 8003502:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <RTC_WeekDayNum+0x94>)
 8003504:	fba3 1300 	umull	r1, r3, r3, r0
 8003508:	eba2 1253 	sub.w	r2, r2, r3, lsr #5
 800350c:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
 8003510:	3304      	adds	r3, #4
 8003512:	4818      	ldr	r0, [pc, #96]	; (8003574 <RTC_WeekDayNum+0x98>)
 8003514:	fba3 0100 	umull	r0, r1, r3, r0
 8003518:	1a58      	subs	r0, r3, r1
 800351a:	eb01 0050 	add.w	r0, r1, r0, lsr #1
 800351e:	0880      	lsrs	r0, r0, #2
 8003520:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003524:	1a18      	subs	r0, r3, r0
 8003526:	e01d      	b.n	8003564 <RTC_WeekDayNum+0x88>
 8003528:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800352c:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <RTC_WeekDayNum+0x90>)
 8003532:	fba3 1301 	umull	r1, r3, r3, r1
 8003536:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 800353a:	18a3      	adds	r3, r4, r2
 800353c:	eb03 0294 	add.w	r2, r3, r4, lsr #2
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <RTC_WeekDayNum+0x94>)
 8003542:	fba3 3404 	umull	r3, r4, r3, r4
 8003546:	eba2 1354 	sub.w	r3, r2, r4, lsr #5
 800354a:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 800354e:	3302      	adds	r3, #2
 8003550:	4808      	ldr	r0, [pc, #32]	; (8003574 <RTC_WeekDayNum+0x98>)
 8003552:	fba3 0100 	umull	r0, r1, r3, r0
 8003556:	1a58      	subs	r0, r3, r1
 8003558:	eb01 0050 	add.w	r0, r1, r0, lsr #1
 800355c:	0880      	lsrs	r0, r0, #2
 800355e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8003562:	1a18      	subs	r0, r3, r0
 8003564:	b2c0      	uxtb	r0, r0
 8003566:	bc10      	pop	{r4}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	38e38e39 	.word	0x38e38e39
 8003570:	51eb851f 	.word	0x51eb851f
 8003574:	24924925 	.word	0x24924925

08003578 <RTC_EnterInitMode>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	f7fd fc5c 	bl	8000e38 <HAL_GetTick>
 8003580:	4605      	mov	r5, r0
 8003582:	e005      	b.n	8003590 <RTC_EnterInitMode+0x18>
 8003584:	f7fd fc58 	bl	8000e38 <HAL_GetTick>
 8003588:	1b40      	subs	r0, r0, r5
 800358a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800358e:	d80a      	bhi.n	80035a6 <RTC_EnterInitMode+0x2e>
 8003590:	6823      	ldr	r3, [r4, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	f012 0f20 	tst.w	r2, #32
 8003598:	d0f4      	beq.n	8003584 <RTC_EnterInitMode+0xc>
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	f042 0210 	orr.w	r2, r2, #16
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	2000      	movs	r0, #0
 80035a4:	bd38      	pop	{r3, r4, r5, pc}
 80035a6:	2003      	movs	r0, #3
 80035a8:	bd38      	pop	{r3, r4, r5, pc}
 80035aa:	bf00      	nop

080035ac <RTC_ExitInitMode>:
 80035ac:	b538      	push	{r3, r4, r5, lr}
 80035ae:	4604      	mov	r4, r0
 80035b0:	6802      	ldr	r2, [r0, #0]
 80035b2:	6853      	ldr	r3, [r2, #4]
 80035b4:	f023 0310 	bic.w	r3, r3, #16
 80035b8:	6053      	str	r3, [r2, #4]
 80035ba:	f7fd fc3d 	bl	8000e38 <HAL_GetTick>
 80035be:	4605      	mov	r5, r0
 80035c0:	e005      	b.n	80035ce <RTC_ExitInitMode+0x22>
 80035c2:	f7fd fc39 	bl	8000e38 <HAL_GetTick>
 80035c6:	1b40      	subs	r0, r0, r5
 80035c8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80035cc:	d806      	bhi.n	80035dc <RTC_ExitInitMode+0x30>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f013 0f20 	tst.w	r3, #32
 80035d6:	d0f4      	beq.n	80035c2 <RTC_ExitInitMode+0x16>
 80035d8:	2000      	movs	r0, #0
 80035da:	bd38      	pop	{r3, r4, r5, pc}
 80035dc:	2003      	movs	r0, #3
 80035de:	bd38      	pop	{r3, r4, r5, pc}

080035e0 <RTC_WriteTimeCounter>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	4605      	mov	r5, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	f7ff ffc7 	bl	8003578 <RTC_EnterInitMode>
 80035ea:	b950      	cbnz	r0, 8003602 <RTC_WriteTimeCounter+0x22>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	0c22      	lsrs	r2, r4, #16
 80035f0:	619a      	str	r2, [r3, #24]
 80035f2:	682b      	ldr	r3, [r5, #0]
 80035f4:	b2a4      	uxth	r4, r4
 80035f6:	61dc      	str	r4, [r3, #28]
 80035f8:	4628      	mov	r0, r5
 80035fa:	f7ff ffd7 	bl	80035ac <RTC_ExitInitMode>
 80035fe:	b910      	cbnz	r0, 8003606 <RTC_WriteTimeCounter+0x26>
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	2001      	movs	r0, #1
 8003604:	bd38      	pop	{r3, r4, r5, pc}
 8003606:	2001      	movs	r0, #1
 8003608:	bd38      	pop	{r3, r4, r5, pc}
 800360a:	bf00      	nop

0800360c <RTC_WriteAlarmCounter>:
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4605      	mov	r5, r0
 8003610:	460c      	mov	r4, r1
 8003612:	f7ff ffb1 	bl	8003578 <RTC_EnterInitMode>
 8003616:	b950      	cbnz	r0, 800362e <RTC_WriteAlarmCounter+0x22>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	0c22      	lsrs	r2, r4, #16
 800361c:	621a      	str	r2, [r3, #32]
 800361e:	682b      	ldr	r3, [r5, #0]
 8003620:	b2a4      	uxth	r4, r4
 8003622:	625c      	str	r4, [r3, #36]	; 0x24
 8003624:	4628      	mov	r0, r5
 8003626:	f7ff ffc1 	bl	80035ac <RTC_ExitInitMode>
 800362a:	b910      	cbnz	r0, 8003632 <RTC_WriteAlarmCounter+0x26>
 800362c:	bd38      	pop	{r3, r4, r5, pc}
 800362e:	2001      	movs	r0, #1
 8003630:	bd38      	pop	{r3, r4, r5, pc}
 8003632:	2001      	movs	r0, #1
 8003634:	bd38      	pop	{r3, r4, r5, pc}
 8003636:	bf00      	nop

08003638 <HAL_RTC_SetTime>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	2800      	cmp	r0, #0
 800363c:	d055      	beq.n	80036ea <HAL_RTC_SetTime+0xb2>
 800363e:	4604      	mov	r4, r0
 8003640:	2900      	cmp	r1, #0
 8003642:	d054      	beq.n	80036ee <HAL_RTC_SetTime+0xb6>
 8003644:	7c03      	ldrb	r3, [r0, #16]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d053      	beq.n	80036f2 <HAL_RTC_SetTime+0xba>
 800364a:	460e      	mov	r6, r1
 800364c:	2301      	movs	r3, #1
 800364e:	7403      	strb	r3, [r0, #16]
 8003650:	2302      	movs	r3, #2
 8003652:	7443      	strb	r3, [r0, #17]
 8003654:	b95a      	cbnz	r2, 800366e <HAL_RTC_SetTime+0x36>
 8003656:	780a      	ldrb	r2, [r1, #0]
 8003658:	784b      	ldrb	r3, [r1, #1]
 800365a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800365e:	0099      	lsls	r1, r3, #2
 8003660:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8003664:	fb05 1502 	mla	r5, r5, r2, r1
 8003668:	78b3      	ldrb	r3, [r6, #2]
 800366a:	441d      	add	r5, r3
 800366c:	e011      	b.n	8003692 <HAL_RTC_SetTime+0x5a>
 800366e:	7808      	ldrb	r0, [r1, #0]
 8003670:	f7ff ff2a 	bl	80034c8 <RTC_Bcd2ToByte>
 8003674:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8003678:	fb05 f500 	mul.w	r5, r5, r0
 800367c:	7870      	ldrb	r0, [r6, #1]
 800367e:	f7ff ff23 	bl	80034c8 <RTC_Bcd2ToByte>
 8003682:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8003686:	0083      	lsls	r3, r0, #2
 8003688:	441d      	add	r5, r3
 800368a:	78b0      	ldrb	r0, [r6, #2]
 800368c:	f7ff ff1c 	bl	80034c8 <RTC_Bcd2ToByte>
 8003690:	4405      	add	r5, r0
 8003692:	4629      	mov	r1, r5
 8003694:	4620      	mov	r0, r4
 8003696:	f7ff ffa3 	bl	80035e0 <RTC_WriteTimeCounter>
 800369a:	4606      	mov	r6, r0
 800369c:	b128      	cbz	r0, 80036aa <HAL_RTC_SetTime+0x72>
 800369e:	2304      	movs	r3, #4
 80036a0:	7463      	strb	r3, [r4, #17]
 80036a2:	2300      	movs	r3, #0
 80036a4:	7423      	strb	r3, [r4, #16]
 80036a6:	2601      	movs	r6, #1
 80036a8:	e024      	b.n	80036f4 <HAL_RTC_SetTime+0xbc>
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	6853      	ldr	r3, [r2, #4]
 80036ae:	f023 0305 	bic.w	r3, r3, #5
 80036b2:	6053      	str	r3, [r2, #4]
 80036b4:	4620      	mov	r0, r4
 80036b6:	f7ff feff 	bl	80034b8 <RTC_ReadAlarmCounter>
 80036ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 80036be:	d00f      	beq.n	80036e0 <HAL_RTC_SetTime+0xa8>
 80036c0:	4285      	cmp	r5, r0
 80036c2:	d90d      	bls.n	80036e0 <HAL_RTC_SetTime+0xa8>
 80036c4:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80036c8:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ff9d 	bl	800360c <RTC_WriteAlarmCounter>
 80036d2:	b128      	cbz	r0, 80036e0 <HAL_RTC_SetTime+0xa8>
 80036d4:	2304      	movs	r3, #4
 80036d6:	7463      	strb	r3, [r4, #17]
 80036d8:	2300      	movs	r3, #0
 80036da:	7423      	strb	r3, [r4, #16]
 80036dc:	2601      	movs	r6, #1
 80036de:	e009      	b.n	80036f4 <HAL_RTC_SetTime+0xbc>
 80036e0:	2301      	movs	r3, #1
 80036e2:	7463      	strb	r3, [r4, #17]
 80036e4:	2300      	movs	r3, #0
 80036e6:	7423      	strb	r3, [r4, #16]
 80036e8:	e004      	b.n	80036f4 <HAL_RTC_SetTime+0xbc>
 80036ea:	2601      	movs	r6, #1
 80036ec:	e002      	b.n	80036f4 <HAL_RTC_SetTime+0xbc>
 80036ee:	2601      	movs	r6, #1
 80036f0:	e000      	b.n	80036f4 <HAL_RTC_SetTime+0xbc>
 80036f2:	2602      	movs	r6, #2
 80036f4:	4630      	mov	r0, r6
 80036f6:	bd70      	pop	{r4, r5, r6, pc}

080036f8 <HAL_RTC_SetDate>:
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d05c      	beq.n	80037b6 <HAL_RTC_SetDate+0xbe>
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4604      	mov	r4, r0
 8003700:	2900      	cmp	r1, #0
 8003702:	d05a      	beq.n	80037ba <HAL_RTC_SetDate+0xc2>
 8003704:	7c03      	ldrb	r3, [r0, #16]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d059      	beq.n	80037be <HAL_RTC_SetDate+0xc6>
 800370a:	460d      	mov	r5, r1
 800370c:	2301      	movs	r3, #1
 800370e:	7403      	strb	r3, [r0, #16]
 8003710:	2302      	movs	r3, #2
 8003712:	7443      	strb	r3, [r0, #17]
 8003714:	b932      	cbnz	r2, 8003724 <HAL_RTC_SetDate+0x2c>
 8003716:	78cb      	ldrb	r3, [r1, #3]
 8003718:	73c3      	strb	r3, [r0, #15]
 800371a:	784b      	ldrb	r3, [r1, #1]
 800371c:	7343      	strb	r3, [r0, #13]
 800371e:	788b      	ldrb	r3, [r1, #2]
 8003720:	7383      	strb	r3, [r0, #14]
 8003722:	e00b      	b.n	800373c <HAL_RTC_SetDate+0x44>
 8003724:	78c8      	ldrb	r0, [r1, #3]
 8003726:	f7ff fecf 	bl	80034c8 <RTC_Bcd2ToByte>
 800372a:	73e0      	strb	r0, [r4, #15]
 800372c:	7868      	ldrb	r0, [r5, #1]
 800372e:	f7ff fecb 	bl	80034c8 <RTC_Bcd2ToByte>
 8003732:	7360      	strb	r0, [r4, #13]
 8003734:	78a8      	ldrb	r0, [r5, #2]
 8003736:	f7ff fec7 	bl	80034c8 <RTC_Bcd2ToByte>
 800373a:	73a0      	strb	r0, [r4, #14]
 800373c:	7ba2      	ldrb	r2, [r4, #14]
 800373e:	7b61      	ldrb	r1, [r4, #13]
 8003740:	7be0      	ldrb	r0, [r4, #15]
 8003742:	f7ff fecb 	bl	80034dc <RTC_WeekDayNum>
 8003746:	7320      	strb	r0, [r4, #12]
 8003748:	7028      	strb	r0, [r5, #0]
 800374a:	4620      	mov	r0, r4
 800374c:	f7ff fea0 	bl	8003490 <RTC_ReadTimeCounter>
 8003750:	4b1c      	ldr	r3, [pc, #112]	; (80037c4 <HAL_RTC_SetDate+0xcc>)
 8003752:	fba3 2300 	umull	r2, r3, r3, r0
 8003756:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 800375a:	d327      	bcc.n	80037ac <HAL_RTC_SetDate+0xb4>
 800375c:	4d1a      	ldr	r5, [pc, #104]	; (80037c8 <HAL_RTC_SetDate+0xd0>)
 800375e:	fba5 3500 	umull	r3, r5, r5, r0
 8003762:	0c2b      	lsrs	r3, r5, #16
 8003764:	4d19      	ldr	r5, [pc, #100]	; (80037cc <HAL_RTC_SetDate+0xd4>)
 8003766:	fb05 0513 	mls	r5, r5, r3, r0
 800376a:	4629      	mov	r1, r5
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff ff37 	bl	80035e0 <RTC_WriteTimeCounter>
 8003772:	b128      	cbz	r0, 8003780 <HAL_RTC_SetDate+0x88>
 8003774:	2304      	movs	r3, #4
 8003776:	7463      	strb	r3, [r4, #17]
 8003778:	2300      	movs	r3, #0
 800377a:	7423      	strb	r3, [r4, #16]
 800377c:	2001      	movs	r0, #1
 800377e:	bd38      	pop	{r3, r4, r5, pc}
 8003780:	4620      	mov	r0, r4
 8003782:	f7ff fe99 	bl	80034b8 <RTC_ReadAlarmCounter>
 8003786:	f1b0 3fff 	cmp.w	r0, #4294967295
 800378a:	d00f      	beq.n	80037ac <HAL_RTC_SetDate+0xb4>
 800378c:	4285      	cmp	r5, r0
 800378e:	d90d      	bls.n	80037ac <HAL_RTC_SetDate+0xb4>
 8003790:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8003794:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8003798:	4620      	mov	r0, r4
 800379a:	f7ff ff37 	bl	800360c <RTC_WriteAlarmCounter>
 800379e:	b128      	cbz	r0, 80037ac <HAL_RTC_SetDate+0xb4>
 80037a0:	2304      	movs	r3, #4
 80037a2:	7463      	strb	r3, [r4, #17]
 80037a4:	2300      	movs	r3, #0
 80037a6:	7423      	strb	r3, [r4, #16]
 80037a8:	2001      	movs	r0, #1
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	2301      	movs	r3, #1
 80037ae:	7463      	strb	r3, [r4, #17]
 80037b0:	2000      	movs	r0, #0
 80037b2:	7420      	strb	r0, [r4, #16]
 80037b4:	bd38      	pop	{r3, r4, r5, pc}
 80037b6:	2001      	movs	r0, #1
 80037b8:	4770      	bx	lr
 80037ba:	2001      	movs	r0, #1
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
 80037be:	2002      	movs	r0, #2
 80037c0:	bd38      	pop	{r3, r4, r5, pc}
 80037c2:	bf00      	nop
 80037c4:	91a2b3c5 	.word	0x91a2b3c5
 80037c8:	c22e4507 	.word	0xc22e4507
 80037cc:	00015180 	.word	0x00015180

080037d0 <HAL_RTC_WaitForSynchro>:
 80037d0:	b1b8      	cbz	r0, 8003802 <HAL_RTC_WaitForSynchro+0x32>
 80037d2:	b538      	push	{r3, r4, r5, lr}
 80037d4:	4604      	mov	r4, r0
 80037d6:	6802      	ldr	r2, [r0, #0]
 80037d8:	6853      	ldr	r3, [r2, #4]
 80037da:	f023 0308 	bic.w	r3, r3, #8
 80037de:	6053      	str	r3, [r2, #4]
 80037e0:	f7fd fb2a 	bl	8000e38 <HAL_GetTick>
 80037e4:	4605      	mov	r5, r0
 80037e6:	e005      	b.n	80037f4 <HAL_RTC_WaitForSynchro+0x24>
 80037e8:	f7fd fb26 	bl	8000e38 <HAL_GetTick>
 80037ec:	1b40      	subs	r0, r0, r5
 80037ee:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80037f2:	d808      	bhi.n	8003806 <HAL_RTC_WaitForSynchro+0x36>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f013 0f08 	tst.w	r3, #8
 80037fc:	d0f4      	beq.n	80037e8 <HAL_RTC_WaitForSynchro+0x18>
 80037fe:	2000      	movs	r0, #0
 8003800:	bd38      	pop	{r3, r4, r5, pc}
 8003802:	2001      	movs	r0, #1
 8003804:	4770      	bx	lr
 8003806:	2003      	movs	r0, #3
 8003808:	bd38      	pop	{r3, r4, r5, pc}
 800380a:	bf00      	nop

0800380c <HAL_RTC_Init>:
 800380c:	2800      	cmp	r0, #0
 800380e:	d059      	beq.n	80038c4 <HAL_RTC_Init+0xb8>
 8003810:	b510      	push	{r4, lr}
 8003812:	4604      	mov	r4, r0
 8003814:	7c43      	ldrb	r3, [r0, #17]
 8003816:	f013 0fff 	tst.w	r3, #255	; 0xff
 800381a:	d103      	bne.n	8003824 <HAL_RTC_Init+0x18>
 800381c:	2300      	movs	r3, #0
 800381e:	7403      	strb	r3, [r0, #16]
 8003820:	f002 fc50 	bl	80060c4 <HAL_RTC_MspInit>
 8003824:	2302      	movs	r3, #2
 8003826:	7463      	strb	r3, [r4, #17]
 8003828:	4620      	mov	r0, r4
 800382a:	f7ff ffd1 	bl	80037d0 <HAL_RTC_WaitForSynchro>
 800382e:	b118      	cbz	r0, 8003838 <HAL_RTC_Init+0x2c>
 8003830:	2304      	movs	r3, #4
 8003832:	7463      	strb	r3, [r4, #17]
 8003834:	2301      	movs	r3, #1
 8003836:	e048      	b.n	80038ca <HAL_RTC_Init+0xbe>
 8003838:	4620      	mov	r0, r4
 800383a:	f7ff fe9d 	bl	8003578 <RTC_EnterInitMode>
 800383e:	b118      	cbz	r0, 8003848 <HAL_RTC_Init+0x3c>
 8003840:	2304      	movs	r3, #4
 8003842:	7463      	strb	r3, [r4, #17]
 8003844:	2301      	movs	r3, #1
 8003846:	e040      	b.n	80038ca <HAL_RTC_Init+0xbe>
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	6853      	ldr	r3, [r2, #4]
 800384c:	f023 0307 	bic.w	r3, r3, #7
 8003850:	6053      	str	r3, [r2, #4]
 8003852:	68a3      	ldr	r3, [r4, #8]
 8003854:	b123      	cbz	r3, 8003860 <HAL_RTC_Init+0x54>
 8003856:	4a1e      	ldr	r2, [pc, #120]	; (80038d0 <HAL_RTC_Init+0xc4>)
 8003858:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	6313      	str	r3, [r2, #48]	; 0x30
 8003860:	491b      	ldr	r1, [pc, #108]	; (80038d0 <HAL_RTC_Init+0xc4>)
 8003862:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8003864:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003868:	68a3      	ldr	r3, [r4, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800386e:	6860      	ldr	r0, [r4, #4]
 8003870:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003874:	d108      	bne.n	8003888 <HAL_RTC_Init+0x7c>
 8003876:	2001      	movs	r0, #1
 8003878:	f7ff fd86 	bl	8003388 <HAL_RCCEx_GetPeriphCLKFreq>
 800387c:	b918      	cbnz	r0, 8003886 <HAL_RTC_Init+0x7a>
 800387e:	2304      	movs	r3, #4
 8003880:	7463      	strb	r3, [r4, #17]
 8003882:	2301      	movs	r3, #1
 8003884:	e021      	b.n	80038ca <HAL_RTC_Init+0xbe>
 8003886:	3801      	subs	r0, #1
 8003888:	6822      	ldr	r2, [r4, #0]
 800388a:	6893      	ldr	r3, [r2, #8]
 800388c:	f023 030f 	bic.w	r3, r3, #15
 8003890:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003894:	6093      	str	r3, [r2, #8]
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	68d3      	ldr	r3, [r2, #12]
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	b280      	uxth	r0, r0
 80038a0:	4318      	orrs	r0, r3
 80038a2:	60d0      	str	r0, [r2, #12]
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7ff fe81 	bl	80035ac <RTC_ExitInitMode>
 80038aa:	4603      	mov	r3, r0
 80038ac:	b118      	cbz	r0, 80038b6 <HAL_RTC_Init+0xaa>
 80038ae:	2304      	movs	r3, #4
 80038b0:	7463      	strb	r3, [r4, #17]
 80038b2:	2301      	movs	r3, #1
 80038b4:	e009      	b.n	80038ca <HAL_RTC_Init+0xbe>
 80038b6:	2200      	movs	r2, #0
 80038b8:	73e2      	strb	r2, [r4, #15]
 80038ba:	2201      	movs	r2, #1
 80038bc:	7362      	strb	r2, [r4, #13]
 80038be:	73a2      	strb	r2, [r4, #14]
 80038c0:	7462      	strb	r2, [r4, #17]
 80038c2:	e002      	b.n	80038ca <HAL_RTC_Init+0xbe>
 80038c4:	2301      	movs	r3, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	4770      	bx	lr
 80038ca:	4618      	mov	r0, r3
 80038cc:	bd10      	pop	{r4, pc}
 80038ce:	bf00      	nop
 80038d0:	40006c00 	.word	0x40006c00

080038d4 <HAL_RTCEx_RTCEventCallback>:
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop

080038d8 <HAL_RTCEx_RTCEventErrorCallback>:
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop

080038dc <HAL_RTCEx_RTCIRQHandler>:
 80038dc:	6803      	ldr	r3, [r0, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	f012 0f01 	tst.w	r2, #1
 80038e4:	d01b      	beq.n	800391e <HAL_RTCEx_RTCIRQHandler+0x42>
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	f012 0f01 	tst.w	r2, #1
 80038ec:	d017      	beq.n	800391e <HAL_RTCEx_RTCIRQHandler+0x42>
 80038ee:	b510      	push	{r4, lr}
 80038f0:	4604      	mov	r4, r0
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f013 0f04 	tst.w	r3, #4
 80038f8:	d008      	beq.n	800390c <HAL_RTCEx_RTCIRQHandler+0x30>
 80038fa:	f7ff ffed 	bl	80038d8 <HAL_RTCEx_RTCEventErrorCallback>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	f06f 0204 	mvn.w	r2, #4
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	2304      	movs	r3, #4
 8003908:	7463      	strb	r3, [r4, #17]
 800390a:	e003      	b.n	8003914 <HAL_RTCEx_RTCIRQHandler+0x38>
 800390c:	f7ff ffe2 	bl	80038d4 <HAL_RTCEx_RTCEventCallback>
 8003910:	2301      	movs	r3, #1
 8003912:	7463      	strb	r3, [r4, #17]
 8003914:	6823      	ldr	r3, [r4, #0]
 8003916:	f06f 0201 	mvn.w	r2, #1
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	bd10      	pop	{r4, pc}
 800391e:	4770      	bx	lr

08003920 <SPI_WaitFlagStateUntilTimeout>:
 8003920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003922:	4605      	mov	r5, r0
 8003924:	460f      	mov	r7, r1
 8003926:	4616      	mov	r6, r2
 8003928:	461c      	mov	r4, r3
 800392a:	e036      	b.n	800399a <SPI_WaitFlagStateUntilTimeout+0x7a>
 800392c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003930:	d033      	beq.n	800399a <SPI_WaitFlagStateUntilTimeout+0x7a>
 8003932:	b12c      	cbz	r4, 8003940 <SPI_WaitFlagStateUntilTimeout+0x20>
 8003934:	f7fd fa80 	bl	8000e38 <HAL_GetTick>
 8003938:	9b06      	ldr	r3, [sp, #24]
 800393a:	1ac0      	subs	r0, r0, r3
 800393c:	4284      	cmp	r4, r0
 800393e:	d82c      	bhi.n	800399a <SPI_WaitFlagStateUntilTimeout+0x7a>
 8003940:	682a      	ldr	r2, [r5, #0]
 8003942:	6853      	ldr	r3, [r2, #4]
 8003944:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003948:	6053      	str	r3, [r2, #4]
 800394a:	686b      	ldr	r3, [r5, #4]
 800394c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003950:	d10b      	bne.n	800396a <SPI_WaitFlagStateUntilTimeout+0x4a>
 8003952:	68ab      	ldr	r3, [r5, #8]
 8003954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003958:	d002      	beq.n	8003960 <SPI_WaitFlagStateUntilTimeout+0x40>
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d104      	bne.n	800396a <SPI_WaitFlagStateUntilTimeout+0x4a>
 8003960:	682a      	ldr	r2, [r5, #0]
 8003962:	6813      	ldr	r3, [r2, #0]
 8003964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800396c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003970:	d10b      	bne.n	800398a <SPI_WaitFlagStateUntilTimeout+0x6a>
 8003972:	682a      	ldr	r2, [r5, #0]
 8003974:	6813      	ldr	r3, [r2, #0]
 8003976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	682a      	ldr	r2, [r5, #0]
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	2301      	movs	r3, #1
 800398c:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
 8003990:	2300      	movs	r3, #0
 8003992:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8003996:	2003      	movs	r0, #3
 8003998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	ea37 0303 	bics.w	r3, r7, r3
 80039a2:	d101      	bne.n	80039a8 <SPI_WaitFlagStateUntilTimeout+0x88>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <SPI_WaitFlagStateUntilTimeout+0x8a>
 80039a8:	2300      	movs	r3, #0
 80039aa:	42b3      	cmp	r3, r6
 80039ac:	d1be      	bne.n	800392c <SPI_WaitFlagStateUntilTimeout+0xc>
 80039ae:	2000      	movs	r0, #0
 80039b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b2:	bf00      	nop

080039b4 <SPI_CheckFlag_BSY>:
 80039b4:	b510      	push	{r4, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	4604      	mov	r4, r0
 80039ba:	9200      	str	r2, [sp, #0]
 80039bc:	460b      	mov	r3, r1
 80039be:	2200      	movs	r2, #0
 80039c0:	2180      	movs	r1, #128	; 0x80
 80039c2:	f7ff ffad 	bl	8003920 <SPI_WaitFlagStateUntilTimeout>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b120      	cbz	r0, 80039d4 <SPI_CheckFlag_BSY+0x20>
 80039ca:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80039cc:	f043 0320 	orr.w	r3, r3, #32
 80039d0:	6563      	str	r3, [r4, #84]	; 0x54
 80039d2:	2303      	movs	r3, #3
 80039d4:	4618      	mov	r0, r3
 80039d6:	b002      	add	sp, #8
 80039d8:	bd10      	pop	{r4, pc}
 80039da:	bf00      	nop

080039dc <HAL_SPI_Transmit>:
 80039dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	461d      	mov	r5, r3
 80039e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	f000 80cb 	beq.w	8003b84 <HAL_SPI_Transmit+0x1a8>
 80039ee:	4604      	mov	r4, r0
 80039f0:	460e      	mov	r6, r1
 80039f2:	4690      	mov	r8, r2
 80039f4:	2301      	movs	r3, #1
 80039f6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 80039fa:	f7fd fa1d 	bl	8000e38 <HAL_GetTick>
 80039fe:	4607      	mov	r7, r0
 8003a00:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	f040 80a4 	bne.w	8003b54 <HAL_SPI_Transmit+0x178>
 8003a0c:	2e00      	cmp	r6, #0
 8003a0e:	f000 80a3 	beq.w	8003b58 <HAL_SPI_Transmit+0x17c>
 8003a12:	f1b8 0f00 	cmp.w	r8, #0
 8003a16:	f000 80a1 	beq.w	8003b5c <HAL_SPI_Transmit+0x180>
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8003a20:	2300      	movs	r3, #0
 8003a22:	6563      	str	r3, [r4, #84]	; 0x54
 8003a24:	6326      	str	r6, [r4, #48]	; 0x30
 8003a26:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
 8003a2a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
 8003a2e:	63a3      	str	r3, [r4, #56]	; 0x38
 8003a30:	87a3      	strh	r3, [r4, #60]	; 0x3c
 8003a32:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003a34:	6463      	str	r3, [r4, #68]	; 0x44
 8003a36:	6423      	str	r3, [r4, #64]	; 0x40
 8003a38:	68a3      	ldr	r3, [r4, #8]
 8003a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a3e:	d104      	bne.n	8003a4a <HAL_SPI_Transmit+0x6e>
 8003a40:	6822      	ldr	r2, [r4, #0]
 8003a42:	6813      	ldr	r3, [r2, #0]
 8003a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003a52:	d103      	bne.n	8003a5c <HAL_SPI_Transmit+0x80>
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	68e3      	ldr	r3, [r4, #12]
 8003a5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a62:	d12c      	bne.n	8003abe <HAL_SPI_Transmit+0xe2>
 8003a64:	6863      	ldr	r3, [r4, #4]
 8003a66:	b11b      	cbz	r3, 8003a70 <HAL_SPI_Transmit+0x94>
 8003a68:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d121      	bne.n	8003ab4 <HAL_SPI_Transmit+0xd8>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	f836 2b02 	ldrh.w	r2, [r6], #2
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003a82:	e017      	b.n	8003ab4 <HAL_SPI_Transmit+0xd8>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	f012 0f02 	tst.w	r2, #2
 8003a8c:	d008      	beq.n	8003aa0 <HAL_SPI_Transmit+0xc4>
 8003a8e:	f836 2b02 	ldrh.w	r2, [r6], #2
 8003a92:	60da      	str	r2, [r3, #12]
 8003a94:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003a9e:	e009      	b.n	8003ab4 <HAL_SPI_Transmit+0xd8>
 8003aa0:	2d00      	cmp	r5, #0
 8003aa2:	d05d      	beq.n	8003b60 <HAL_SPI_Transmit+0x184>
 8003aa4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003aa8:	d004      	beq.n	8003ab4 <HAL_SPI_Transmit+0xd8>
 8003aaa:	f7fd f9c5 	bl	8000e38 <HAL_GetTick>
 8003aae:	1bc0      	subs	r0, r0, r7
 8003ab0:	4285      	cmp	r5, r0
 8003ab2:	d957      	bls.n	8003b64 <HAL_SPI_Transmit+0x188>
 8003ab4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e3      	bne.n	8003a84 <HAL_SPI_Transmit+0xa8>
 8003abc:	e02b      	b.n	8003b16 <HAL_SPI_Transmit+0x13a>
 8003abe:	6863      	ldr	r3, [r4, #4]
 8003ac0:	b11b      	cbz	r3, 8003aca <HAL_SPI_Transmit+0xee>
 8003ac2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d121      	bne.n	8003b0e <HAL_SPI_Transmit+0x132>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003ad0:	731a      	strb	r2, [r3, #12]
 8003ad2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003adc:	e017      	b.n	8003b0e <HAL_SPI_Transmit+0x132>
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	f012 0f02 	tst.w	r2, #2
 8003ae6:	d008      	beq.n	8003afa <HAL_SPI_Transmit+0x11e>
 8003ae8:	f816 2b01 	ldrb.w	r2, [r6], #1
 8003aec:	731a      	strb	r2, [r3, #12]
 8003aee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003af8:	e009      	b.n	8003b0e <HAL_SPI_Transmit+0x132>
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	d034      	beq.n	8003b68 <HAL_SPI_Transmit+0x18c>
 8003afe:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003b02:	d004      	beq.n	8003b0e <HAL_SPI_Transmit+0x132>
 8003b04:	f7fd f998 	bl	8000e38 <HAL_GetTick>
 8003b08:	1bc0      	subs	r0, r0, r7
 8003b0a:	4285      	cmp	r5, r0
 8003b0c:	d92e      	bls.n	8003b6c <HAL_SPI_Transmit+0x190>
 8003b0e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1e3      	bne.n	8003ade <HAL_SPI_Transmit+0x102>
 8003b16:	9700      	str	r7, [sp, #0]
 8003b18:	462b      	mov	r3, r5
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff fefe 	bl	8003920 <SPI_WaitFlagStateUntilTimeout>
 8003b24:	bb20      	cbnz	r0, 8003b70 <HAL_SPI_Transmit+0x194>
 8003b26:	463a      	mov	r2, r7
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	f7ff ff42 	bl	80039b4 <SPI_CheckFlag_BSY>
 8003b30:	b118      	cbz	r0, 8003b3a <HAL_SPI_Transmit+0x15e>
 8003b32:	2320      	movs	r3, #32
 8003b34:	6563      	str	r3, [r4, #84]	; 0x54
 8003b36:	2001      	movs	r0, #1
 8003b38:	e01d      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	b933      	cbnz	r3, 8003b4c <HAL_SPI_Transmit+0x170>
 8003b3e:	9303      	str	r3, [sp, #12]
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	9203      	str	r2, [sp, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	9303      	str	r3, [sp, #12]
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b4e:	b98b      	cbnz	r3, 8003b74 <HAL_SPI_Transmit+0x198>
 8003b50:	2000      	movs	r0, #0
 8003b52:	e010      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b54:	2002      	movs	r0, #2
 8003b56:	e00e      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b58:	2001      	movs	r0, #1
 8003b5a:	e00c      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	e00a      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b60:	2003      	movs	r0, #3
 8003b62:	e008      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b64:	2003      	movs	r0, #3
 8003b66:	e006      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b68:	2003      	movs	r0, #3
 8003b6a:	e004      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b6c:	2003      	movs	r0, #3
 8003b6e:	e002      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b70:	2003      	movs	r0, #3
 8003b72:	e000      	b.n	8003b76 <HAL_SPI_Transmit+0x19a>
 8003b74:	2001      	movs	r0, #1
 8003b76:	2301      	movs	r3, #1
 8003b78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003b82:	e000      	b.n	8003b86 <HAL_SPI_Transmit+0x1aa>
 8003b84:	2002      	movs	r0, #2
 8003b86:	b004      	add	sp, #16
 8003b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003b8c <HAL_SPI_ErrorCallback>:
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop

08003b90 <HAL_SPI_IRQHandler>:
 8003b90:	b510      	push	{r4, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	4604      	mov	r4, r0
 8003b96:	6802      	ldr	r2, [r0, #0]
 8003b98:	6851      	ldr	r1, [r2, #4]
 8003b9a:	6893      	ldr	r3, [r2, #8]
 8003b9c:	f003 0041 	and.w	r0, r3, #65	; 0x41
 8003ba0:	2801      	cmp	r0, #1
 8003ba2:	d106      	bne.n	8003bb2 <HAL_SPI_IRQHandler+0x22>
 8003ba4:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003ba8:	d003      	beq.n	8003bb2 <HAL_SPI_IRQHandler+0x22>
 8003baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bac:	4620      	mov	r0, r4
 8003bae:	4798      	blx	r3
 8003bb0:	e05f      	b.n	8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003bb2:	f013 0f02 	tst.w	r3, #2
 8003bb6:	d006      	beq.n	8003bc6 <HAL_SPI_IRQHandler+0x36>
 8003bb8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003bbc:	d003      	beq.n	8003bc6 <HAL_SPI_IRQHandler+0x36>
 8003bbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4798      	blx	r3
 8003bc4:	e055      	b.n	8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003bc6:	f013 0f60 	tst.w	r3, #96	; 0x60
 8003bca:	d052      	beq.n	8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003bcc:	f011 0f20 	tst.w	r1, #32
 8003bd0:	d04f      	beq.n	8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003bd2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003bd6:	d018      	beq.n	8003c0a <HAL_SPI_IRQHandler+0x7a>
 8003bd8:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8003bdc:	b2c0      	uxtb	r0, r0
 8003bde:	2803      	cmp	r0, #3
 8003be0:	d00b      	beq.n	8003bfa <HAL_SPI_IRQHandler+0x6a>
 8003be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003be4:	f040 0004 	orr.w	r0, r0, #4
 8003be8:	6560      	str	r0, [r4, #84]	; 0x54
 8003bea:	2000      	movs	r0, #0
 8003bec:	9001      	str	r0, [sp, #4]
 8003bee:	68d0      	ldr	r0, [r2, #12]
 8003bf0:	9001      	str	r0, [sp, #4]
 8003bf2:	6890      	ldr	r0, [r2, #8]
 8003bf4:	9001      	str	r0, [sp, #4]
 8003bf6:	9801      	ldr	r0, [sp, #4]
 8003bf8:	e007      	b.n	8003c0a <HAL_SPI_IRQHandler+0x7a>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9302      	str	r3, [sp, #8]
 8003bfe:	68d3      	ldr	r3, [r2, #12]
 8003c00:	9302      	str	r3, [sp, #8]
 8003c02:	6893      	ldr	r3, [r2, #8]
 8003c04:	9302      	str	r3, [sp, #8]
 8003c06:	9b02      	ldr	r3, [sp, #8]
 8003c08:	e033      	b.n	8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003c0a:	f013 0f20 	tst.w	r3, #32
 8003c0e:	d00c      	beq.n	8003c2a <HAL_SPI_IRQHandler+0x9a>
 8003c10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	6563      	str	r3, [r4, #84]	; 0x54
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	6893      	ldr	r3, [r2, #8]
 8003c1e:	9303      	str	r3, [sp, #12]
 8003c20:	6813      	ldr	r3, [r2, #0]
 8003c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c26:	6013      	str	r3, [r2, #0]
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c2c:	b30b      	cbz	r3, 8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	6853      	ldr	r3, [r2, #4]
 8003c32:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003c36:	6053      	str	r3, [r2, #4]
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8003c3e:	f011 0f03 	tst.w	r1, #3
 8003c42:	d013      	beq.n	8003c6c <HAL_SPI_IRQHandler+0xdc>
 8003c44:	6822      	ldr	r2, [r4, #0]
 8003c46:	6853      	ldr	r3, [r2, #4]
 8003c48:	f023 0303 	bic.w	r3, r3, #3
 8003c4c:	6053      	str	r3, [r2, #4]
 8003c4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c50:	b123      	cbz	r3, 8003c5c <HAL_SPI_IRQHandler+0xcc>
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_SPI_IRQHandler+0xe8>)
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34
 8003c56:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003c58:	f7fd fac6 	bl	80011e8 <HAL_DMA_Abort_IT>
 8003c5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003c5e:	b143      	cbz	r3, 8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <HAL_SPI_IRQHandler+0xe8>)
 8003c62:	635a      	str	r2, [r3, #52]	; 0x34
 8003c64:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003c66:	f7fd fabf 	bl	80011e8 <HAL_DMA_Abort_IT>
 8003c6a:	e002      	b.n	8003c72 <HAL_SPI_IRQHandler+0xe2>
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7ff ff8d 	bl	8003b8c <HAL_SPI_ErrorCallback>
 8003c72:	b004      	add	sp, #16
 8003c74:	bd10      	pop	{r4, pc}
 8003c76:	bf00      	nop
 8003c78:	08003c7d 	.word	0x08003c7d

08003c7c <SPI_DMAAbortOnError>:
 8003c7c:	b508      	push	{r3, lr}
 8003c7e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8003c80:	2300      	movs	r3, #0
 8003c82:	87c3      	strh	r3, [r0, #62]	; 0x3e
 8003c84:	86c3      	strh	r3, [r0, #54]	; 0x36
 8003c86:	f7ff ff81 	bl	8003b8c <HAL_SPI_ErrorCallback>
 8003c8a:	bd08      	pop	{r3, pc}

08003c8c <HAL_SPI_GetState>:
 8003c8c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop

08003c94 <HAL_SPI_Init>:
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d03c      	beq.n	8003d12 <HAL_SPI_Init+0x7e>
 8003c98:	b510      	push	{r4, lr}
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6283      	str	r3, [r0, #40]	; 0x28
 8003ca0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003ca4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003ca8:	d101      	bne.n	8003cae <HAL_SPI_Init+0x1a>
 8003caa:	f002 fa31 	bl	8006110 <HAL_SPI_MspInit>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8003cb4:	6822      	ldr	r2, [r4, #0]
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	6821      	ldr	r1, [r4, #0]
 8003cc0:	6862      	ldr	r2, [r4, #4]
 8003cc2:	68a3      	ldr	r3, [r4, #8]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68e3      	ldr	r3, [r4, #12]
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	6963      	ldr	r3, [r4, #20]
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	69a3      	ldr	r3, [r4, #24]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	69e2      	ldr	r2, [r4, #28]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	6a22      	ldr	r2, [r4, #32]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	600a      	str	r2, [r1, #0]
 8003ce8:	6821      	ldr	r1, [r4, #0]
 8003cea:	8b63      	ldrh	r3, [r4, #26]
 8003cec:	f003 0204 	and.w	r2, r3, #4
 8003cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	604b      	str	r3, [r1, #4]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003cfa:	611a      	str	r2, [r3, #16]
 8003cfc:	6822      	ldr	r2, [r4, #0]
 8003cfe:	69d3      	ldr	r3, [r2, #28]
 8003d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d04:	61d3      	str	r3, [r2, #28]
 8003d06:	2000      	movs	r0, #0
 8003d08:	6560      	str	r0, [r4, #84]	; 0x54
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	2001      	movs	r0, #1
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop

08003d18 <TIM_TI1_ConfigInputStage>:
 8003d18:	b410      	push	{r4}
 8003d1a:	6a03      	ldr	r3, [r0, #32]
 8003d1c:	6a04      	ldr	r4, [r0, #32]
 8003d1e:	f024 0401 	bic.w	r4, r4, #1
 8003d22:	6204      	str	r4, [r0, #32]
 8003d24:	6984      	ldr	r4, [r0, #24]
 8003d26:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8003d2a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
 8003d2e:	f023 030a 	bic.w	r3, r3, #10
 8003d32:	4319      	orrs	r1, r3
 8003d34:	6182      	str	r2, [r0, #24]
 8003d36:	6201      	str	r1, [r0, #32]
 8003d38:	bc10      	pop	{r4}
 8003d3a:	4770      	bx	lr

08003d3c <TIM_TI2_ConfigInputStage>:
 8003d3c:	b410      	push	{r4}
 8003d3e:	6a03      	ldr	r3, [r0, #32]
 8003d40:	f023 0310 	bic.w	r3, r3, #16
 8003d44:	6203      	str	r3, [r0, #32]
 8003d46:	6984      	ldr	r4, [r0, #24]
 8003d48:	6a03      	ldr	r3, [r0, #32]
 8003d4a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
 8003d4e:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
 8003d52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d56:	ea43 1101 	orr.w	r1, r3, r1, lsl #4
 8003d5a:	6182      	str	r2, [r0, #24]
 8003d5c:	6201      	str	r1, [r0, #32]
 8003d5e:	bc10      	pop	{r4}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop

08003d64 <TIM_ITRx_SetConfig>:
 8003d64:	6883      	ldr	r3, [r0, #8]
 8003d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d6a:	f041 0107 	orr.w	r1, r1, #7
 8003d6e:	430b      	orrs	r3, r1
 8003d70:	6083      	str	r3, [r0, #8]
 8003d72:	4770      	bx	lr

08003d74 <TIM_ETR_SetConfig>:
 8003d74:	b410      	push	{r4}
 8003d76:	6884      	ldr	r4, [r0, #8]
 8003d78:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8003d7c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8003d80:	4319      	orrs	r1, r3
 8003d82:	ea44 0301 	orr.w	r3, r4, r1
 8003d86:	6083      	str	r3, [r0, #8]
 8003d88:	bc10      	pop	{r4}
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIM_Base_Start>:
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003d92:	6802      	ldr	r2, [r0, #0]
 8003d94:	6813      	ldr	r3, [r2, #0]
 8003d96:	f043 0301 	orr.w	r3, r3, #1
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003da2:	2000      	movs	r0, #0
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop

08003da8 <HAL_TIM_Base_Stop>:
 8003da8:	2302      	movs	r3, #2
 8003daa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003dae:	6803      	ldr	r3, [r0, #0]
 8003db0:	6a19      	ldr	r1, [r3, #32]
 8003db2:	f241 1211 	movw	r2, #4369	; 0x1111
 8003db6:	4211      	tst	r1, r2
 8003db8:	d108      	bne.n	8003dcc <HAL_TIM_Base_Stop+0x24>
 8003dba:	6a19      	ldr	r1, [r3, #32]
 8003dbc:	f240 4244 	movw	r2, #1092	; 0x444
 8003dc0:	4211      	tst	r1, r2
 8003dc2:	d103      	bne.n	8003dcc <HAL_TIM_Base_Stop+0x24>
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop

08003dd8 <HAL_TIM_ConfigClockSource>:
 8003dd8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	f000 8083 	beq.w	8003ee8 <HAL_TIM_ConfigClockSource+0x110>
 8003de2:	b510      	push	{r4, lr}
 8003de4:	4604      	mov	r4, r0
 8003de6:	2301      	movs	r3, #1
 8003de8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003dec:	2302      	movs	r3, #2
 8003dee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003df2:	6802      	ldr	r2, [r0, #0]
 8003df4:	6893      	ldr	r3, [r2, #8]
 8003df6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003dfe:	6093      	str	r3, [r2, #8]
 8003e00:	680b      	ldr	r3, [r1, #0]
 8003e02:	2b40      	cmp	r3, #64	; 0x40
 8003e04:	d04c      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0xc8>
 8003e06:	d80a      	bhi.n	8003e1e <HAL_TIM_ConfigClockSource+0x46>
 8003e08:	2b10      	cmp	r3, #16
 8003e0a:	d058      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xe6>
 8003e0c:	d802      	bhi.n	8003e14 <HAL_TIM_ConfigClockSource+0x3c>
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d050      	beq.n	8003eb4 <HAL_TIM_ConfigClockSource+0xdc>
 8003e12:	e062      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	d057      	beq.n	8003ec8 <HAL_TIM_ConfigClockSource+0xf0>
 8003e18:	2b30      	cmp	r3, #48	; 0x30
 8003e1a:	d05a      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e1c:	e05d      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e1e:	2b70      	cmp	r3, #112	; 0x70
 8003e20:	d012      	beq.n	8003e48 <HAL_TIM_ConfigClockSource+0x70>
 8003e22:	d804      	bhi.n	8003e2e <HAL_TIM_ConfigClockSource+0x56>
 8003e24:	2b50      	cmp	r3, #80	; 0x50
 8003e26:	d027      	beq.n	8003e78 <HAL_TIM_ConfigClockSource+0xa0>
 8003e28:	2b60      	cmp	r3, #96	; 0x60
 8003e2a:	d02f      	beq.n	8003e8c <HAL_TIM_ConfigClockSource+0xb4>
 8003e2c:	e055      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e32:	d003      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0x64>
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e38:	d012      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0x88>
 8003e3a:	e04e      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e3c:	6802      	ldr	r2, [r0, #0]
 8003e3e:	6893      	ldr	r3, [r2, #8]
 8003e40:	f023 0307 	bic.w	r3, r3, #7
 8003e44:	6093      	str	r3, [r2, #8]
 8003e46:	e048      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e48:	68cb      	ldr	r3, [r1, #12]
 8003e4a:	684a      	ldr	r2, [r1, #4]
 8003e4c:	6889      	ldr	r1, [r1, #8]
 8003e4e:	6800      	ldr	r0, [r0, #0]
 8003e50:	f7ff ff90 	bl	8003d74 <TIM_ETR_SetConfig>
 8003e54:	6822      	ldr	r2, [r4, #0]
 8003e56:	6893      	ldr	r3, [r2, #8]
 8003e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e5c:	6093      	str	r3, [r2, #8]
 8003e5e:	e03c      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e60:	68cb      	ldr	r3, [r1, #12]
 8003e62:	684a      	ldr	r2, [r1, #4]
 8003e64:	6889      	ldr	r1, [r1, #8]
 8003e66:	6800      	ldr	r0, [r0, #0]
 8003e68:	f7ff ff84 	bl	8003d74 <TIM_ETR_SetConfig>
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	6893      	ldr	r3, [r2, #8]
 8003e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e74:	6093      	str	r3, [r2, #8]
 8003e76:	e030      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e78:	68ca      	ldr	r2, [r1, #12]
 8003e7a:	6849      	ldr	r1, [r1, #4]
 8003e7c:	6800      	ldr	r0, [r0, #0]
 8003e7e:	f7ff ff4b 	bl	8003d18 <TIM_TI1_ConfigInputStage>
 8003e82:	2150      	movs	r1, #80	; 0x50
 8003e84:	6820      	ldr	r0, [r4, #0]
 8003e86:	f7ff ff6d 	bl	8003d64 <TIM_ITRx_SetConfig>
 8003e8a:	e026      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003e8c:	68ca      	ldr	r2, [r1, #12]
 8003e8e:	6849      	ldr	r1, [r1, #4]
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	f7ff ff53 	bl	8003d3c <TIM_TI2_ConfigInputStage>
 8003e96:	2160      	movs	r1, #96	; 0x60
 8003e98:	6820      	ldr	r0, [r4, #0]
 8003e9a:	f7ff ff63 	bl	8003d64 <TIM_ITRx_SetConfig>
 8003e9e:	e01c      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003ea0:	68ca      	ldr	r2, [r1, #12]
 8003ea2:	6849      	ldr	r1, [r1, #4]
 8003ea4:	6800      	ldr	r0, [r0, #0]
 8003ea6:	f7ff ff37 	bl	8003d18 <TIM_TI1_ConfigInputStage>
 8003eaa:	2140      	movs	r1, #64	; 0x40
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	f7ff ff59 	bl	8003d64 <TIM_ITRx_SetConfig>
 8003eb2:	e012      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	6800      	ldr	r0, [r0, #0]
 8003eb8:	f7ff ff54 	bl	8003d64 <TIM_ITRx_SetConfig>
 8003ebc:	e00d      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003ebe:	2110      	movs	r1, #16
 8003ec0:	6800      	ldr	r0, [r0, #0]
 8003ec2:	f7ff ff4f 	bl	8003d64 <TIM_ITRx_SetConfig>
 8003ec6:	e008      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003ec8:	2120      	movs	r1, #32
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	f7ff ff4a 	bl	8003d64 <TIM_ITRx_SetConfig>
 8003ed0:	e003      	b.n	8003eda <HAL_TIM_ConfigClockSource+0x102>
 8003ed2:	2130      	movs	r1, #48	; 0x30
 8003ed4:	6800      	ldr	r0, [r0, #0]
 8003ed6:	f7ff ff45 	bl	8003d64 <TIM_ITRx_SetConfig>
 8003eda:	2301      	movs	r3, #1
 8003edc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003ee6:	bd10      	pop	{r4, pc}
 8003ee8:	2002      	movs	r0, #2
 8003eea:	4770      	bx	lr

08003eec <TIM_Base_SetConfig>:
 8003eec:	6803      	ldr	r3, [r0, #0]
 8003eee:	4a1a      	ldr	r2, [pc, #104]	; (8003f58 <TIM_Base_SetConfig+0x6c>)
 8003ef0:	4290      	cmp	r0, r2
 8003ef2:	d00a      	beq.n	8003f0a <TIM_Base_SetConfig+0x1e>
 8003ef4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003ef8:	d007      	beq.n	8003f0a <TIM_Base_SetConfig+0x1e>
 8003efa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003efe:	4290      	cmp	r0, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_Base_SetConfig+0x1e>
 8003f02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f06:	4290      	cmp	r0, r2
 8003f08:	d103      	bne.n	8003f12 <TIM_Base_SetConfig+0x26>
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	684a      	ldr	r2, [r1, #4]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	4a11      	ldr	r2, [pc, #68]	; (8003f58 <TIM_Base_SetConfig+0x6c>)
 8003f14:	4290      	cmp	r0, r2
 8003f16:	d00a      	beq.n	8003f2e <TIM_Base_SetConfig+0x42>
 8003f18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003f1c:	d007      	beq.n	8003f2e <TIM_Base_SetConfig+0x42>
 8003f1e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f22:	4290      	cmp	r0, r2
 8003f24:	d003      	beq.n	8003f2e <TIM_Base_SetConfig+0x42>
 8003f26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f2a:	4290      	cmp	r0, r2
 8003f2c:	d103      	bne.n	8003f36 <TIM_Base_SetConfig+0x4a>
 8003f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f32:	68ca      	ldr	r2, [r1, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3a:	694a      	ldr	r2, [r1, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	6003      	str	r3, [r0, #0]
 8003f40:	688b      	ldr	r3, [r1, #8]
 8003f42:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003f44:	680b      	ldr	r3, [r1, #0]
 8003f46:	6283      	str	r3, [r0, #40]	; 0x28
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <TIM_Base_SetConfig+0x6c>)
 8003f4a:	4298      	cmp	r0, r3
 8003f4c:	d101      	bne.n	8003f52 <TIM_Base_SetConfig+0x66>
 8003f4e:	690b      	ldr	r3, [r1, #16]
 8003f50:	6303      	str	r3, [r0, #48]	; 0x30
 8003f52:	2301      	movs	r3, #1
 8003f54:	6143      	str	r3, [r0, #20]
 8003f56:	4770      	bx	lr
 8003f58:	40012c00 	.word	0x40012c00

08003f5c <HAL_TIM_Base_Init>:
 8003f5c:	b1b8      	cbz	r0, 8003f8e <HAL_TIM_Base_Init+0x32>
 8003f5e:	b510      	push	{r4, lr}
 8003f60:	4604      	mov	r4, r0
 8003f62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f66:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_Base_Init+0x1a>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003f72:	f002 f911 	bl	8006198 <HAL_TIM_Base_MspInit>
 8003f76:	2302      	movs	r3, #2
 8003f78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003f7c:	1d21      	adds	r1, r4, #4
 8003f7e:	6820      	ldr	r0, [r4, #0]
 8003f80:	f7ff ffb4 	bl	8003eec <TIM_Base_SetConfig>
 8003f84:	2301      	movs	r3, #1
 8003f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	2001      	movs	r0, #1
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop

08003f94 <HAL_TIMEx_MasterConfigSynchronization>:
 8003f94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d021      	beq.n	8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f9c:	b430      	push	{r4, r5}
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003faa:	6804      	ldr	r4, [r0, #0]
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	6063      	str	r3, [r4, #4]
 8003fb4:	6804      	ldr	r4, [r0, #0]
 8003fb6:	6865      	ldr	r5, [r4, #4]
 8003fb8:	680b      	ldr	r3, [r1, #0]
 8003fba:	432b      	orrs	r3, r5
 8003fbc:	6063      	str	r3, [r4, #4]
 8003fbe:	6804      	ldr	r4, [r0, #0]
 8003fc0:	68a3      	ldr	r3, [r4, #8]
 8003fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fc6:	60a3      	str	r3, [r4, #8]
 8003fc8:	6804      	ldr	r4, [r0, #0]
 8003fca:	68a5      	ldr	r5, [r4, #8]
 8003fcc:	684b      	ldr	r3, [r1, #4]
 8003fce:	432b      	orrs	r3, r5
 8003fd0:	60a3      	str	r3, [r4, #8]
 8003fd2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003fdc:	4618      	mov	r0, r3
 8003fde:	e001      	b.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8003fe0:	2002      	movs	r0, #2
 8003fe2:	4770      	bx	lr
 8003fe4:	bc30      	pop	{r4, r5}
 8003fe6:	4770      	bx	lr

08003fe8 <UART_EndRxTransfer>:
 8003fe8:	6802      	ldr	r2, [r0, #0]
 8003fea:	68d3      	ldr	r3, [r2, #12]
 8003fec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ff0:	60d3      	str	r3, [r2, #12]
 8003ff2:	6802      	ldr	r2, [r0, #0]
 8003ff4:	6953      	ldr	r3, [r2, #20]
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	6153      	str	r3, [r2, #20]
 8003ffc:	2320      	movs	r3, #32
 8003ffe:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8004002:	4770      	bx	lr

08004004 <UART_Transmit_IT>:
 8004004:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b21      	cmp	r3, #33	; 0x21
 800400c:	d12b      	bne.n	8004066 <UART_Transmit_IT+0x62>
 800400e:	6883      	ldr	r3, [r0, #8]
 8004010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004014:	d10f      	bne.n	8004036 <UART_Transmit_IT+0x32>
 8004016:	6a03      	ldr	r3, [r0, #32]
 8004018:	6802      	ldr	r2, [r0, #0]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	6053      	str	r3, [r2, #4]
 8004022:	6903      	ldr	r3, [r0, #16]
 8004024:	b91b      	cbnz	r3, 800402e <UART_Transmit_IT+0x2a>
 8004026:	6a03      	ldr	r3, [r0, #32]
 8004028:	3302      	adds	r3, #2
 800402a:	6203      	str	r3, [r0, #32]
 800402c:	e009      	b.n	8004042 <UART_Transmit_IT+0x3e>
 800402e:	6a03      	ldr	r3, [r0, #32]
 8004030:	3301      	adds	r3, #1
 8004032:	6203      	str	r3, [r0, #32]
 8004034:	e005      	b.n	8004042 <UART_Transmit_IT+0x3e>
 8004036:	6802      	ldr	r2, [r0, #0]
 8004038:	6a03      	ldr	r3, [r0, #32]
 800403a:	1c59      	adds	r1, r3, #1
 800403c:	6201      	str	r1, [r0, #32]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	6053      	str	r3, [r2, #4]
 8004042:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	84c3      	strh	r3, [r0, #38]	; 0x26
 800404c:	b96b      	cbnz	r3, 800406a <UART_Transmit_IT+0x66>
 800404e:	6802      	ldr	r2, [r0, #0]
 8004050:	68d3      	ldr	r3, [r2, #12]
 8004052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004056:	60d3      	str	r3, [r2, #12]
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	68d3      	ldr	r3, [r2, #12]
 800405c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004060:	60d3      	str	r3, [r2, #12]
 8004062:	2000      	movs	r0, #0
 8004064:	4770      	bx	lr
 8004066:	2002      	movs	r0, #2
 8004068:	4770      	bx	lr
 800406a:	2000      	movs	r0, #0
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop

08004070 <UART_SetConfig>:
 8004070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004074:	4681      	mov	r9, r0
 8004076:	6801      	ldr	r1, [r0, #0]
 8004078:	690b      	ldr	r3, [r1, #16]
 800407a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800407e:	68c3      	ldr	r3, [r0, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	610b      	str	r3, [r1, #16]
 8004084:	6881      	ldr	r1, [r0, #8]
 8004086:	6903      	ldr	r3, [r0, #16]
 8004088:	4319      	orrs	r1, r3
 800408a:	6943      	ldr	r3, [r0, #20]
 800408c:	4319      	orrs	r1, r3
 800408e:	6800      	ldr	r0, [r0, #0]
 8004090:	68c2      	ldr	r2, [r0, #12]
 8004092:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 8004096:	f023 030c 	bic.w	r3, r3, #12
 800409a:	430b      	orrs	r3, r1
 800409c:	60c3      	str	r3, [r0, #12]
 800409e:	f8d9 1000 	ldr.w	r1, [r9]
 80040a2:	694b      	ldr	r3, [r1, #20]
 80040a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a8:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	614b      	str	r3, [r1, #20]
 80040b0:	f8d9 5000 	ldr.w	r5, [r9]
 80040b4:	4b5b      	ldr	r3, [pc, #364]	; (8004224 <UART_SetConfig+0x1b4>)
 80040b6:	429d      	cmp	r5, r3
 80040b8:	d159      	bne.n	800416e <UART_SetConfig+0xfe>
 80040ba:	f7ff f8cb 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80040be:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040c6:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80040ca:	00a4      	lsls	r4, r4, #2
 80040cc:	fbb0 f4f4 	udiv	r4, r0, r4
 80040d0:	4e55      	ldr	r6, [pc, #340]	; (8004228 <UART_SetConfig+0x1b8>)
 80040d2:	fba6 3404 	umull	r3, r4, r6, r4
 80040d6:	0964      	lsrs	r4, r4, #5
 80040d8:	0124      	lsls	r4, r4, #4
 80040da:	f7ff f8bb 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80040de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	fbb0 f7f3 	udiv	r7, r0, r3
 80040f0:	f7ff f8b0 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80040f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040f8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80040fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	fbb0 f3f3 	udiv	r3, r0, r3
 8004106:	fba6 2303 	umull	r2, r3, r6, r3
 800410a:	095b      	lsrs	r3, r3, #5
 800410c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8004110:	fb08 7313 	mls	r3, r8, r3, r7
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	3332      	adds	r3, #50	; 0x32
 8004118:	fba6 2303 	umull	r2, r3, r6, r3
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004122:	441c      	add	r4, r3
 8004124:	f7ff f896 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8004128:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800412c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004130:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	fbb0 f7f3 	udiv	r7, r0, r3
 800413a:	f7ff f88b 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 800413e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004142:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004146:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004150:	fba6 2303 	umull	r2, r3, r6, r3
 8004154:	095b      	lsrs	r3, r3, #5
 8004156:	fb08 7313 	mls	r3, r8, r3, r7
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	3332      	adds	r3, #50	; 0x32
 800415e:	fba6 2303 	umull	r2, r3, r6, r3
 8004162:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8004166:	441c      	add	r4, r3
 8004168:	60ac      	str	r4, [r5, #8]
 800416a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416e:	f7ff f861 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8004172:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004176:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800417a:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800417e:	00a4      	lsls	r4, r4, #2
 8004180:	fbb0 f4f4 	udiv	r4, r0, r4
 8004184:	4e28      	ldr	r6, [pc, #160]	; (8004228 <UART_SetConfig+0x1b8>)
 8004186:	fba6 3404 	umull	r3, r4, r6, r4
 800418a:	0964      	lsrs	r4, r4, #5
 800418c:	0124      	lsls	r4, r4, #4
 800418e:	f7ff f851 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 8004192:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004196:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800419a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	fbb0 f7f3 	udiv	r7, r0, r3
 80041a4:	f7ff f846 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 80041a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	fba6 2303 	umull	r2, r3, r6, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	f04f 0864 	mov.w	r8, #100	; 0x64
 80041c4:	fb08 7313 	mls	r3, r8, r3, r7
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	3332      	adds	r3, #50	; 0x32
 80041cc:	fba6 2303 	umull	r2, r3, r6, r3
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041d6:	441c      	add	r4, r3
 80041d8:	f7ff f82c 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 80041dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	fbb0 f7f3 	udiv	r7, r0, r3
 80041ee:	f7ff f821 	bl	8003234 <HAL_RCC_GetPCLK1Freq>
 80041f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80041fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fbb0 f3f3 	udiv	r3, r0, r3
 8004204:	fba6 2303 	umull	r2, r3, r6, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	fb08 7313 	mls	r3, r8, r3, r7
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	3332      	adds	r3, #50	; 0x32
 8004212:	fba6 2303 	umull	r2, r3, r6, r3
 8004216:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800421a:	441c      	add	r4, r3
 800421c:	60ac      	str	r4, [r5, #8]
 800421e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004222:	bf00      	nop
 8004224:	40013800 	.word	0x40013800
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <UART_WaitOnFlagUntilTimeout>:
 800422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004230:	4605      	mov	r5, r0
 8004232:	460f      	mov	r7, r1
 8004234:	4616      	mov	r6, r2
 8004236:	4698      	mov	r8, r3
 8004238:	9c06      	ldr	r4, [sp, #24]
 800423a:	e01e      	b.n	800427a <UART_WaitOnFlagUntilTimeout+0x4e>
 800423c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004240:	d01b      	beq.n	800427a <UART_WaitOnFlagUntilTimeout+0x4e>
 8004242:	b12c      	cbz	r4, 8004250 <UART_WaitOnFlagUntilTimeout+0x24>
 8004244:	f7fc fdf8 	bl	8000e38 <HAL_GetTick>
 8004248:	ebc8 0000 	rsb	r0, r8, r0
 800424c:	4284      	cmp	r4, r0
 800424e:	d214      	bcs.n	800427a <UART_WaitOnFlagUntilTimeout+0x4e>
 8004250:	682a      	ldr	r2, [r5, #0]
 8004252:	68d3      	ldr	r3, [r2, #12]
 8004254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004258:	60d3      	str	r3, [r2, #12]
 800425a:	682a      	ldr	r2, [r5, #0]
 800425c:	6953      	ldr	r3, [r2, #20]
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6153      	str	r3, [r2, #20]
 8004264:	2320      	movs	r3, #32
 8004266:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
 800426a:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
 800426e:	2300      	movs	r3, #0
 8004270:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8004274:	2003      	movs	r0, #3
 8004276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	ea37 0303 	bics.w	r3, r7, r3
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	42b3      	cmp	r3, r6
 800428a:	d0d7      	beq.n	800423c <UART_WaitOnFlagUntilTimeout+0x10>
 800428c:	2000      	movs	r0, #0
 800428e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004292:	bf00      	nop

08004294 <HAL_UART_Init>:
 8004294:	b368      	cbz	r0, 80042f2 <HAL_UART_Init+0x5e>
 8004296:	b510      	push	{r4, lr}
 8004298:	4604      	mov	r4, r0
 800429a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800429e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80042a2:	d104      	bne.n	80042ae <HAL_UART_Init+0x1a>
 80042a4:	2300      	movs	r3, #0
 80042a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80042aa:	f001 ff89 	bl	80061c0 <HAL_UART_MspInit>
 80042ae:	2324      	movs	r3, #36	; 0x24
 80042b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80042b4:	6822      	ldr	r2, [r4, #0]
 80042b6:	68d3      	ldr	r3, [r2, #12]
 80042b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042bc:	60d3      	str	r3, [r2, #12]
 80042be:	4620      	mov	r0, r4
 80042c0:	f7ff fed6 	bl	8004070 <UART_SetConfig>
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	6913      	ldr	r3, [r2, #16]
 80042c8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80042cc:	6113      	str	r3, [r2, #16]
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	6953      	ldr	r3, [r2, #20]
 80042d2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80042d6:	6153      	str	r3, [r2, #20]
 80042d8:	6822      	ldr	r2, [r4, #0]
 80042da:	68d3      	ldr	r3, [r2, #12]
 80042dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042e0:	60d3      	str	r3, [r2, #12]
 80042e2:	2000      	movs	r0, #0
 80042e4:	63e0      	str	r0, [r4, #60]	; 0x3c
 80042e6:	2320      	movs	r3, #32
 80042e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80042ec:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80042f0:	bd10      	pop	{r4, pc}
 80042f2:	2001      	movs	r0, #1
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop

080042f8 <HAL_UART_Transmit>:
 80042f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042fc:	b082      	sub	sp, #8
 80042fe:	461e      	mov	r6, r3
 8004300:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b20      	cmp	r3, #32
 8004308:	d156      	bne.n	80043b8 <HAL_UART_Transmit+0xc0>
 800430a:	4604      	mov	r4, r0
 800430c:	460d      	mov	r5, r1
 800430e:	4690      	mov	r8, r2
 8004310:	2900      	cmp	r1, #0
 8004312:	d053      	beq.n	80043bc <HAL_UART_Transmit+0xc4>
 8004314:	2a00      	cmp	r2, #0
 8004316:	d053      	beq.n	80043c0 <HAL_UART_Transmit+0xc8>
 8004318:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800431c:	2b01      	cmp	r3, #1
 800431e:	d051      	beq.n	80043c4 <HAL_UART_Transmit+0xcc>
 8004320:	2301      	movs	r3, #1
 8004322:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8004326:	2300      	movs	r3, #0
 8004328:	63c3      	str	r3, [r0, #60]	; 0x3c
 800432a:	2321      	movs	r3, #33	; 0x21
 800432c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 8004330:	f7fc fd82 	bl	8000e38 <HAL_GetTick>
 8004334:	4607      	mov	r7, r0
 8004336:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
 800433a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
 800433e:	e027      	b.n	8004390 <HAL_UART_Transmit+0x98>
 8004340:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29b      	uxth	r3, r3
 8004348:	84e3      	strh	r3, [r4, #38]	; 0x26
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004350:	d112      	bne.n	8004378 <HAL_UART_Transmit+0x80>
 8004352:	9600      	str	r6, [sp, #0]
 8004354:	463b      	mov	r3, r7
 8004356:	2200      	movs	r2, #0
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff ff66 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 8004360:	bb90      	cbnz	r0, 80043c8 <HAL_UART_Transmit+0xd0>
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	882b      	ldrh	r3, [r5, #0]
 8004366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436a:	6053      	str	r3, [r2, #4]
 800436c:	6923      	ldr	r3, [r4, #16]
 800436e:	b90b      	cbnz	r3, 8004374 <HAL_UART_Transmit+0x7c>
 8004370:	3502      	adds	r5, #2
 8004372:	e00d      	b.n	8004390 <HAL_UART_Transmit+0x98>
 8004374:	3501      	adds	r5, #1
 8004376:	e00b      	b.n	8004390 <HAL_UART_Transmit+0x98>
 8004378:	9600      	str	r6, [sp, #0]
 800437a:	463b      	mov	r3, r7
 800437c:	2200      	movs	r2, #0
 800437e:	2180      	movs	r1, #128	; 0x80
 8004380:	4620      	mov	r0, r4
 8004382:	f7ff ff53 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 8004386:	bb08      	cbnz	r0, 80043cc <HAL_UART_Transmit+0xd4>
 8004388:	6823      	ldr	r3, [r4, #0]
 800438a:	782a      	ldrb	r2, [r5, #0]
 800438c:	605a      	str	r2, [r3, #4]
 800438e:	3501      	adds	r5, #1
 8004390:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004392:	b29b      	uxth	r3, r3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1d3      	bne.n	8004340 <HAL_UART_Transmit+0x48>
 8004398:	9600      	str	r6, [sp, #0]
 800439a:	463b      	mov	r3, r7
 800439c:	2200      	movs	r2, #0
 800439e:	2140      	movs	r1, #64	; 0x40
 80043a0:	4620      	mov	r0, r4
 80043a2:	f7ff ff43 	bl	800422c <UART_WaitOnFlagUntilTimeout>
 80043a6:	4603      	mov	r3, r0
 80043a8:	b990      	cbnz	r0, 80043d0 <HAL_UART_Transmit+0xd8>
 80043aa:	2220      	movs	r2, #32
 80043ac:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80043b0:	2200      	movs	r2, #0
 80043b2:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 80043b6:	e00c      	b.n	80043d2 <HAL_UART_Transmit+0xda>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e00a      	b.n	80043d2 <HAL_UART_Transmit+0xda>
 80043bc:	2301      	movs	r3, #1
 80043be:	e008      	b.n	80043d2 <HAL_UART_Transmit+0xda>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e006      	b.n	80043d2 <HAL_UART_Transmit+0xda>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e004      	b.n	80043d2 <HAL_UART_Transmit+0xda>
 80043c8:	2303      	movs	r3, #3
 80043ca:	e002      	b.n	80043d2 <HAL_UART_Transmit+0xda>
 80043cc:	2303      	movs	r3, #3
 80043ce:	e000      	b.n	80043d2 <HAL_UART_Transmit+0xda>
 80043d0:	2303      	movs	r3, #3
 80043d2:	4618      	mov	r0, r3
 80043d4:	b002      	add	sp, #8
 80043d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043da:	bf00      	nop

080043dc <HAL_UART_TxCpltCallback>:
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop

080043e0 <UART_EndTransmit_IT>:
 80043e0:	b508      	push	{r3, lr}
 80043e2:	6801      	ldr	r1, [r0, #0]
 80043e4:	68cb      	ldr	r3, [r1, #12]
 80043e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ea:	60cb      	str	r3, [r1, #12]
 80043ec:	2320      	movs	r3, #32
 80043ee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
 80043f2:	f7ff fff3 	bl	80043dc <HAL_UART_TxCpltCallback>
 80043f6:	2000      	movs	r0, #0
 80043f8:	bd08      	pop	{r3, pc}
 80043fa:	bf00      	nop

080043fc <HAL_UART_RxCpltCallback>:
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop

08004400 <UART_Receive_IT>:
 8004400:	b508      	push	{r3, lr}
 8004402:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b22      	cmp	r3, #34	; 0x22
 800440a:	d144      	bne.n	8004496 <UART_Receive_IT+0x96>
 800440c:	6883      	ldr	r3, [r0, #8]
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004412:	d113      	bne.n	800443c <UART_Receive_IT+0x3c>
 8004414:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004416:	6903      	ldr	r3, [r0, #16]
 8004418:	b943      	cbnz	r3, 800442c <UART_Receive_IT+0x2c>
 800441a:	6803      	ldr	r3, [r0, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004422:	8013      	strh	r3, [r2, #0]
 8004424:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004426:	3302      	adds	r3, #2
 8004428:	6283      	str	r3, [r0, #40]	; 0x28
 800442a:	e018      	b.n	800445e <UART_Receive_IT+0x5e>
 800442c:	6803      	ldr	r3, [r0, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	8013      	strh	r3, [r2, #0]
 8004434:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004436:	3301      	adds	r3, #1
 8004438:	6283      	str	r3, [r0, #40]	; 0x28
 800443a:	e010      	b.n	800445e <UART_Receive_IT+0x5e>
 800443c:	6903      	ldr	r3, [r0, #16]
 800443e:	b933      	cbnz	r3, 800444e <UART_Receive_IT+0x4e>
 8004440:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	6282      	str	r2, [r0, #40]	; 0x28
 8004446:	6802      	ldr	r2, [r0, #0]
 8004448:	6852      	ldr	r2, [r2, #4]
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e007      	b.n	800445e <UART_Receive_IT+0x5e>
 800444e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004450:	1c53      	adds	r3, r2, #1
 8004452:	6283      	str	r3, [r0, #40]	; 0x28
 8004454:	6803      	ldr	r3, [r0, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800445c:	7013      	strb	r3, [r2, #0]
 800445e:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004460:	b29b      	uxth	r3, r3
 8004462:	3b01      	subs	r3, #1
 8004464:	b29b      	uxth	r3, r3
 8004466:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004468:	b9bb      	cbnz	r3, 800449a <UART_Receive_IT+0x9a>
 800446a:	6802      	ldr	r2, [r0, #0]
 800446c:	68d3      	ldr	r3, [r2, #12]
 800446e:	f023 0320 	bic.w	r3, r3, #32
 8004472:	60d3      	str	r3, [r2, #12]
 8004474:	6802      	ldr	r2, [r0, #0]
 8004476:	68d3      	ldr	r3, [r2, #12]
 8004478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800447c:	60d3      	str	r3, [r2, #12]
 800447e:	6802      	ldr	r2, [r0, #0]
 8004480:	6953      	ldr	r3, [r2, #20]
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	6153      	str	r3, [r2, #20]
 8004488:	2320      	movs	r3, #32
 800448a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800448e:	f7ff ffb5 	bl	80043fc <HAL_UART_RxCpltCallback>
 8004492:	2000      	movs	r0, #0
 8004494:	bd08      	pop	{r3, pc}
 8004496:	2002      	movs	r0, #2
 8004498:	bd08      	pop	{r3, pc}
 800449a:	2000      	movs	r0, #0
 800449c:	bd08      	pop	{r3, pc}
 800449e:	bf00      	nop

080044a0 <HAL_UART_ErrorCallback>:
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop

080044a4 <HAL_UART_IRQHandler>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	4604      	mov	r4, r0
 80044a8:	6802      	ldr	r2, [r0, #0]
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	68d1      	ldr	r1, [r2, #12]
 80044ae:	6952      	ldr	r2, [r2, #20]
 80044b0:	f013 000f 	ands.w	r0, r3, #15
 80044b4:	d109      	bne.n	80044ca <HAL_UART_IRQHandler+0x26>
 80044b6:	f013 0f20 	tst.w	r3, #32
 80044ba:	d006      	beq.n	80044ca <HAL_UART_IRQHandler+0x26>
 80044bc:	f011 0f20 	tst.w	r1, #32
 80044c0:	d003      	beq.n	80044ca <HAL_UART_IRQHandler+0x26>
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff ff9c 	bl	8004400 <UART_Receive_IT>
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d062      	beq.n	8004594 <HAL_UART_IRQHandler+0xf0>
 80044ce:	f012 0201 	ands.w	r2, r2, #1
 80044d2:	d102      	bne.n	80044da <HAL_UART_IRQHandler+0x36>
 80044d4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80044d8:	d05c      	beq.n	8004594 <HAL_UART_IRQHandler+0xf0>
 80044da:	f013 0f01 	tst.w	r3, #1
 80044de:	d006      	beq.n	80044ee <HAL_UART_IRQHandler+0x4a>
 80044e0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80044e4:	d003      	beq.n	80044ee <HAL_UART_IRQHandler+0x4a>
 80044e6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044e8:	f040 0001 	orr.w	r0, r0, #1
 80044ec:	63e0      	str	r0, [r4, #60]	; 0x3c
 80044ee:	f013 0f04 	tst.w	r3, #4
 80044f2:	d004      	beq.n	80044fe <HAL_UART_IRQHandler+0x5a>
 80044f4:	b11a      	cbz	r2, 80044fe <HAL_UART_IRQHandler+0x5a>
 80044f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80044f8:	f040 0002 	orr.w	r0, r0, #2
 80044fc:	63e0      	str	r0, [r4, #60]	; 0x3c
 80044fe:	f013 0f02 	tst.w	r3, #2
 8004502:	d004      	beq.n	800450e <HAL_UART_IRQHandler+0x6a>
 8004504:	b11a      	cbz	r2, 800450e <HAL_UART_IRQHandler+0x6a>
 8004506:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004508:	f040 0004 	orr.w	r0, r0, #4
 800450c:	63e0      	str	r0, [r4, #60]	; 0x3c
 800450e:	f013 0f08 	tst.w	r3, #8
 8004512:	d004      	beq.n	800451e <HAL_UART_IRQHandler+0x7a>
 8004514:	b11a      	cbz	r2, 800451e <HAL_UART_IRQHandler+0x7a>
 8004516:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004518:	f042 0208 	orr.w	r2, r2, #8
 800451c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800451e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004520:	2a00      	cmp	r2, #0
 8004522:	d04a      	beq.n	80045ba <HAL_UART_IRQHandler+0x116>
 8004524:	f013 0f20 	tst.w	r3, #32
 8004528:	d005      	beq.n	8004536 <HAL_UART_IRQHandler+0x92>
 800452a:	f011 0f20 	tst.w	r1, #32
 800452e:	d002      	beq.n	8004536 <HAL_UART_IRQHandler+0x92>
 8004530:	4620      	mov	r0, r4
 8004532:	f7ff ff65 	bl	8004400 <UART_Receive_IT>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800453e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004540:	f012 0f08 	tst.w	r2, #8
 8004544:	d100      	bne.n	8004548 <HAL_UART_IRQHandler+0xa4>
 8004546:	b1fb      	cbz	r3, 8004588 <HAL_UART_IRQHandler+0xe4>
 8004548:	4620      	mov	r0, r4
 800454a:	f7ff fd4d 	bl	8003fe8 <UART_EndRxTransfer>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004556:	d013      	beq.n	8004580 <HAL_UART_IRQHandler+0xdc>
 8004558:	695a      	ldr	r2, [r3, #20]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	615a      	str	r2, [r3, #20]
 8004560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004562:	b14b      	cbz	r3, 8004578 <HAL_UART_IRQHandler+0xd4>
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <HAL_UART_IRQHandler+0x118>)
 8004566:	635a      	str	r2, [r3, #52]	; 0x34
 8004568:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800456a:	f7fc fe3d 	bl	80011e8 <HAL_DMA_Abort_IT>
 800456e:	b320      	cbz	r0, 80045ba <HAL_UART_IRQHandler+0x116>
 8004570:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004572:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004574:	4798      	blx	r3
 8004576:	bd10      	pop	{r4, pc}
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff ff91 	bl	80044a0 <HAL_UART_ErrorCallback>
 800457e:	bd10      	pop	{r4, pc}
 8004580:	4620      	mov	r0, r4
 8004582:	f7ff ff8d 	bl	80044a0 <HAL_UART_ErrorCallback>
 8004586:	bd10      	pop	{r4, pc}
 8004588:	4620      	mov	r0, r4
 800458a:	f7ff ff89 	bl	80044a0 <HAL_UART_ErrorCallback>
 800458e:	2300      	movs	r3, #0
 8004590:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004592:	bd10      	pop	{r4, pc}
 8004594:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004598:	d006      	beq.n	80045a8 <HAL_UART_IRQHandler+0x104>
 800459a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800459e:	d003      	beq.n	80045a8 <HAL_UART_IRQHandler+0x104>
 80045a0:	4620      	mov	r0, r4
 80045a2:	f7ff fd2f 	bl	8004004 <UART_Transmit_IT>
 80045a6:	bd10      	pop	{r4, pc}
 80045a8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80045ac:	d005      	beq.n	80045ba <HAL_UART_IRQHandler+0x116>
 80045ae:	f011 0f40 	tst.w	r1, #64	; 0x40
 80045b2:	d002      	beq.n	80045ba <HAL_UART_IRQHandler+0x116>
 80045b4:	4620      	mov	r0, r4
 80045b6:	f7ff ff13 	bl	80043e0 <UART_EndTransmit_IT>
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	080045c1 	.word	0x080045c1

080045c0 <UART_DMAAbortOnError>:
 80045c0:	b508      	push	{r3, lr}
 80045c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80045c4:	2300      	movs	r3, #0
 80045c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80045c8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80045ca:	f7ff ff69 	bl	80044a0 <HAL_UART_ErrorCallback>
 80045ce:	bd08      	pop	{r3, pc}

080045d0 <USB_CoreInit>:
 80045d0:	b084      	sub	sp, #16
 80045d2:	a801      	add	r0, sp, #4
 80045d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80045d8:	2000      	movs	r0, #0
 80045da:	b004      	add	sp, #16
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <USB_EnableGlobalInt>:
 80045e0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80045ea:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80045ee:	2000      	movs	r0, #0
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop

080045f4 <USB_DisableGlobalInt>:
 80045f4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80045f8:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 80045fc:	045b      	lsls	r3, r3, #17
 80045fe:	0c5b      	lsrs	r3, r3, #17
 8004600:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8004604:	2000      	movs	r0, #0
 8004606:	4770      	bx	lr

08004608 <USB_SetCurrentMode>:
 8004608:	2000      	movs	r0, #0
 800460a:	4770      	bx	lr

0800460c <USB_DevInit>:
 800460c:	b084      	sub	sp, #16
 800460e:	b538      	push	{r3, r4, r5, lr}
 8004610:	ac05      	add	r4, sp, #20
 8004612:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8004616:	2301      	movs	r3, #1
 8004618:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800461c:	2400      	movs	r4, #0
 800461e:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8004622:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
 8004626:	f8a0 4050 	strh.w	r4, [r0, #80]	; 0x50
 800462a:	f7ff ffd9 	bl	80045e0 <USB_EnableGlobalInt>
 800462e:	4620      	mov	r0, r4
 8004630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004634:	b004      	add	sp, #16
 8004636:	4770      	bx	lr

08004638 <USB_ActivateEndpoint>:
 8004638:	b410      	push	{r4}
 800463a:	78cb      	ldrb	r3, [r1, #3]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d835      	bhi.n	80046ac <USB_ActivateEndpoint+0x74>
 8004640:	e8df f003 	tbb	[pc, r3]
 8004644:	1b0f2802 	.word	0x1b0f2802
 8004648:	780a      	ldrb	r2, [r1, #0]
 800464a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800464e:	b29b      	uxth	r3, r3
 8004650:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004660:	e024      	b.n	80046ac <USB_ActivateEndpoint+0x74>
 8004662:	780a      	ldrb	r2, [r1, #0]
 8004664:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004668:	b29b      	uxth	r3, r3
 800466a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800466e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004672:	b29b      	uxth	r3, r3
 8004674:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004678:	e018      	b.n	80046ac <USB_ActivateEndpoint+0x74>
 800467a:	780a      	ldrb	r2, [r1, #0]
 800467c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004680:	b29b      	uxth	r3, r3
 8004682:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800468e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004692:	e00b      	b.n	80046ac <USB_ActivateEndpoint+0x74>
 8004694:	780a      	ldrb	r2, [r1, #0]
 8004696:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80046a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80046ac:	780a      	ldrb	r2, [r1, #0]
 80046ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046b6:	051b      	lsls	r3, r3, #20
 80046b8:	0d1b      	lsrs	r3, r3, #20
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80046c8:	7a8b      	ldrb	r3, [r1, #10]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f040 808b 	bne.w	80047e6 <USB_ActivateEndpoint+0x1ae>
 80046d0:	784b      	ldrb	r3, [r1, #1]
 80046d2:	b383      	cbz	r3, 8004736 <USB_ActivateEndpoint+0xfe>
 80046d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80046d8:	b29b      	uxth	r3, r3
 80046da:	780a      	ldrb	r2, [r1, #0]
 80046dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046e0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80046e4:	888a      	ldrh	r2, [r1, #4]
 80046e6:	0852      	lsrs	r2, r2, #1
 80046e8:	0052      	lsls	r2, r2, #1
 80046ea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80046ee:	780a      	ldrb	r2, [r1, #0]
 80046f0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80046f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	b15b      	cbz	r3, 8004714 <USB_ActivateEndpoint+0xdc>
 80046fc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004704:	051b      	lsls	r3, r3, #20
 8004706:	0d1b      	lsrs	r3, r3, #20
 8004708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004710:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004714:	780a      	ldrb	r2, [r1, #0]
 8004716:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800471a:	b29b      	uxth	r3, r3
 800471c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004724:	f083 0320 	eor.w	r3, r3, #32
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004734:	e11b      	b.n	800496e <USB_ActivateEndpoint+0x336>
 8004736:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800473a:	b29b      	uxth	r3, r3
 800473c:	780a      	ldrb	r2, [r1, #0]
 800473e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004742:	3304      	adds	r3, #4
 8004744:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004748:	888a      	ldrh	r2, [r1, #4]
 800474a:	0852      	lsrs	r2, r2, #1
 800474c:	0052      	lsls	r2, r2, #1
 800474e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8004752:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	780a      	ldrb	r2, [r1, #0]
 800475a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800475e:	3306      	adds	r3, #6
 8004760:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004764:	690c      	ldr	r4, [r1, #16]
 8004766:	2c3e      	cmp	r4, #62	; 0x3e
 8004768:	d90e      	bls.n	8004788 <USB_ActivateEndpoint+0x150>
 800476a:	f3c4 124f 	ubfx	r2, r4, #5, #16
 800476e:	f014 0f1f 	tst.w	r4, #31
 8004772:	d101      	bne.n	8004778 <USB_ActivateEndpoint+0x140>
 8004774:	3a01      	subs	r2, #1
 8004776:	b292      	uxth	r2, r2
 8004778:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800477c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004780:	b292      	uxth	r2, r2
 8004782:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8004786:	e00a      	b.n	800479e <USB_ActivateEndpoint+0x166>
 8004788:	f3c4 024f 	ubfx	r2, r4, #1, #16
 800478c:	f014 0f01 	tst.w	r4, #1
 8004790:	d001      	beq.n	8004796 <USB_ActivateEndpoint+0x15e>
 8004792:	3201      	adds	r2, #1
 8004794:	b292      	uxth	r2, r2
 8004796:	0292      	lsls	r2, r2, #10
 8004798:	b292      	uxth	r2, r2
 800479a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800479e:	780a      	ldrb	r2, [r1, #0]
 80047a0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	b15b      	cbz	r3, 80047c4 <USB_ActivateEndpoint+0x18c>
 80047ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b4:	051b      	lsls	r3, r3, #20
 80047b6:	0d1b      	lsrs	r3, r3, #20
 80047b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80047c4:	780a      	ldrb	r2, [r1, #0]
 80047c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80047d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80047e4:	e0c3      	b.n	800496e <USB_ActivateEndpoint+0x336>
 80047e6:	780a      	ldrb	r2, [r1, #0]
 80047e8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80047ec:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80047f0:	051b      	lsls	r3, r3, #20
 80047f2:	0d1b      	lsrs	r3, r3, #20
 80047f4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80047f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004800:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004804:	b29b      	uxth	r3, r3
 8004806:	780a      	ldrb	r2, [r1, #0]
 8004808:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800480c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004810:	88ca      	ldrh	r2, [r1, #6]
 8004812:	0852      	lsrs	r2, r2, #1
 8004814:	0052      	lsls	r2, r2, #1
 8004816:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 800481a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	780a      	ldrb	r2, [r1, #0]
 8004822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004826:	3304      	adds	r3, #4
 8004828:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800482c:	890a      	ldrh	r2, [r1, #8]
 800482e:	0852      	lsrs	r2, r2, #1
 8004830:	0052      	lsls	r2, r2, #1
 8004832:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8004836:	784b      	ldrb	r3, [r1, #1]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d14d      	bne.n	80048d8 <USB_ActivateEndpoint+0x2a0>
 800483c:	780a      	ldrb	r2, [r1, #0]
 800483e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	b29b      	uxth	r3, r3
 8004848:	b15b      	cbz	r3, 8004862 <USB_ActivateEndpoint+0x22a>
 800484a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800484e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004852:	051b      	lsls	r3, r3, #20
 8004854:	0d1b      	lsrs	r3, r3, #20
 8004856:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800485a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004862:	780a      	ldrb	r2, [r1, #0]
 8004864:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	b29b      	uxth	r3, r3
 800486e:	b15b      	cbz	r3, 8004888 <USB_ActivateEndpoint+0x250>
 8004870:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004874:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004878:	051b      	lsls	r3, r3, #20
 800487a:	0d1b      	lsrs	r3, r3, #20
 800487c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004880:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004884:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004888:	780a      	ldrb	r2, [r1, #0]
 800488a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800488e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004892:	051b      	lsls	r3, r3, #20
 8004894:	0d1b      	lsrs	r3, r3, #20
 8004896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800489a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800489e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80048a2:	780c      	ldrb	r4, [r1, #0]
 80048a4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80048b6:	f248 0280 	movw	r2, #32896	; 0x8080
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 80048c0:	7809      	ldrb	r1, [r1, #0]
 80048c2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80048d6:	e04a      	b.n	800496e <USB_ActivateEndpoint+0x336>
 80048d8:	780a      	ldrb	r2, [r1, #0]
 80048da:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	b15b      	cbz	r3, 80048fe <USB_ActivateEndpoint+0x2c6>
 80048e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80048ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ee:	051b      	lsls	r3, r3, #20
 80048f0:	0d1b      	lsrs	r3, r3, #20
 80048f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80048fe:	780a      	ldrb	r2, [r1, #0]
 8004900:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	b29b      	uxth	r3, r3
 800490a:	b15b      	cbz	r3, 8004924 <USB_ActivateEndpoint+0x2ec>
 800490c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004914:	051b      	lsls	r3, r3, #20
 8004916:	0d1b      	lsrs	r3, r3, #20
 8004918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800491c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004920:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004924:	780a      	ldrb	r2, [r1, #0]
 8004926:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492e:	051b      	lsls	r3, r3, #20
 8004930:	0d1b      	lsrs	r3, r3, #20
 8004932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800493a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800493e:	780c      	ldrb	r4, [r1, #0]
 8004940:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004944:	b29b      	uxth	r3, r3
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494e:	f248 0280 	movw	r2, #32896	; 0x8080
 8004952:	4313      	orrs	r3, r2
 8004954:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004958:	7809      	ldrb	r1, [r1, #0]
 800495a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	4313      	orrs	r3, r2
 800496a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 800496e:	2000      	movs	r0, #0
 8004970:	bc10      	pop	{r4}
 8004972:	4770      	bx	lr

08004974 <USB_DeactivateEndpoint>:
 8004974:	7a8b      	ldrb	r3, [r1, #10]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d146      	bne.n	8004a08 <USB_DeactivateEndpoint+0x94>
 800497a:	784b      	ldrb	r3, [r1, #1]
 800497c:	b313      	cbz	r3, 80049c4 <USB_DeactivateEndpoint+0x50>
 800497e:	780a      	ldrb	r2, [r1, #0]
 8004980:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004988:	b29b      	uxth	r3, r3
 800498a:	b15b      	cbz	r3, 80049a4 <USB_DeactivateEndpoint+0x30>
 800498c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004994:	051b      	lsls	r3, r3, #20
 8004996:	0d1b      	lsrs	r3, r3, #20
 8004998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800499c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80049a4:	780a      	ldrb	r2, [r1, #0]
 80049a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049bc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80049c0:	2000      	movs	r0, #0
 80049c2:	4770      	bx	lr
 80049c4:	780a      	ldrb	r2, [r1, #0]
 80049c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	b15b      	cbz	r3, 80049ea <USB_DeactivateEndpoint+0x76>
 80049d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	051b      	lsls	r3, r3, #20
 80049dc:	0d1b      	lsrs	r3, r3, #20
 80049de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80049ea:	780a      	ldrb	r2, [r1, #0]
 80049ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004a06:	e7db      	b.n	80049c0 <USB_DeactivateEndpoint+0x4c>
 8004a08:	b410      	push	{r4}
 8004a0a:	784b      	ldrb	r3, [r1, #1]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d14b      	bne.n	8004aa8 <USB_DeactivateEndpoint+0x134>
 8004a10:	780a      	ldrb	r2, [r1, #0]
 8004a12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	b15b      	cbz	r3, 8004a36 <USB_DeactivateEndpoint+0xc2>
 8004a1e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a26:	051b      	lsls	r3, r3, #20
 8004a28:	0d1b      	lsrs	r3, r3, #20
 8004a2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a32:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004a36:	780a      	ldrb	r2, [r1, #0]
 8004a38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	b15b      	cbz	r3, 8004a5c <USB_DeactivateEndpoint+0xe8>
 8004a44:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a4c:	051b      	lsls	r3, r3, #20
 8004a4e:	0d1b      	lsrs	r3, r3, #20
 8004a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a58:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004a5c:	780a      	ldrb	r2, [r1, #0]
 8004a5e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a66:	051b      	lsls	r3, r3, #20
 8004a68:	0d1b      	lsrs	r3, r3, #20
 8004a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a72:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004a76:	780c      	ldrb	r4, [r1, #0]
 8004a78:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a86:	f248 0280 	movw	r2, #32896	; 0x8080
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004a90:	7809      	ldrb	r1, [r1, #0]
 8004a92:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8004aa6:	e04a      	b.n	8004b3e <USB_DeactivateEndpoint+0x1ca>
 8004aa8:	780a      	ldrb	r2, [r1, #0]
 8004aaa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	b15b      	cbz	r3, 8004ace <USB_DeactivateEndpoint+0x15a>
 8004ab6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004abe:	051b      	lsls	r3, r3, #20
 8004ac0:	0d1b      	lsrs	r3, r3, #20
 8004ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aca:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004ace:	780a      	ldrb	r2, [r1, #0]
 8004ad0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	b15b      	cbz	r3, 8004af4 <USB_DeactivateEndpoint+0x180>
 8004adc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004ae0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ae4:	051b      	lsls	r3, r3, #20
 8004ae6:	0d1b      	lsrs	r3, r3, #20
 8004ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004af0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004af4:	780a      	ldrb	r2, [r1, #0]
 8004af6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004afe:	051b      	lsls	r3, r3, #20
 8004b00:	0d1b      	lsrs	r3, r3, #20
 8004b02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004b0e:	780c      	ldrb	r4, [r1, #0]
 8004b10:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1e:	f248 0280 	movw	r2, #32896	; 0x8080
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
 8004b28:	7809      	ldrb	r1, [r1, #0]
 8004b2a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8004b3e:	2000      	movs	r0, #0
 8004b40:	bc10      	pop	{r4}
 8004b42:	4770      	bx	lr

08004b44 <USB_EPSetStall>:
 8004b44:	780a      	ldrb	r2, [r1, #0]
 8004b46:	b98a      	cbnz	r2, 8004b6c <USB_EPSetStall+0x28>
 8004b48:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b5a:	f083 0310 	eor.w	r3, r3, #16
 8004b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004b6a:	e020      	b.n	8004bae <USB_EPSetStall+0x6a>
 8004b6c:	784b      	ldrb	r3, [r1, #1]
 8004b6e:	b17b      	cbz	r3, 8004b90 <USB_EPSetStall+0x4c>
 8004b70:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7e:	f083 0310 	eor.w	r3, r3, #16
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004b8e:	e00e      	b.n	8004bae <USB_EPSetStall+0x6a>
 8004b90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004baa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004bae:	2000      	movs	r0, #0
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <USB_EPClearStall>:
 8004bb4:	784b      	ldrb	r3, [r1, #1]
 8004bb6:	b31b      	cbz	r3, 8004c00 <USB_EPClearStall+0x4c>
 8004bb8:	780a      	ldrb	r2, [r1, #0]
 8004bba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	b15b      	cbz	r3, 8004bde <USB_EPClearStall+0x2a>
 8004bc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bce:	051b      	lsls	r3, r3, #20
 8004bd0:	0d1b      	lsrs	r3, r3, #20
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bda:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004bde:	780a      	ldrb	r2, [r1, #0]
 8004be0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bee:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004bfe:	e022      	b.n	8004c46 <USB_EPClearStall+0x92>
 8004c00:	780a      	ldrb	r2, [r1, #0]
 8004c02:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	b15b      	cbz	r3, 8004c26 <USB_EPClearStall+0x72>
 8004c0e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c16:	051b      	lsls	r3, r3, #20
 8004c18:	0d1b      	lsrs	r3, r3, #20
 8004c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c22:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004c26:	780a      	ldrb	r2, [r1, #0]
 8004c28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c36:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004c46:	2000      	movs	r0, #0
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop

08004c4c <USB_SetDevAddress>:
 8004c4c:	b911      	cbnz	r1, 8004c54 <USB_SetDevAddress+0x8>
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
 8004c54:	2000      	movs	r0, #0
 8004c56:	4770      	bx	lr

08004c58 <USB_DevConnect>:
 8004c58:	2000      	movs	r0, #0
 8004c5a:	4770      	bx	lr

08004c5c <USB_DevDisconnect>:
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	4770      	bx	lr

08004c60 <USB_ReadInterrupts>:
 8004c60:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
 8004c64:	b280      	uxth	r0, r0
 8004c66:	4770      	bx	lr

08004c68 <USB_EP0_OutStart>:
 8004c68:	2000      	movs	r0, #0
 8004c6a:	4770      	bx	lr

08004c6c <USB_WritePMA>:
 8004c6c:	b410      	push	{r4}
 8004c6e:	3301      	adds	r3, #1
 8004c70:	105b      	asrs	r3, r3, #1
 8004c72:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c7a:	e007      	b.n	8004c8c <USB_WritePMA+0x20>
 8004c7c:	780c      	ldrb	r4, [r1, #0]
 8004c7e:	7848      	ldrb	r0, [r1, #1]
 8004c80:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 8004c84:	f822 4b04 	strh.w	r4, [r2], #4
 8004c88:	3102      	adds	r1, #2
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f5      	bne.n	8004c7c <USB_WritePMA+0x10>
 8004c90:	bc10      	pop	{r4}
 8004c92:	4770      	bx	lr

08004c94 <USB_EPStartXfer>:
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	784a      	ldrb	r2, [r1, #1]
 8004c98:	2a01      	cmp	r2, #1
 8004c9a:	f040 80c2 	bne.w	8004e22 <USB_EPStartXfer+0x18e>
 8004c9e:	698e      	ldr	r6, [r1, #24]
 8004ca0:	690b      	ldr	r3, [r1, #16]
 8004ca2:	429e      	cmp	r6, r3
 8004ca4:	d903      	bls.n	8004cae <USB_EPStartXfer+0x1a>
 8004ca6:	1af6      	subs	r6, r6, r3
 8004ca8:	618e      	str	r6, [r1, #24]
 8004caa:	461e      	mov	r6, r3
 8004cac:	e001      	b.n	8004cb2 <USB_EPStartXfer+0x1e>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	618b      	str	r3, [r1, #24]
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	7a8b      	ldrb	r3, [r1, #10]
 8004cb8:	b983      	cbnz	r3, 8004cdc <USB_EPStartXfer+0x48>
 8004cba:	b2b3      	uxth	r3, r6
 8004cbc:	888a      	ldrh	r2, [r1, #4]
 8004cbe:	6949      	ldr	r1, [r1, #20]
 8004cc0:	f7ff ffd4 	bl	8004c6c <USB_WritePMA>
 8004cc4:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	782a      	ldrb	r2, [r5, #0]
 8004ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cd0:	3302      	adds	r3, #2
 8004cd2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004cd6:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 8004cda:	e091      	b.n	8004e00 <USB_EPStartXfer+0x16c>
 8004cdc:	7809      	ldrb	r1, [r1, #0]
 8004cde:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	b39b      	cbz	r3, 8004d52 <USB_EPStartXfer+0xbe>
 8004cea:	bb22      	cbnz	r2, 8004d36 <USB_EPStartXfer+0xa2>
 8004cec:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004cf6:	3106      	adds	r1, #6
 8004cf8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8004cfc:	2e3e      	cmp	r6, #62	; 0x3e
 8004cfe:	d90e      	bls.n	8004d1e <USB_EPStartXfer+0x8a>
 8004d00:	f3c6 134f 	ubfx	r3, r6, #5, #16
 8004d04:	f016 0f1f 	tst.w	r6, #31
 8004d08:	d101      	bne.n	8004d0e <USB_EPStartXfer+0x7a>
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8004d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8004d1c:	e017      	b.n	8004d4e <USB_EPStartXfer+0xba>
 8004d1e:	f3c6 034f 	ubfx	r3, r6, #1, #16
 8004d22:	f016 0f01 	tst.w	r6, #1
 8004d26:	d001      	beq.n	8004d2c <USB_EPStartXfer+0x98>
 8004d28:	3301      	adds	r3, #1
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8004d34:	e00b      	b.n	8004d4e <USB_EPStartXfer+0xba>
 8004d36:	2a01      	cmp	r2, #1
 8004d38:	d109      	bne.n	8004d4e <USB_EPStartXfer+0xba>
 8004d3a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004d44:	3302      	adds	r3, #2
 8004d46:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004d4a:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 8004d4e:	892a      	ldrh	r2, [r5, #8]
 8004d50:	e032      	b.n	8004db8 <USB_EPStartXfer+0x124>
 8004d52:	bb22      	cbnz	r2, 8004d9e <USB_EPStartXfer+0x10a>
 8004d54:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004d5e:	3102      	adds	r1, #2
 8004d60:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8004d64:	2e3e      	cmp	r6, #62	; 0x3e
 8004d66:	d90e      	bls.n	8004d86 <USB_EPStartXfer+0xf2>
 8004d68:	f3c6 134f 	ubfx	r3, r6, #5, #16
 8004d6c:	f016 0f1f 	tst.w	r6, #31
 8004d70:	d101      	bne.n	8004d76 <USB_EPStartXfer+0xe2>
 8004d72:	3b01      	subs	r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	ea6f 63c3 	mvn.w	r3, r3, lsl #27
 8004d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8004d84:	e017      	b.n	8004db6 <USB_EPStartXfer+0x122>
 8004d86:	f3c6 034f 	ubfx	r3, r6, #1, #16
 8004d8a:	f016 0f01 	tst.w	r6, #1
 8004d8e:	d001      	beq.n	8004d94 <USB_EPStartXfer+0x100>
 8004d90:	3301      	adds	r3, #1
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
 8004d9c:	e00b      	b.n	8004db6 <USB_EPStartXfer+0x122>
 8004d9e:	2a01      	cmp	r2, #1
 8004da0:	d109      	bne.n	8004db6 <USB_EPStartXfer+0x122>
 8004da2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004dac:	3302      	adds	r3, #2
 8004dae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004db2:	f8c3 6400 	str.w	r6, [r3, #1024]	; 0x400
 8004db6:	88ea      	ldrh	r2, [r5, #6]
 8004db8:	b2b3      	uxth	r3, r6
 8004dba:	6969      	ldr	r1, [r5, #20]
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	f7ff ff55 	bl	8004c6c <USB_WritePMA>
 8004dc2:	786b      	ldrb	r3, [r5, #1]
 8004dc4:	b96b      	cbnz	r3, 8004de2 <USB_EPStartXfer+0x14e>
 8004dc6:	782a      	ldrb	r2, [r5, #0]
 8004dc8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd0:	051b      	lsls	r3, r3, #20
 8004dd2:	0d1b      	lsrs	r3, r3, #20
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ddc:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004de0:	e00e      	b.n	8004e00 <USB_EPStartXfer+0x16c>
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10c      	bne.n	8004e00 <USB_EPStartXfer+0x16c>
 8004de6:	782a      	ldrb	r2, [r5, #0]
 8004de8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004dec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004df0:	051b      	lsls	r3, r3, #20
 8004df2:	0d1b      	lsrs	r3, r3, #20
 8004df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dfc:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004e00:	782a      	ldrb	r2, [r5, #0]
 8004e02:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e10:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1c:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8004e20:	e0aa      	b.n	8004f78 <USB_EPStartXfer+0x2e4>
 8004e22:	698b      	ldr	r3, [r1, #24]
 8004e24:	690c      	ldr	r4, [r1, #16]
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	d903      	bls.n	8004e32 <USB_EPStartXfer+0x19e>
 8004e2a:	1b1b      	subs	r3, r3, r4
 8004e2c:	618b      	str	r3, [r1, #24]
 8004e2e:	4623      	mov	r3, r4
 8004e30:	e001      	b.n	8004e36 <USB_EPStartXfer+0x1a2>
 8004e32:	2400      	movs	r4, #0
 8004e34:	618c      	str	r4, [r1, #24]
 8004e36:	7a8c      	ldrb	r4, [r1, #10]
 8004e38:	bb2c      	cbnz	r4, 8004e86 <USB_EPStartXfer+0x1f2>
 8004e3a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004e3e:	b292      	uxth	r2, r2
 8004e40:	780c      	ldrb	r4, [r1, #0]
 8004e42:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004e46:	3206      	adds	r2, #6
 8004e48:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8004e4e:	d90e      	bls.n	8004e6e <USB_EPStartXfer+0x1da>
 8004e50:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8004e54:	f013 0f1f 	tst.w	r3, #31
 8004e58:	d101      	bne.n	8004e5e <USB_EPStartXfer+0x1ca>
 8004e5a:	3c01      	subs	r4, #1
 8004e5c:	b2a4      	uxth	r4, r4
 8004e5e:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8004e62:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004e66:	b2a4      	uxth	r4, r4
 8004e68:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8004e6c:	e074      	b.n	8004f58 <USB_EPStartXfer+0x2c4>
 8004e6e:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8004e72:	f013 0f01 	tst.w	r3, #1
 8004e76:	d001      	beq.n	8004e7c <USB_EPStartXfer+0x1e8>
 8004e78:	3401      	adds	r4, #1
 8004e7a:	b2a4      	uxth	r4, r4
 8004e7c:	02a4      	lsls	r4, r4, #10
 8004e7e:	b2a4      	uxth	r4, r4
 8004e80:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8004e84:	e068      	b.n	8004f58 <USB_EPStartXfer+0x2c4>
 8004e86:	bb2a      	cbnz	r2, 8004ed4 <USB_EPStartXfer+0x240>
 8004e88:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004e8c:	b292      	uxth	r2, r2
 8004e8e:	780c      	ldrb	r4, [r1, #0]
 8004e90:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004e94:	3202      	adds	r2, #2
 8004e96:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004e9a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e9c:	d90e      	bls.n	8004ebc <USB_EPStartXfer+0x228>
 8004e9e:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8004ea2:	f013 0f1f 	tst.w	r3, #31
 8004ea6:	d101      	bne.n	8004eac <USB_EPStartXfer+0x218>
 8004ea8:	3c01      	subs	r4, #1
 8004eaa:	b2a4      	uxth	r4, r4
 8004eac:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8004eb0:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004eb4:	b2a4      	uxth	r4, r4
 8004eb6:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8004eba:	e018      	b.n	8004eee <USB_EPStartXfer+0x25a>
 8004ebc:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8004ec0:	f013 0f01 	tst.w	r3, #1
 8004ec4:	d001      	beq.n	8004eca <USB_EPStartXfer+0x236>
 8004ec6:	3401      	adds	r4, #1
 8004ec8:	b2a4      	uxth	r4, r4
 8004eca:	02a4      	lsls	r4, r4, #10
 8004ecc:	b2a4      	uxth	r4, r4
 8004ece:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8004ed2:	e00c      	b.n	8004eee <USB_EPStartXfer+0x25a>
 8004ed4:	2a01      	cmp	r2, #1
 8004ed6:	d10a      	bne.n	8004eee <USB_EPStartXfer+0x25a>
 8004ed8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004edc:	b292      	uxth	r2, r2
 8004ede:	780c      	ldrb	r4, [r1, #0]
 8004ee0:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004ee4:	3202      	adds	r2, #2
 8004ee6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004eea:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8004eee:	784a      	ldrb	r2, [r1, #1]
 8004ef0:	bb2a      	cbnz	r2, 8004f3e <USB_EPStartXfer+0x2aa>
 8004ef2:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004ef6:	b292      	uxth	r2, r2
 8004ef8:	780c      	ldrb	r4, [r1, #0]
 8004efa:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004efe:	3206      	adds	r2, #6
 8004f00:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004f04:	2b3e      	cmp	r3, #62	; 0x3e
 8004f06:	d90e      	bls.n	8004f26 <USB_EPStartXfer+0x292>
 8004f08:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8004f0c:	f013 0f1f 	tst.w	r3, #31
 8004f10:	d101      	bne.n	8004f16 <USB_EPStartXfer+0x282>
 8004f12:	3c01      	subs	r4, #1
 8004f14:	b2a4      	uxth	r4, r4
 8004f16:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8004f1a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8004f1e:	b2a4      	uxth	r4, r4
 8004f20:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8004f24:	e018      	b.n	8004f58 <USB_EPStartXfer+0x2c4>
 8004f26:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8004f2a:	f013 0f01 	tst.w	r3, #1
 8004f2e:	d001      	beq.n	8004f34 <USB_EPStartXfer+0x2a0>
 8004f30:	3401      	adds	r4, #1
 8004f32:	b2a4      	uxth	r4, r4
 8004f34:	02a4      	lsls	r4, r4, #10
 8004f36:	b2a4      	uxth	r4, r4
 8004f38:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8004f3c:	e00c      	b.n	8004f58 <USB_EPStartXfer+0x2c4>
 8004f3e:	2a01      	cmp	r2, #1
 8004f40:	d10a      	bne.n	8004f58 <USB_EPStartXfer+0x2c4>
 8004f42:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004f46:	b292      	uxth	r2, r2
 8004f48:	780c      	ldrb	r4, [r1, #0]
 8004f4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8004f4e:	3202      	adds	r2, #2
 8004f50:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004f54:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8004f58:	780a      	ldrb	r2, [r1, #0]
 8004f5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f68:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8004f6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004f78:	2000      	movs	r0, #0
 8004f7a:	bd70      	pop	{r4, r5, r6, pc}

08004f7c <USB_ReadPMA>:
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	105b      	asrs	r3, r3, #1
 8004f80:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8004f84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f88:	e004      	b.n	8004f94 <USB_ReadPMA+0x18>
 8004f8a:	6810      	ldr	r0, [r2, #0]
 8004f8c:	f821 0b02 	strh.w	r0, [r1], #2
 8004f90:	3b01      	subs	r3, #1
 8004f92:	3204      	adds	r2, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f8      	bne.n	8004f8a <USB_ReadPMA+0xe>
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop

08004f9c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004f9c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004fa0:	b11b      	cbz	r3, 8004faa <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004fa8:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8004faa:	2002      	movs	r0, #2
  }
}
 8004fac:	4770      	bx	lr

08004fae <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004fae:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004fb0:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004fb4:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8004fb8:	b15b      	cbz	r3, 8004fd2 <USBD_CDC_EP0_RxReady+0x24>
 8004fba:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004fbe:	28ff      	cmp	r0, #255	; 0xff
 8004fc0:	d007      	beq.n	8004fd2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004fc8:	4621      	mov	r1, r4
 8004fca:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8004fcc:	23ff      	movs	r3, #255	; 0xff
 8004fce:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	bd10      	pop	{r4, pc}
	...

08004fd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004fd8:	2343      	movs	r3, #67	; 0x43
 8004fda:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004fdc:	4800      	ldr	r0, [pc, #0]	; (8004fe0 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004fde:	4770      	bx	lr
 8004fe0:	20000008 	.word	0x20000008

08004fe4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004fe4:	2343      	movs	r3, #67	; 0x43
 8004fe6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004fe8:	4800      	ldr	r0, [pc, #0]	; (8004fec <USBD_CDC_GetHSCfgDesc+0x8>)
 8004fea:	4770      	bx	lr
 8004fec:	2000004c 	.word	0x2000004c

08004ff0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004ff0:	2343      	movs	r3, #67	; 0x43
 8004ff2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004ff4:	4800      	ldr	r0, [pc, #0]	; (8004ff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004ff6:	4770      	bx	lr
 8004ff8:	20000090 	.word	0x20000090

08004ffc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8004ffc:	230a      	movs	r3, #10
 8004ffe:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8005000:	4800      	ldr	r0, [pc, #0]	; (8005004 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8005002:	4770      	bx	lr
 8005004:	200000d4 	.word	0x200000d4

08005008 <USBD_CDC_DataOut>:
{      
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800500c:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8005010:	f001 fb20 	bl	8006654 <USBD_LL_GetRxDataSize>
 8005014:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8005018:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800501c:	b14b      	cbz	r3, 8005032 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800501e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 8005028:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 800502c:	4798      	blx	r3
    return USBD_OK;
 800502e:	2000      	movs	r0, #0
}
 8005030:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8005032:	2002      	movs	r0, #2
 8005034:	e7fc      	b.n	8005030 <USBD_CDC_DataOut+0x28>
	...

08005038 <USBD_CDC_Setup>:
{
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4605      	mov	r5, r0
 800503c:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800503e:	f8d0 6218 	ldr.w	r6, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005042:	780b      	ldrb	r3, [r1, #0]
 8005044:	f013 0260 	ands.w	r2, r3, #96	; 0x60
 8005048:	d025      	beq.n	8005096 <USBD_CDC_Setup+0x5e>
 800504a:	2a20      	cmp	r2, #32
 800504c:	d107      	bne.n	800505e <USBD_CDC_Setup+0x26>
    if (req->wLength)
 800504e:	88ca      	ldrh	r2, [r1, #6]
 8005050:	b93a      	cbnz	r2, 8005062 <USBD_CDC_Setup+0x2a>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005052:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	7848      	ldrb	r0, [r1, #1]
 800505c:	4798      	blx	r3
}
 800505e:	2000      	movs	r0, #0
 8005060:	bd70      	pop	{r4, r5, r6, pc}
      if (req->bmRequest & 0x80)
 8005062:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005066:	d00b      	beq.n	8005080 <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005068:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	4631      	mov	r1, r6
 8005070:	7860      	ldrb	r0, [r4, #1]
 8005072:	4798      	blx	r3
          USBD_CtlSendData (pdev, 
 8005074:	88e2      	ldrh	r2, [r4, #6]
 8005076:	4631      	mov	r1, r6
 8005078:	4628      	mov	r0, r5
 800507a:	f000 fc71 	bl	8005960 <USBD_CtlSendData>
 800507e:	e7ee      	b.n	800505e <USBD_CDC_Setup+0x26>
        hcdc->CmdOpCode = req->bRequest;
 8005080:	784b      	ldrb	r3, [r1, #1]
 8005082:	f886 3200 	strb.w	r3, [r6, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8005086:	88cb      	ldrh	r3, [r1, #6]
 8005088:	f886 3201 	strb.w	r3, [r6, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 800508c:	88ca      	ldrh	r2, [r1, #6]
 800508e:	4631      	mov	r1, r6
 8005090:	f000 fc7b 	bl	800598a <USBD_CtlPrepareRx>
 8005094:	e7e3      	b.n	800505e <USBD_CDC_Setup+0x26>
    switch (req->bRequest)
 8005096:	784b      	ldrb	r3, [r1, #1]
 8005098:	2b0a      	cmp	r3, #10
 800509a:	d1e0      	bne.n	800505e <USBD_CDC_Setup+0x26>
      USBD_CtlSendData (pdev,
 800509c:	2201      	movs	r2, #1
 800509e:	4902      	ldr	r1, [pc, #8]	; (80050a8 <USBD_CDC_Setup+0x70>)
 80050a0:	f000 fc5e 	bl	8005960 <USBD_CtlSendData>
      break;
 80050a4:	e7db      	b.n	800505e <USBD_CDC_Setup+0x26>
 80050a6:	bf00      	nop
 80050a8:	2000023c 	.word	0x2000023c

080050ac <USBD_CDC_DeInit>:
{
 80050ac:	b510      	push	{r4, lr}
 80050ae:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 80050b0:	2181      	movs	r1, #129	; 0x81
 80050b2:	f001 fa68 	bl	8006586 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80050b6:	2101      	movs	r1, #1
 80050b8:	4620      	mov	r0, r4
 80050ba:	f001 fa64 	bl	8006586 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80050be:	2182      	movs	r1, #130	; 0x82
 80050c0:	4620      	mov	r0, r4
 80050c2:	f001 fa60 	bl	8006586 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80050c6:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80050ca:	b153      	cbz	r3, 80050e2 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80050cc:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80050d4:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80050d8:	f001 fac6 	bl	8006668 <USBD_static_free>
    pdev->pClassData = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80050e2:	2000      	movs	r0, #0
 80050e4:	bd10      	pop	{r4, pc}

080050e6 <USBD_CDC_Init>:
{
 80050e6:	b538      	push	{r3, r4, r5, lr}
 80050e8:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80050ea:	7c03      	ldrb	r3, [r0, #16]
 80050ec:	bb73      	cbnz	r3, 800514c <USBD_CDC_Init+0x66>
    USBD_LL_OpenEP(pdev,
 80050ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050f2:	2202      	movs	r2, #2
 80050f4:	2181      	movs	r1, #129	; 0x81
 80050f6:	f001 fa35 	bl	8006564 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80050fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050fe:	2202      	movs	r2, #2
 8005100:	2101      	movs	r1, #1
 8005102:	4620      	mov	r0, r4
 8005104:	f001 fa2e 	bl	8006564 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8005108:	2308      	movs	r3, #8
 800510a:	2203      	movs	r2, #3
 800510c:	2182      	movs	r1, #130	; 0x82
 800510e:	4620      	mov	r0, r4
 8005110:	f001 fa28 	bl	8006564 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8005114:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005118:	f001 faa2 	bl	8006660 <USBD_static_malloc>
 800511c:	4605      	mov	r5, r0
 800511e:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8005122:	b348      	cbz	r0, 8005178 <USBD_CDC_Init+0x92>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005124:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4798      	blx	r3
    hcdc->TxState =0;
 800512c:	2300      	movs	r3, #0
 800512e:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState =0;
 8005132:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8005136:	7c23      	ldrb	r3, [r4, #16]
 8005138:	b1a3      	cbz	r3, 8005164 <USBD_CDC_Init+0x7e>
      USBD_LL_PrepareReceive(pdev,
 800513a:	2340      	movs	r3, #64	; 0x40
 800513c:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8005140:	2101      	movs	r1, #1
 8005142:	4620      	mov	r0, r4
 8005144:	f001 fa78 	bl	8006638 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8005148:	2000      	movs	r0, #0
}
 800514a:	bd38      	pop	{r3, r4, r5, pc}
    USBD_LL_OpenEP(pdev,
 800514c:	2340      	movs	r3, #64	; 0x40
 800514e:	2202      	movs	r2, #2
 8005150:	2181      	movs	r1, #129	; 0x81
 8005152:	f001 fa07 	bl	8006564 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	2202      	movs	r2, #2
 800515a:	2101      	movs	r1, #1
 800515c:	4620      	mov	r0, r4
 800515e:	f001 fa01 	bl	8006564 <USBD_LL_OpenEP>
 8005162:	e7d1      	b.n	8005108 <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev,
 8005164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005168:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 800516c:	2101      	movs	r1, #1
 800516e:	4620      	mov	r0, r4
 8005170:	f001 fa62 	bl	8006638 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8005174:	2000      	movs	r0, #0
 8005176:	e7e8      	b.n	800514a <USBD_CDC_Init+0x64>
    ret = 1; 
 8005178:	2001      	movs	r0, #1
 800517a:	e7e6      	b.n	800514a <USBD_CDC_Init+0x64>

0800517c <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 800517c:	b119      	cbz	r1, 8005186 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 800517e:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 8005182:	2000      	movs	r0, #0
 8005184:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8005186:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8005188:	4770      	bx	lr

0800518a <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800518a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
 800518e:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8005192:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8005196:	2000      	movs	r0, #0
 8005198:	4770      	bx	lr

0800519a <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800519a:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->RxBuffer = pbuff;
 800519e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 80051a2:	2000      	movs	r0, #0
 80051a4:	4770      	bx	lr

080051a6 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051a6:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 80051aa:	b18a      	cbz	r2, 80051d0 <USBD_CDC_TransmitPacket+0x2a>
{      
 80051ac:	b508      	push	{r3, lr}
  {
    if(hcdc->TxState == 0)
 80051ae:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 80051b2:	b10b      	cbz	r3, 80051b8 <USBD_CDC_TransmitPacket+0x12>
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 80051b4:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80051b6:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 80051be:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 80051c2:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80051c6:	2181      	movs	r1, #129	; 0x81
 80051c8:	f001 fa28 	bl	800661c <USBD_LL_Transmit>
      return USBD_OK;
 80051cc:	2000      	movs	r0, #0
 80051ce:	e7f2      	b.n	80051b6 <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 80051d0:	2002      	movs	r0, #2
}
 80051d2:	4770      	bx	lr

080051d4 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80051d4:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80051d8:	b19a      	cbz	r2, 8005202 <USBD_CDC_ReceivePacket+0x2e>
{      
 80051da:	b508      	push	{r3, lr}
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80051dc:	7c03      	ldrb	r3, [r0, #16]
 80051de:	b13b      	cbz	r3, 80051f0 <USBD_CDC_ReceivePacket+0x1c>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80051e6:	2101      	movs	r1, #1
 80051e8:	f001 fa26 	bl	8006638 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80051ec:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80051ee:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80051f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051f4:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80051f8:	2101      	movs	r1, #1
 80051fa:	f001 fa1d 	bl	8006638 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80051fe:	2000      	movs	r0, #0
 8005200:	e7f5      	b.n	80051ee <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8005202:	2002      	movs	r0, #2
}
 8005204:	4770      	bx	lr

08005206 <USBD_Init>:
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8005206:	b198      	cbz	r0, 8005230 <USBD_Init+0x2a>
{
 8005208:	b508      	push	{r3, lr}
 800520a:	4603      	mov	r3, r0
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800520c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8005210:	b110      	cbz	r0, 8005218 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8005212:	2000      	movs	r0, #0
 8005214:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8005218:	b109      	cbz	r1, 800521e <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 800521a:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 800521e:	4618      	mov	r0, r3
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8005220:	2301      	movs	r3, #1
 8005222:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8005226:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005228:	f001 f94a 	bl	80064c0 <USBD_LL_Init>
  
  return USBD_OK; 
 800522c:	2000      	movs	r0, #0
}
 800522e:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8005230:	2002      	movs	r0, #2
}
 8005232:	4770      	bx	lr

08005234 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8005234:	b119      	cbz	r1, 800523e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005236:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 800523a:	2000      	movs	r0, #0
 800523c:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800523e:	2002      	movs	r0, #2
  }
  
  return status;
}
 8005240:	4770      	bx	lr

08005242 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8005242:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8005244:	f001 f980 	bl	8006548 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8005248:	2000      	movs	r0, #0
 800524a:	bd08      	pop	{r3, pc}

0800524c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800524c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800524e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005252:	b133      	cbz	r3, 8005262 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4798      	blx	r3
 8005258:	b908      	cbnz	r0, 800525e <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 800525a:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 800525c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800525e:	2002      	movs	r0, #2
 8005260:	e7fc      	b.n	800525c <USBD_SetClassConfig+0x10>
 8005262:	2002      	movs	r0, #2
 8005264:	e7fa      	b.n	800525c <USBD_SetClassConfig+0x10>

08005266 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005266:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8005268:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4798      	blx	r3
  return USBD_OK;
}
 8005270:	2000      	movs	r0, #0
 8005272:	bd08      	pop	{r3, pc}

08005274 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005278:	f500 7502 	add.w	r5, r0, #520	; 0x208
 800527c:	4628      	mov	r0, r5
 800527e:	f000 f90c 	bl	800549a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8005282:	2301      	movs	r3, #1
 8005284:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8005288:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 800528c:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8005290:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8005294:	f001 031f 	and.w	r3, r1, #31
 8005298:	2b01      	cmp	r3, #1
 800529a:	d00e      	beq.n	80052ba <USBD_LL_SetupStage+0x46>
 800529c:	b13b      	cbz	r3, 80052ae <USBD_LL_SetupStage+0x3a>
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d010      	beq.n	80052c4 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80052a2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80052a6:	4620      	mov	r0, r4
 80052a8:	f001 f97b 	bl	80065a2 <USBD_LL_StallEP>
    break;
 80052ac:	e003      	b.n	80052b6 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80052ae:	4629      	mov	r1, r5
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 fa6c 	bl	800578e <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80052b6:	2000      	movs	r0, #0
 80052b8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 80052ba:	4629      	mov	r1, r5
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 fa8a 	bl	80057d6 <USBD_StdItfReq>
    break;
 80052c2:	e7f8      	b.n	80052b6 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 80052c4:	4629      	mov	r1, r5
 80052c6:	4620      	mov	r0, r4
 80052c8:	f000 faa1 	bl	800580e <USBD_StdEPReq>
    break;
 80052cc:	e7f3      	b.n	80052b6 <USBD_LL_SetupStage+0x42>

080052ce <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 80052ce:	b510      	push	{r4, lr}
 80052d0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 80052d2:	bb21      	cbnz	r1, 800531e <USBD_LL_DataOutStage+0x50>
 80052d4:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052d6:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 80052da:	2a03      	cmp	r2, #3
 80052dc:	d001      	beq.n	80052e2 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80052de:	2000      	movs	r0, #0
 80052e0:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 80052e2:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 80052e6:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80052ea:	4291      	cmp	r1, r2
 80052ec:	d80c      	bhi.n	8005308 <USBD_LL_DataOutStage+0x3a>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80052ee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	b123      	cbz	r3, 8005300 <USBD_LL_DataOutStage+0x32>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052f6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80052fa:	2a03      	cmp	r2, #3
 80052fc:	d100      	bne.n	8005300 <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev); 
 80052fe:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005300:	4620      	mov	r0, r4
 8005302:	f000 fb59 	bl	80059b8 <USBD_CtlSendStatus>
 8005306:	e7ea      	b.n	80052de <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 8005308:	1a89      	subs	r1, r1, r2
 800530a:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 800530e:	428a      	cmp	r2, r1
 8005310:	bf28      	it	cs
 8005312:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8005314:	b292      	uxth	r2, r2
 8005316:	4619      	mov	r1, r3
 8005318:	f000 fb46 	bl	80059a8 <USBD_CtlContinueRx>
 800531c:	e7df      	b.n	80052de <USBD_LL_DataOutStage+0x10>
 800531e:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 8005320:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0d9      	beq.n	80052de <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800532a:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 800532e:	2903      	cmp	r1, #3
 8005330:	d1d5      	bne.n	80052de <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 8005332:	4611      	mov	r1, r2
 8005334:	4798      	blx	r3
 8005336:	e7d2      	b.n	80052de <USBD_LL_DataOutStage+0x10>

08005338 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8005338:	b510      	push	{r4, lr}
 800533a:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 800533c:	2900      	cmp	r1, #0
 800533e:	d146      	bne.n	80053ce <USBD_LL_DataInStage+0x96>
 8005340:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8005342:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8005346:	2a02      	cmp	r2, #2
 8005348:	d005      	beq.n	8005356 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800534a:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 800534e:	2b01      	cmp	r3, #1
 8005350:	d039      	beq.n	80053c6 <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8005352:	2000      	movs	r0, #0
 8005354:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8005356:	69c1      	ldr	r1, [r0, #28]
 8005358:	6a02      	ldr	r2, [r0, #32]
 800535a:	4291      	cmp	r1, r2
 800535c:	d819      	bhi.n	8005392 <USBD_LL_DataInStage+0x5a>
        if((pep->total_length % pep->maxpacket == 0) &&
 800535e:	6981      	ldr	r1, [r0, #24]
 8005360:	fbb1 f3f2 	udiv	r3, r1, r2
 8005364:	fb02 1313 	mls	r3, r2, r3, r1
 8005368:	b92b      	cbnz	r3, 8005376 <USBD_LL_DataInStage+0x3e>
 800536a:	428a      	cmp	r2, r1
 800536c:	d803      	bhi.n	8005376 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 800536e:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8005372:	4299      	cmp	r1, r3
 8005374:	d31a      	bcc.n	80053ac <USBD_LL_DataInStage+0x74>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005376:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	b12b      	cbz	r3, 800538a <USBD_LL_DataInStage+0x52>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800537e:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8005382:	2a03      	cmp	r2, #3
 8005384:	d101      	bne.n	800538a <USBD_LL_DataInStage+0x52>
            pdev->pClass->EP0_TxSent(pdev); 
 8005386:	4620      	mov	r0, r4
 8005388:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 800538a:	4620      	mov	r0, r4
 800538c:	f000 fb1f 	bl	80059ce <USBD_CtlReceiveStatus>
 8005390:	e7db      	b.n	800534a <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 8005392:	1a8a      	subs	r2, r1, r2
 8005394:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8005396:	b292      	uxth	r2, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f000 faee 	bl	800597a <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 800539e:	2300      	movs	r3, #0
 80053a0:	461a      	mov	r2, r3
 80053a2:	4619      	mov	r1, r3
 80053a4:	4620      	mov	r0, r4
 80053a6:	f001 f947 	bl	8006638 <USBD_LL_PrepareReceive>
 80053aa:	e7ce      	b.n	800534a <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80053ac:	2200      	movs	r2, #0
 80053ae:	4611      	mov	r1, r2
 80053b0:	f000 fae3 	bl	800597a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80053b4:	2100      	movs	r1, #0
 80053b6:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80053ba:	460b      	mov	r3, r1
 80053bc:	460a      	mov	r2, r1
 80053be:	4620      	mov	r0, r4
 80053c0:	f001 f93a 	bl	8006638 <USBD_LL_PrepareReceive>
 80053c4:	e7c1      	b.n	800534a <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 80053cc:	e7c1      	b.n	8005352 <USBD_LL_DataInStage+0x1a>
 80053ce:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 80053d0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0bb      	beq.n	8005352 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053da:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 80053de:	2903      	cmp	r1, #3
 80053e0:	d1b7      	bne.n	8005352 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 80053e2:	4611      	mov	r1, r2
 80053e4:	4798      	blx	r3
 80053e6:	e7b4      	b.n	8005352 <USBD_LL_DataInStage+0x1a>

080053e8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 80053ec:	2340      	movs	r3, #64	; 0x40
 80053ee:	2200      	movs	r2, #0
 80053f0:	4611      	mov	r1, r2
 80053f2:	f001 f8b7 	bl	8006564 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80053f6:	2540      	movs	r5, #64	; 0x40
 80053f8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80053fc:	462b      	mov	r3, r5
 80053fe:	2200      	movs	r2, #0
 8005400:	2180      	movs	r1, #128	; 0x80
 8005402:	4620      	mov	r0, r4
 8005404:	f001 f8ae 	bl	8006564 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005408:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800540a:	2301      	movs	r3, #1
 800540c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8005410:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8005414:	b12b      	cbz	r3, 8005422 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8005416:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	7921      	ldrb	r1, [r4, #4]
 800541e:	4620      	mov	r0, r4
 8005420:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8005422:	2000      	movs	r0, #0
 8005424:	bd38      	pop	{r3, r4, r5, pc}

08005426 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005426:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8005428:	2000      	movs	r0, #0
 800542a:	4770      	bx	lr

0800542c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800542c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005430:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005434:	2304      	movs	r3, #4
 8005436:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800543a:	2000      	movs	r0, #0
 800543c:	4770      	bx	lr

0800543e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800543e:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8005442:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8005446:	2000      	movs	r0, #0
 8005448:	4770      	bx	lr

0800544a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800544a:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800544c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005450:	2b03      	cmp	r3, #3
 8005452:	d001      	beq.n	8005458 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8005454:	2000      	movs	r0, #0
 8005456:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 8005458:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f8      	beq.n	8005454 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8005462:	4798      	blx	r3
 8005464:	e7f6      	b.n	8005454 <USBD_LL_SOF+0xa>

08005466 <USBD_GetLen>:
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;
 8005466:	2300      	movs	r3, #0

    while (*buf != '\0') 
 8005468:	e002      	b.n	8005470 <USBD_GetLen+0xa>
    {
        len++;
 800546a:	3301      	adds	r3, #1
 800546c:	b2db      	uxtb	r3, r3
        buf++;
 800546e:	3001      	adds	r0, #1
    while (*buf != '\0') 
 8005470:	7802      	ldrb	r2, [r0, #0]
 8005472:	2a00      	cmp	r2, #0
 8005474:	d1f9      	bne.n	800546a <USBD_GetLen+0x4>
    }

    return len;
}
 8005476:	4618      	mov	r0, r3
 8005478:	4770      	bx	lr

0800547a <USBD_SetFeature>:
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800547a:	884b      	ldrh	r3, [r1, #2]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d10b      	bne.n	8005498 <USBD_SetFeature+0x1e>
{
 8005480:	b510      	push	{r4, lr}
 8005482:	4604      	mov	r4, r0
    pdev->dev_remote_wakeup = 1;  
 8005484:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8005488:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8005490:	4620      	mov	r0, r4
 8005492:	f000 fa91 	bl	80059b8 <USBD_CtlSendStatus>
}
 8005496:	bd10      	pop	{r4, pc}
 8005498:	4770      	bx	lr

0800549a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800549a:	780b      	ldrb	r3, [r1, #0]
 800549c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800549e:	784b      	ldrb	r3, [r1, #1]
 80054a0:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80054a2:	788b      	ldrb	r3, [r1, #2]
 80054a4:	78ca      	ldrb	r2, [r1, #3]
 80054a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80054aa:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80054ac:	790b      	ldrb	r3, [r1, #4]
 80054ae:	794a      	ldrb	r2, [r1, #5]
 80054b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80054b4:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80054b6:	798b      	ldrb	r3, [r1, #6]
 80054b8:	79ca      	ldrb	r2, [r1, #7]
 80054ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80054be:	80c3      	strh	r3, [r0, #6]
}
 80054c0:	4770      	bx	lr

080054c2 <USBD_CtlError>:
{
 80054c2:	b510      	push	{r4, lr}
 80054c4:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80054c6:	2180      	movs	r1, #128	; 0x80
 80054c8:	f001 f86b 	bl	80065a2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80054cc:	2100      	movs	r1, #0
 80054ce:	4620      	mov	r0, r4
 80054d0:	f001 f867 	bl	80065a2 <USBD_LL_StallEP>
}
 80054d4:	bd10      	pop	{r4, pc}

080054d6 <USBD_GetDescriptor>:
{
 80054d6:	b530      	push	{r4, r5, lr}
 80054d8:	b083      	sub	sp, #12
 80054da:	4604      	mov	r4, r0
 80054dc:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 80054de:	884a      	ldrh	r2, [r1, #2]
 80054e0:	0a13      	lsrs	r3, r2, #8
 80054e2:	3b01      	subs	r3, #1
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	f200 8081 	bhi.w	80055ec <USBD_GetDescriptor+0x116>
 80054ea:	e8df f003 	tbb	[pc, r3]
 80054ee:	1304      	.short	0x1304
 80054f0:	637f7f27 	.word	0x637f7f27
 80054f4:	70          	.byte	0x70
 80054f5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80054f6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f10d 0106 	add.w	r1, sp, #6
 8005500:	7c00      	ldrb	r0, [r0, #16]
 8005502:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8005504:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005508:	b112      	cbz	r2, 8005510 <USBD_GetDescriptor+0x3a>
 800550a:	88eb      	ldrh	r3, [r5, #6]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d171      	bne.n	80055f4 <USBD_GetDescriptor+0x11e>
}
 8005510:	b003      	add	sp, #12
 8005512:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8005514:	7c03      	ldrb	r3, [r0, #16]
 8005516:	b943      	cbnz	r3, 800552a <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005518:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	f10d 0006 	add.w	r0, sp, #6
 8005522:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005524:	2302      	movs	r3, #2
 8005526:	7043      	strb	r3, [r0, #1]
 8005528:	e7ec      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800552a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	f10d 0006 	add.w	r0, sp, #6
 8005534:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005536:	2302      	movs	r3, #2
 8005538:	7043      	strb	r3, [r0, #1]
 800553a:	e7e3      	b.n	8005504 <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	2a05      	cmp	r2, #5
 8005540:	d834      	bhi.n	80055ac <USBD_GetDescriptor+0xd6>
 8005542:	e8df f002 	tbb	[pc, r2]
 8005546:	0b03      	.short	0x0b03
 8005548:	2b231b13 	.word	0x2b231b13
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800554c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f10d 0106 	add.w	r1, sp, #6
 8005556:	7c00      	ldrb	r0, [r0, #16]
 8005558:	4798      	blx	r3
      break;
 800555a:	e7d3      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800555c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	f10d 0106 	add.w	r1, sp, #6
 8005566:	7c00      	ldrb	r0, [r0, #16]
 8005568:	4798      	blx	r3
      break;
 800556a:	e7cb      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800556c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f10d 0106 	add.w	r1, sp, #6
 8005576:	7c00      	ldrb	r0, [r0, #16]
 8005578:	4798      	blx	r3
      break;
 800557a:	e7c3      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800557c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f10d 0106 	add.w	r1, sp, #6
 8005586:	7c00      	ldrb	r0, [r0, #16]
 8005588:	4798      	blx	r3
      break;
 800558a:	e7bb      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800558c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	f10d 0106 	add.w	r1, sp, #6
 8005596:	7c00      	ldrb	r0, [r0, #16]
 8005598:	4798      	blx	r3
      break;
 800559a:	e7b3      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800559c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	f10d 0106 	add.w	r1, sp, #6
 80055a6:	7c00      	ldrb	r0, [r0, #16]
 80055a8:	4798      	blx	r3
      break;
 80055aa:	e7ab      	b.n	8005504 <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 80055ac:	4629      	mov	r1, r5
 80055ae:	f7ff ff88 	bl	80054c2 <USBD_CtlError>
      return;
 80055b2:	e7ad      	b.n	8005510 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80055b4:	7c03      	ldrb	r3, [r0, #16]
 80055b6:	b933      	cbnz	r3, 80055c6 <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80055b8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	f10d 0006 	add.w	r0, sp, #6
 80055c2:	4798      	blx	r3
      break;
 80055c4:	e79e      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 80055c6:	4629      	mov	r1, r5
 80055c8:	f7ff ff7b 	bl	80054c2 <USBD_CtlError>
      return;
 80055cc:	e7a0      	b.n	8005510 <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80055ce:	7c03      	ldrb	r3, [r0, #16]
 80055d0:	b943      	cbnz	r3, 80055e4 <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80055d2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80055d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d8:	f10d 0006 	add.w	r0, sp, #6
 80055dc:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80055de:	2307      	movs	r3, #7
 80055e0:	7043      	strb	r3, [r0, #1]
      break; 
 80055e2:	e78f      	b.n	8005504 <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 80055e4:	4629      	mov	r1, r5
 80055e6:	f7ff ff6c 	bl	80054c2 <USBD_CtlError>
      return;
 80055ea:	e791      	b.n	8005510 <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 80055ec:	4629      	mov	r1, r5
 80055ee:	f7ff ff68 	bl	80054c2 <USBD_CtlError>
    return;
 80055f2:	e78d      	b.n	8005510 <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 80055f4:	429a      	cmp	r2, r3
 80055f6:	bf28      	it	cs
 80055f8:	461a      	movcs	r2, r3
 80055fa:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 80055fe:	4601      	mov	r1, r0
 8005600:	4620      	mov	r0, r4
 8005602:	f000 f9ad 	bl	8005960 <USBD_CtlSendData>
 8005606:	e783      	b.n	8005510 <USBD_GetDescriptor+0x3a>

08005608 <USBD_SetAddress>:
{
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800560c:	888b      	ldrh	r3, [r1, #4]
 800560e:	b9e3      	cbnz	r3, 800564a <USBD_SetAddress+0x42>
 8005610:	88cb      	ldrh	r3, [r1, #6]
 8005612:	b9d3      	cbnz	r3, 800564a <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8005614:	788d      	ldrb	r5, [r1, #2]
 8005616:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800561a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800561e:	2b03      	cmp	r3, #3
 8005620:	d00c      	beq.n	800563c <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 8005622:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005626:	4629      	mov	r1, r5
 8005628:	f000 ffea 	bl	8006600 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800562c:	4620      	mov	r0, r4
 800562e:	f000 f9c3 	bl	80059b8 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8005632:	b135      	cbz	r5, 8005642 <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005634:	2302      	movs	r3, #2
 8005636:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800563a:	e009      	b.n	8005650 <USBD_SetAddress+0x48>
      USBD_CtlError(pdev , req);
 800563c:	f7ff ff41 	bl	80054c2 <USBD_CtlError>
 8005640:	e006      	b.n	8005650 <USBD_SetAddress+0x48>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005642:	2301      	movs	r3, #1
 8005644:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8005648:	e002      	b.n	8005650 <USBD_SetAddress+0x48>
     USBD_CtlError(pdev , req);                        
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff ff39 	bl	80054c2 <USBD_CtlError>
}
 8005650:	bd38      	pop	{r3, r4, r5, pc}
	...

08005654 <USBD_SetConfig>:
{
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4604      	mov	r4, r0
 8005658:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 800565a:	7889      	ldrb	r1, [r1, #2]
 800565c:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <USBD_SetConfig+0xa0>)
 800565e:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8005660:	2901      	cmp	r1, #1
 8005662:	d809      	bhi.n	8005678 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 8005664:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005668:	2b02      	cmp	r3, #2
 800566a:	d009      	beq.n	8005680 <USBD_SetConfig+0x2c>
 800566c:	2b03      	cmp	r3, #3
 800566e:	d01c      	beq.n	80056aa <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8005670:	4629      	mov	r1, r5
 8005672:	f7ff ff26 	bl	80054c2 <USBD_CtlError>
      break;
 8005676:	e002      	b.n	800567e <USBD_SetConfig+0x2a>
     USBD_CtlError(pdev , req);                              
 8005678:	4629      	mov	r1, r5
 800567a:	f7ff ff22 	bl	80054c2 <USBD_CtlError>
}
 800567e:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8005680:	b181      	cbz	r1, 80056a4 <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 8005682:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005684:	2303      	movs	r3, #3
 8005686:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800568a:	f7ff fddf 	bl	800524c <USBD_SetClassConfig>
 800568e:	2802      	cmp	r0, #2
 8005690:	d003      	beq.n	800569a <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f990 	bl	80059b8 <USBD_CtlSendStatus>
 8005698:	e7f1      	b.n	800567e <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 800569a:	4629      	mov	r1, r5
 800569c:	4620      	mov	r0, r4
 800569e:	f7ff ff10 	bl	80054c2 <USBD_CtlError>
          return;
 80056a2:	e7ec      	b.n	800567e <USBD_SetConfig+0x2a>
         USBD_CtlSendStatus(pdev);
 80056a4:	f000 f988 	bl	80059b8 <USBD_CtlSendStatus>
 80056a8:	e7e9      	b.n	800567e <USBD_SetConfig+0x2a>
      if (cfgidx == 0) 
 80056aa:	b189      	cbz	r1, 80056d0 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 80056ac:	6843      	ldr	r3, [r0, #4]
 80056ae:	4299      	cmp	r1, r3
 80056b0:	d01d      	beq.n	80056ee <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80056b2:	b2d9      	uxtb	r1, r3
 80056b4:	f7ff fdd7 	bl	8005266 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80056b8:	4b0e      	ldr	r3, [pc, #56]	; (80056f4 <USBD_SetConfig+0xa0>)
 80056ba:	7819      	ldrb	r1, [r3, #0]
 80056bc:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80056be:	4620      	mov	r0, r4
 80056c0:	f7ff fdc4 	bl	800524c <USBD_SetClassConfig>
 80056c4:	2802      	cmp	r0, #2
 80056c6:	d00d      	beq.n	80056e4 <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 f975 	bl	80059b8 <USBD_CtlSendStatus>
 80056ce:	e7d6      	b.n	800567e <USBD_SetConfig+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80056d0:	2302      	movs	r3, #2
 80056d2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80056d6:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80056d8:	f7ff fdc5 	bl	8005266 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80056dc:	4620      	mov	r0, r4
 80056de:	f000 f96b 	bl	80059b8 <USBD_CtlSendStatus>
 80056e2:	e7cc      	b.n	800567e <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 80056e4:	4629      	mov	r1, r5
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff feeb 	bl	80054c2 <USBD_CtlError>
          return;
 80056ec:	e7c7      	b.n	800567e <USBD_SetConfig+0x2a>
        USBD_CtlSendStatus(pdev);
 80056ee:	f000 f963 	bl	80059b8 <USBD_CtlSendStatus>
 80056f2:	e7c4      	b.n	800567e <USBD_SetConfig+0x2a>
 80056f4:	2000023d 	.word	0x2000023d

080056f8 <USBD_GetConfig>:
{
 80056f8:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 80056fa:	88cb      	ldrh	r3, [r1, #6]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d108      	bne.n	8005712 <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 8005700:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005704:	2b02      	cmp	r3, #2
 8005706:	d007      	beq.n	8005718 <USBD_GetConfig+0x20>
 8005708:	2b03      	cmp	r3, #3
 800570a:	d00d      	beq.n	8005728 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 800570c:	f7ff fed9 	bl	80054c2 <USBD_CtlError>
}
 8005710:	e001      	b.n	8005716 <USBD_GetConfig+0x1e>
     USBD_CtlError(pdev , req);
 8005712:	f7ff fed6 	bl	80054c2 <USBD_CtlError>
}
 8005716:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 8005718:	4601      	mov	r1, r0
 800571a:	2300      	movs	r3, #0
 800571c:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8005720:	2201      	movs	r2, #1
 8005722:	f000 f91d 	bl	8005960 <USBD_CtlSendData>
      break;
 8005726:	e7f6      	b.n	8005716 <USBD_GetConfig+0x1e>
      USBD_CtlSendData (pdev, 
 8005728:	2201      	movs	r2, #1
 800572a:	1d01      	adds	r1, r0, #4
 800572c:	f000 f918 	bl	8005960 <USBD_CtlSendData>
      break;
 8005730:	e7f1      	b.n	8005716 <USBD_GetConfig+0x1e>

08005732 <USBD_GetStatus>:
{
 8005732:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 8005734:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005738:	3b02      	subs	r3, #2
 800573a:	2b01      	cmp	r3, #1
 800573c:	d80c      	bhi.n	8005758 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 800573e:	2301      	movs	r3, #1
 8005740:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8005742:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8005746:	b10b      	cbz	r3, 800574c <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005748:	2303      	movs	r3, #3
 800574a:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 800574c:	2202      	movs	r2, #2
 800574e:	f100 010c 	add.w	r1, r0, #12
 8005752:	f000 f905 	bl	8005960 <USBD_CtlSendData>
}
 8005756:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8005758:	f7ff feb3 	bl	80054c2 <USBD_CtlError>
}
 800575c:	e7fb      	b.n	8005756 <USBD_GetStatus+0x24>

0800575e <USBD_ClrFeature>:
{
 800575e:	b510      	push	{r4, lr}
 8005760:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 8005762:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005766:	3b02      	subs	r3, #2
 8005768:	2b01      	cmp	r3, #1
 800576a:	d80d      	bhi.n	8005788 <USBD_ClrFeature+0x2a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800576c:	884b      	ldrh	r3, [r1, #2]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d109      	bne.n	8005786 <USBD_ClrFeature+0x28>
      pdev->dev_remote_wakeup = 0; 
 8005772:	2300      	movs	r3, #0
 8005774:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8005778:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005780:	4620      	mov	r0, r4
 8005782:	f000 f919 	bl	80059b8 <USBD_CtlSendStatus>
}
 8005786:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8005788:	f7ff fe9b 	bl	80054c2 <USBD_CtlError>
}
 800578c:	e7fb      	b.n	8005786 <USBD_ClrFeature+0x28>

0800578e <USBD_StdDevReq>:
{
 800578e:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 8005790:	784b      	ldrb	r3, [r1, #1]
 8005792:	2b09      	cmp	r3, #9
 8005794:	d81c      	bhi.n	80057d0 <USBD_StdDevReq+0x42>
 8005796:	e8df f003 	tbb	[pc, r3]
 800579a:	1812      	.short	0x1812
 800579c:	091b151b 	.word	0x091b151b
 80057a0:	0c0f1b05 	.word	0x0c0f1b05
    USBD_GetDescriptor (pdev, req) ;
 80057a4:	f7ff fe97 	bl	80054d6 <USBD_GetDescriptor>
}
 80057a8:	2000      	movs	r0, #0
 80057aa:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 80057ac:	f7ff ff2c 	bl	8005608 <USBD_SetAddress>
    break;
 80057b0:	e7fa      	b.n	80057a8 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 80057b2:	f7ff ff4f 	bl	8005654 <USBD_SetConfig>
    break;
 80057b6:	e7f7      	b.n	80057a8 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 80057b8:	f7ff ff9e 	bl	80056f8 <USBD_GetConfig>
    break;
 80057bc:	e7f4      	b.n	80057a8 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 80057be:	f7ff ffb8 	bl	8005732 <USBD_GetStatus>
    break;
 80057c2:	e7f1      	b.n	80057a8 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 80057c4:	f7ff fe59 	bl	800547a <USBD_SetFeature>
    break;
 80057c8:	e7ee      	b.n	80057a8 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 80057ca:	f7ff ffc8 	bl	800575e <USBD_ClrFeature>
    break;
 80057ce:	e7eb      	b.n	80057a8 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 80057d0:	f7ff fe77 	bl	80054c2 <USBD_CtlError>
    break;
 80057d4:	e7e8      	b.n	80057a8 <USBD_StdDevReq+0x1a>

080057d6 <USBD_StdItfReq>:
{
 80057d6:	b538      	push	{r3, r4, r5, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80057dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d111      	bne.n	8005808 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80057e4:	790b      	ldrb	r3, [r1, #4]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d80b      	bhi.n	8005802 <USBD_StdItfReq+0x2c>
      pdev->pClass->Setup (pdev, req); 
 80057ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80057f2:	88eb      	ldrh	r3, [r5, #6]
 80057f4:	b10b      	cbz	r3, 80057fa <USBD_StdItfReq+0x24>
}
 80057f6:	2000      	movs	r0, #0
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 80057fa:	4620      	mov	r0, r4
 80057fc:	f000 f8dc 	bl	80059b8 <USBD_CtlSendStatus>
 8005800:	e7f9      	b.n	80057f6 <USBD_StdItfReq+0x20>
       USBD_CtlError(pdev , req);
 8005802:	f7ff fe5e 	bl	80054c2 <USBD_CtlError>
 8005806:	e7f6      	b.n	80057f6 <USBD_StdItfReq+0x20>
     USBD_CtlError(pdev , req);
 8005808:	f7ff fe5b 	bl	80054c2 <USBD_CtlError>
    break;
 800580c:	e7f3      	b.n	80057f6 <USBD_StdItfReq+0x20>

0800580e <USBD_StdEPReq>:
{
 800580e:	b538      	push	{r3, r4, r5, lr}
 8005810:	4605      	mov	r5, r0
 8005812:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8005814:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8005816:	780b      	ldrb	r3, [r1, #0]
 8005818:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800581c:	2b20      	cmp	r3, #32
 800581e:	d105      	bne.n	800582c <USBD_StdEPReq+0x1e>
    pdev->pClass->Setup (pdev, req);
 8005820:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	4798      	blx	r3
}
 8005828:	2000      	movs	r0, #0
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 800582e:	7863      	ldrb	r3, [r4, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d025      	beq.n	8005880 <USBD_StdEPReq+0x72>
 8005834:	2b00      	cmp	r3, #0
 8005836:	d047      	beq.n	80058c8 <USBD_StdEPReq+0xba>
 8005838:	2b03      	cmp	r3, #3
 800583a:	d1f5      	bne.n	8005828 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 800583c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005840:	2b02      	cmp	r3, #2
 8005842:	d005      	beq.n	8005850 <USBD_StdEPReq+0x42>
 8005844:	2b03      	cmp	r3, #3
 8005846:	d00a      	beq.n	800585e <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 8005848:	4621      	mov	r1, r4
 800584a:	f7ff fe3a 	bl	80054c2 <USBD_CtlError>
      break;    
 800584e:	e7eb      	b.n	8005828 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005850:	2900      	cmp	r1, #0
 8005852:	d0e9      	beq.n	8005828 <USBD_StdEPReq+0x1a>
 8005854:	2980      	cmp	r1, #128	; 0x80
 8005856:	d0e7      	beq.n	8005828 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8005858:	f000 fea3 	bl	80065a2 <USBD_LL_StallEP>
 800585c:	e7e4      	b.n	8005828 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800585e:	8863      	ldrh	r3, [r4, #2]
 8005860:	b923      	cbnz	r3, 800586c <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005862:	b119      	cbz	r1, 800586c <USBD_StdEPReq+0x5e>
 8005864:	2980      	cmp	r1, #128	; 0x80
 8005866:	d001      	beq.n	800586c <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 8005868:	f000 fe9b 	bl	80065a2 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 800586c:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	4621      	mov	r1, r4
 8005874:	4628      	mov	r0, r5
 8005876:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8005878:	4628      	mov	r0, r5
 800587a:	f000 f89d 	bl	80059b8 <USBD_CtlSendStatus>
      break;
 800587e:	e7d3      	b.n	8005828 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8005880:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8005884:	2b02      	cmp	r3, #2
 8005886:	d005      	beq.n	8005894 <USBD_StdEPReq+0x86>
 8005888:	2b03      	cmp	r3, #3
 800588a:	d00a      	beq.n	80058a2 <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 800588c:	4621      	mov	r1, r4
 800588e:	f7ff fe18 	bl	80054c2 <USBD_CtlError>
      break;    
 8005892:	e7c9      	b.n	8005828 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8005894:	2900      	cmp	r1, #0
 8005896:	d0c7      	beq.n	8005828 <USBD_StdEPReq+0x1a>
 8005898:	2980      	cmp	r1, #128	; 0x80
 800589a:	d0c5      	beq.n	8005828 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 800589c:	f000 fe81 	bl	80065a2 <USBD_LL_StallEP>
 80058a0:	e7c2      	b.n	8005828 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80058a2:	8863      	ldrh	r3, [r4, #2]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1bf      	bne.n	8005828 <USBD_StdEPReq+0x1a>
        if ((ep_addr & 0x7F) != 0x00) 
 80058a8:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80058ac:	d103      	bne.n	80058b6 <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 80058ae:	4628      	mov	r0, r5
 80058b0:	f000 f882 	bl	80059b8 <USBD_CtlSendStatus>
 80058b4:	e7b8      	b.n	8005828 <USBD_StdEPReq+0x1a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80058b6:	f000 fe82 	bl	80065be <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80058ba:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	4621      	mov	r1, r4
 80058c2:	4628      	mov	r0, r5
 80058c4:	4798      	blx	r3
 80058c6:	e7f2      	b.n	80058ae <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 80058c8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d005      	beq.n	80058dc <USBD_StdEPReq+0xce>
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d009      	beq.n	80058e8 <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 80058d4:	4621      	mov	r1, r4
 80058d6:	f7ff fdf4 	bl	80054c2 <USBD_CtlError>
      break;
 80058da:	e7a5      	b.n	8005828 <USBD_StdEPReq+0x1a>
      if ((ep_addr & 0x7F) != 0x00) 
 80058dc:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80058e0:	d0a2      	beq.n	8005828 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 80058e2:	f000 fe5e 	bl	80065a2 <USBD_LL_StallEP>
 80058e6:	e79f      	b.n	8005828 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80058e8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80058ec:	d111      	bne.n	8005912 <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80058ee:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80058f2:	3410      	adds	r4, #16
 80058f4:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 80058f8:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80058fa:	4628      	mov	r0, r5
 80058fc:	f000 fe6d 	bl	80065da <USBD_LL_IsStallEP>
 8005900:	b170      	cbz	r0, 8005920 <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 8005902:	2301      	movs	r3, #1
 8005904:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 8005906:	2202      	movs	r2, #2
 8005908:	4621      	mov	r1, r4
 800590a:	4628      	mov	r0, r5
 800590c:	f000 f828 	bl	8005960 <USBD_CtlSendData>
      break;
 8005910:	e78a      	b.n	8005828 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8005912:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 8005916:	3401      	adds	r4, #1
 8005918:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 800591c:	3404      	adds	r4, #4
 800591e:	e7ec      	b.n	80058fa <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 8005920:	2300      	movs	r3, #0
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	e7ef      	b.n	8005906 <USBD_StdEPReq+0xf8>

08005926 <USBD_GetString>:
  if (desc != NULL) 
 8005926:	b1d0      	cbz	r0, 800595e <USBD_GetString+0x38>
{
 8005928:	b570      	push	{r4, r5, r6, lr}
 800592a:	460d      	mov	r5, r1
 800592c:	4616      	mov	r6, r2
 800592e:	4604      	mov	r4, r0
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8005930:	f7ff fd99 	bl	8005466 <USBD_GetLen>
 8005934:	3001      	adds	r0, #1
 8005936:	0040      	lsls	r0, r0, #1
 8005938:	b280      	uxth	r0, r0
 800593a:	8030      	strh	r0, [r6, #0]
    unicode[idx++] = *len;
 800593c:	7028      	strb	r0, [r5, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 800593e:	2303      	movs	r3, #3
 8005940:	706b      	strb	r3, [r5, #1]
 8005942:	2302      	movs	r3, #2
    while (*desc != '\0') 
 8005944:	e007      	b.n	8005956 <USBD_GetString+0x30>
      unicode[idx++] = *desc++;
 8005946:	3401      	adds	r4, #1
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	b2d2      	uxtb	r2, r2
 800594c:	54e9      	strb	r1, [r5, r3]
      unicode[idx++] =  0x00;
 800594e:	3302      	adds	r3, #2
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2100      	movs	r1, #0
 8005954:	54a9      	strb	r1, [r5, r2]
    while (*desc != '\0') 
 8005956:	7821      	ldrb	r1, [r4, #0]
 8005958:	2900      	cmp	r1, #0
 800595a:	d1f4      	bne.n	8005946 <USBD_GetString+0x20>
}
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	4770      	bx	lr

08005960 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8005960:	b510      	push	{r4, lr}
 8005962:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8005964:	2202      	movs	r2, #2
 8005966:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800596a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800596c:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800596e:	460a      	mov	r2, r1
 8005970:	2100      	movs	r1, #0
 8005972:	f000 fe53 	bl	800661c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005976:	2000      	movs	r0, #0
 8005978:	bd10      	pop	{r4, pc}

0800597a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800597a:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800597c:	4613      	mov	r3, r2
 800597e:	460a      	mov	r2, r1
 8005980:	2100      	movs	r1, #0
 8005982:	f000 fe4b 	bl	800661c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8005986:	2000      	movs	r0, #0
 8005988:	bd08      	pop	{r3, pc}

0800598a <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800598a:	b510      	push	{r4, lr}
 800598c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800598e:	2203      	movs	r2, #3
 8005990:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8005994:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 8005998:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800599c:	460a      	mov	r2, r1
 800599e:	2100      	movs	r1, #0
 80059a0:	f000 fe4a 	bl	8006638 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80059a4:	2000      	movs	r0, #0
 80059a6:	bd10      	pop	{r4, pc}

080059a8 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80059a8:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80059aa:	4613      	mov	r3, r2
 80059ac:	460a      	mov	r2, r1
 80059ae:	2100      	movs	r1, #0
 80059b0:	f000 fe42 	bl	8006638 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80059b4:	2000      	movs	r0, #0
 80059b6:	bd08      	pop	{r3, pc}

080059b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80059b8:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80059ba:	2304      	movs	r3, #4
 80059bc:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80059c0:	2300      	movs	r3, #0
 80059c2:	461a      	mov	r2, r3
 80059c4:	4619      	mov	r1, r3
 80059c6:	f000 fe29 	bl	800661c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80059ca:	2000      	movs	r0, #0
 80059cc:	bd08      	pop	{r3, pc}

080059ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80059ce:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80059d0:	2305      	movs	r3, #5
 80059d2:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80059d6:	2300      	movs	r3, #0
 80059d8:	461a      	mov	r2, r3
 80059da:	4619      	mov	r1, r3
 80059dc:	f000 fe2c 	bl	8006638 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80059e0:	2000      	movs	r0, #0
 80059e2:	bd08      	pop	{r3, pc}

080059e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059e8:	2400      	movs	r4, #0
 80059ea:	940c      	str	r4, [sp, #48]	; 0x30
 80059ec:	940d      	str	r4, [sp, #52]	; 0x34
 80059ee:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059f0:	9405      	str	r4, [sp, #20]
 80059f2:	9406      	str	r4, [sp, #24]
 80059f4:	9407      	str	r4, [sp, #28]
 80059f6:	9408      	str	r4, [sp, #32]
 80059f8:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059fa:	9401      	str	r4, [sp, #4]
 80059fc:	9402      	str	r4, [sp, #8]
 80059fe:	9403      	str	r4, [sp, #12]
 8005a00:	9404      	str	r4, [sp, #16]

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8005a02:	2309      	movs	r3, #9
 8005a04:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a0a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a0c:	2501      	movs	r5, #1
 8005a0e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005a10:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a12:	2602      	movs	r6, #2
 8005a14:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a16:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8005a18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005a1c:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a1e:	a80a      	add	r0, sp, #40	; 0x28
 8005a20:	f7fd f8f6 	bl	8002c10 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a24:	230f      	movs	r3, #15
 8005a26:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a28:	9606      	str	r6, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a2a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a30:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a32:	9409      	str	r4, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8005a34:	4629      	mov	r1, r5
 8005a36:	a805      	add	r0, sp, #20
 8005a38:	f7fd fb22 	bl	8003080 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 8005a3c:	2313      	movs	r3, #19
 8005a3e:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a44:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005a4c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005a50:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a52:	a801      	add	r0, sp, #4
 8005a54:	f7fd fc0e 	bl	8003274 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8005a58:	b014      	add	sp, #80	; 0x50
 8005a5a:	bd70      	pop	{r4, r5, r6, pc}

08005a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8005a5c:	b570      	push	{r4, r5, r6, lr}
 8005a5e:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005a60:	2500      	movs	r5, #0
 8005a62:	9501      	str	r5, [sp, #4]
 8005a64:	9502      	str	r5, [sp, #8]
 8005a66:	9503      	str	r5, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Common config
  */
  hadc1.Instance = ADC1;
 8005a68:	4c0c      	ldr	r4, [pc, #48]	; (8005a9c <MX_ADC1_Init+0x40>)
 8005a6a:	4b0d      	ldr	r3, [pc, #52]	; (8005aa0 <MX_ADC1_Init+0x44>)
 8005a6c:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005a6e:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005a70:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005a72:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005a74:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8005a78:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005a7a:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005a7c:	2601      	movs	r6, #1
 8005a7e:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005a80:	4620      	mov	r0, r4
 8005a82:	f7fb fab7 	bl	8000ff4 <HAL_ADC_Init>
  {
    Error_Handler();
  }
  /**Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005a86:	230c      	movs	r3, #12
 8005a88:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005a8a:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005a8c:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005a8e:	a901      	add	r1, sp, #4
 8005a90:	4620      	mov	r0, r4
 8005a92:	f7fb f9eb 	bl	8000e6c <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005a96:	b004      	add	sp, #16
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	bf00      	nop
 8005a9c:	2000060c 	.word	0x2000060c
 8005aa0:	40012400 	.word	0x40012400

08005aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8005aa4:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005aa6:	4809      	ldr	r0, [pc, #36]	; (8005acc <MX_I2C1_Init+0x28>)
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <MX_I2C1_Init+0x2c>)
 8005aaa:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <MX_I2C1_Init+0x30>)
 8005aae:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005ab4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005aba:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005abc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005abe:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ac0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005ac2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005ac4:	f7fb fe3a 	bl	800173c <HAL_I2C_Init>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005ac8:	bd08      	pop	{r3, pc}
 8005aca:	bf00      	nop
 8005acc:	200005b8 	.word	0x200005b8
 8005ad0:	40005400 	.word	0x40005400
 8005ad4:	000186a0 	.word	0x000186a0

08005ad8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8005ad8:	b530      	push	{r4, r5, lr}
 8005ada:	b083      	sub	sp, #12

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8005adc:	2400      	movs	r4, #0
 8005ade:	f8ad 4004 	strh.w	r4, [sp, #4]
 8005ae2:	f88d 4006 	strb.w	r4, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8005ae6:	9400      	str	r4, [sp, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005ae8:	4d12      	ldr	r5, [pc, #72]	; (8005b34 <MX_RTC_Init+0x5c>)
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <MX_RTC_Init+0x60>)
 8005aec:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295
 8005af2:	606b      	str	r3, [r5, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8005af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005af8:	60ab      	str	r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005afa:	4628      	mov	r0, r5
 8005afc:	f7fd fe86 	bl	800380c <HAL_RTC_Init>

  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8005b00:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 8005b04:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 8005b08:	f88d 4006 	strb.w	r4, [sp, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	a901      	add	r1, sp, #4
 8005b10:	4628      	mov	r0, r5
 8005b12:	f7fd fd91 	bl	8003638 <HAL_RTC_SetTime>
  {
    Error_Handler();
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8005b16:	2201      	movs	r2, #1
 8005b18:	f88d 2000 	strb.w	r2, [sp]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005b1c:	f88d 2001 	strb.w	r2, [sp, #1]
  DateToUpdate.Date = 0x1;
 8005b20:	f88d 2002 	strb.w	r2, [sp, #2]
  DateToUpdate.Year = 0x0;
 8005b24:	f88d 4003 	strb.w	r4, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8005b28:	4669      	mov	r1, sp
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	f7fd fde4 	bl	80036f8 <HAL_RTC_SetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005b30:	b003      	add	sp, #12
 8005b32:	bd30      	pop	{r4, r5, pc}
 8005b34:	2000063c 	.word	0x2000063c
 8005b38:	40002800 	.word	0x40002800

08005b3c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 8005b3c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005b3e:	480c      	ldr	r0, [pc, #48]	; (8005b70 <MX_SPI2_Init+0x34>)
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <MX_SPI2_Init+0x38>)
 8005b42:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005b44:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005b48:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b4e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b50:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b52:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005b54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b58:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005b5e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005b60:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b62:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005b64:	230a      	movs	r3, #10
 8005b66:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005b68:	f7fe f894 	bl	8003c94 <HAL_SPI_Init>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005b6c:	bd08      	pop	{r3, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000520 	.word	0x20000520
 8005b74:	40003800 	.word	0x40003800

08005b78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8005b78:	b530      	push	{r4, r5, lr}
 8005b7a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b7c:	2400      	movs	r4, #0
 8005b7e:	9402      	str	r4, [sp, #8]
 8005b80:	9403      	str	r4, [sp, #12]
 8005b82:	9404      	str	r4, [sp, #16]
 8005b84:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b86:	9400      	str	r4, [sp, #0]
 8005b88:	9401      	str	r4, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b8a:	4d0f      	ldr	r5, [pc, #60]	; (8005bc8 <MX_TIM2_Init+0x50>)
 8005b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b90:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 479;
 8005b92:	f240 13df 	movw	r3, #479	; 0x1df
 8005b96:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b98:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1000000;
 8005b9a:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <MX_TIM2_Init+0x54>)
 8005b9c:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b9e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ba0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f7fe f9da 	bl	8003f5c <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bac:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005bae:	a902      	add	r1, sp, #8
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	f7fe f911 	bl	8003dd8 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bb6:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bb8:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005bba:	4669      	mov	r1, sp
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f7fe f9e9 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005bc2:	b007      	add	sp, #28
 8005bc4:	bd30      	pop	{r4, r5, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000650 	.word	0x20000650
 8005bcc:	000f4240 	.word	0x000f4240

08005bd0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8005bd0:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005bd2:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <MX_USART3_UART_Init+0x24>)
 8005bd4:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <MX_USART3_UART_Init+0x28>)
 8005bd6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8005bd8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005bdc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005bde:	2300      	movs	r3, #0
 8005be0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005be2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005be4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005be6:	220c      	movs	r2, #12
 8005be8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005bea:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005bec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005bee:	f7fe fb51 	bl	8004294 <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005bf2:	bd08      	pop	{r3, pc}
 8005bf4:	20000578 	.word	0x20000578
 8005bf8:	40004800 	.word	0x40004800

08005bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8005bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c00:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c02:	2400      	movs	r4, #0
 8005c04:	9404      	str	r4, [sp, #16]
 8005c06:	9405      	str	r4, [sp, #20]
 8005c08:	9406      	str	r4, [sp, #24]
 8005c0a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c0c:	4b3a      	ldr	r3, [pc, #232]	; (8005cf8 <MX_GPIO_Init+0xfc>)
 8005c0e:	699a      	ldr	r2, [r3, #24]
 8005c10:	f042 0210 	orr.w	r2, r2, #16
 8005c14:	619a      	str	r2, [r3, #24]
 8005c16:	699a      	ldr	r2, [r3, #24]
 8005c18:	f002 0210 	and.w	r2, r2, #16
 8005c1c:	9200      	str	r2, [sp, #0]
 8005c1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	f042 0220 	orr.w	r2, r2, #32
 8005c26:	619a      	str	r2, [r3, #24]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	f002 0220 	and.w	r2, r2, #32
 8005c2e:	9201      	str	r2, [sp, #4]
 8005c30:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	f042 0204 	orr.w	r2, r2, #4
 8005c38:	619a      	str	r2, [r3, #24]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	f002 0204 	and.w	r2, r2, #4
 8005c40:	9202      	str	r2, [sp, #8]
 8005c42:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	f042 0208 	orr.w	r2, r2, #8
 8005c4a:	619a      	str	r2, [r3, #24]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	9303      	str	r3, [sp, #12]
 8005c54:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005c56:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8005d04 <MX_GPIO_Init+0x108>
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c60:	4648      	mov	r0, r9
 8005c62:	f7fb fc01 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|DW_RESET_Pin|DW_NSS_Pin|DW_WKUP_Pin, GPIO_PIN_RESET);
 8005c66:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005d08 <MX_GPIO_Init+0x10c>
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	f240 7104 	movw	r1, #1796	; 0x704
 8005c70:	4640      	mov	r0, r8
 8005c72:	f7fb fbf9 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_GPIO_Port, IR_Pin, GPIO_PIN_RESET);
 8005c76:	4e21      	ldr	r6, [pc, #132]	; (8005cfc <MX_GPIO_Init+0x100>)
 8005c78:	4622      	mov	r2, r4
 8005c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7fb fbf2 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8005c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c88:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c8a:	2501      	movs	r5, #1
 8005c8c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c90:	2702      	movs	r7, #2
 8005c92:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005c94:	a904      	add	r1, sp, #16
 8005c96:	4648      	mov	r0, r9
 8005c98:	f7fb faf2 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_Pin */
  GPIO_InitStruct.Pin = BUT_Pin;
 8005c9c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ca0:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8005ca2:	a904      	add	r1, sp, #16
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	f7fb faeb 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin DW_RESET_Pin DW_NSS_Pin DW_WKUP_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|DW_RESET_Pin|DW_NSS_Pin|DW_WKUP_Pin;
 8005caa:	f240 7304 	movw	r3, #1796	; 0x704
 8005cae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cb0:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cb4:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb6:	a904      	add	r1, sp, #16
 8005cb8:	4640      	mov	r0, r8
 8005cba:	f7fb fae1 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 8005cbe:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005cc0:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <MX_GPIO_Init+0x104>)
 8005cc2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc4:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8005cc6:	a904      	add	r1, sp, #16
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f7fb fad9 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_LED_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 8005cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cd2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005cd4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cd6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cd8:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 8005cda:	a904      	add	r1, sp, #16
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f7fb facf 	bl	8001280 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	2006      	movs	r0, #6
 8005ce8:	f7fb fa1c 	bl	8001124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005cec:	2006      	movs	r0, #6
 8005cee:	f7fb fa4b 	bl	8001188 <HAL_NVIC_EnableIRQ>

}
 8005cf2:	b009      	add	sp, #36	; 0x24
 8005cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	40010c00 	.word	0x40010c00
 8005d00:	10110000 	.word	0x10110000
 8005d04:	40011000 	.word	0x40011000
 8005d08:	40010800 	.word	0x40010800

08005d0c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005d0c:	4770      	bx	lr
	...

08005d10 <Start_Measuring_Time>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Start_Measuring_Time()
{
 8005d10:	b508      	push	{r3, lr}
	TIM2->CNT = 0;
 8005d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d16:	2200      	movs	r2, #0
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8005d1a:	4802      	ldr	r0, [pc, #8]	; (8005d24 <Start_Measuring_Time+0x14>)
 8005d1c:	f7fe f836 	bl	8003d8c <HAL_TIM_Base_Start>
}
 8005d20:	bd08      	pop	{r3, pc}
 8005d22:	bf00      	nop
 8005d24:	20000650 	.word	0x20000650

08005d28 <Stop_Measuring_Time>:

uint32_t Stop_Measuring_Time()
{
 8005d28:	b508      	push	{r3, lr}
	 HAL_TIM_Base_Stop(&htim2);
 8005d2a:	4803      	ldr	r0, [pc, #12]	; (8005d38 <Stop_Measuring_Time+0x10>)
 8005d2c:	f7fe f83c 	bl	8003da8 <HAL_TIM_Base_Stop>
	 return TIM2->CNT;
 8005d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d34:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8005d36:	bd08      	pop	{r3, pc}
 8005d38:	20000650 	.word	0x20000650

08005d3c <Send_Timestamp>:

void Send_Timestamp(uint64_t timestamp)
{
 8005d3c:	b500      	push	{lr}
 8005d3e:	b089      	sub	sp, #36	; 0x24
		uint32_t var32[2];
	}combined_t;

	combined_t combinedVar;
	combinedVar.var64 = timestamp;
	HAL_UART_Transmit(&huart3, uartBuffer, sprintf(uartBuffer, "%ld %ld \r \n", combinedVar.var32[1], combinedVar.var32[0]), 100U);
 8005d40:	4603      	mov	r3, r0
 8005d42:	460a      	mov	r2, r1
 8005d44:	4906      	ldr	r1, [pc, #24]	; (8005d60 <Send_Timestamp+0x24>)
 8005d46:	4668      	mov	r0, sp
 8005d48:	f001 fe8a 	bl	8007a60 <siprintf>
 8005d4c:	2364      	movs	r3, #100	; 0x64
 8005d4e:	b282      	uxth	r2, r0
 8005d50:	4669      	mov	r1, sp
 8005d52:	4804      	ldr	r0, [pc, #16]	; (8005d64 <Send_Timestamp+0x28>)
 8005d54:	f7fe fad0 	bl	80042f8 <HAL_UART_Transmit>


}
 8005d58:	b009      	add	sp, #36	; 0x24
 8005d5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d5e:	bf00      	nop
 8005d60:	08008408 	.word	0x08008408
 8005d64:	20000578 	.word	0x20000578

08005d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d6c:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN 1 */
	uint8_t cnt = 0;
	char startBuf[] = {"Dobry"};
 8005d6e:	4b7b      	ldr	r3, [pc, #492]	; (8005f5c <main+0x1f4>)
 8005d70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005d74:	900a      	str	r0, [sp, #40]	; 0x28
 8005d76:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
	char usbBuf[20];
	GPIO_InitTypeDef ledDef;
	ledDef.Mode = GPIO_MODE_OUTPUT_PP;
 8005d7a:	2401      	movs	r4, #1
 8005d7c:	9407      	str	r4, [sp, #28]
	ledDef.Pin = LED_Pin;
 8005d7e:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8005d82:	9506      	str	r5, [sp, #24]
	ledDef.Pull = GPIO_NOPULL;
 8005d84:	2600      	movs	r6, #0
 8005d86:	9608      	str	r6, [sp, #32]
	ledDef.Speed = GPIO_SPEED_FREQ_LOW;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d8c:	f7fb f836 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d90:	f7ff fe28 	bl	80059e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d94:	f7ff ff32 	bl	8005bfc <MX_GPIO_Init>
  MX_SPI2_Init();
 8005d98:	f7ff fed0 	bl	8005b3c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8005d9c:	f7ff ff18 	bl	8005bd0 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8005da0:	f7ff fe80 	bl	8005aa4 <MX_I2C1_Init>
  MX_RTC_Init();
 8005da4:	f7ff fe98 	bl	8005ad8 <MX_RTC_Init>
  MX_TIM2_Init();
 8005da8:	f7ff fee6 	bl	8005b78 <MX_TIM2_Init>
  MX_ADC1_Init();
 8005dac:	f7ff fe56 	bl	8005a5c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8005db0:	f000 fab2 	bl	8006318 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005db4:	4b6a      	ldr	r3, [pc, #424]	; (8005f60 <main+0x1f8>)
 8005db6:	699a      	ldr	r2, [r3, #24]
 8005db8:	f042 0210 	orr.w	r2, r2, #16
 8005dbc:	619a      	str	r2, [r3, #24]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	9301      	str	r3, [sp, #4]
 8005dc6:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(LED_GPIO_Port, &ledDef);
 8005dc8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8005f98 <main+0x230>
 8005dcc:	a906      	add	r1, sp, #24
 8005dce:	4648      	mov	r0, r9
 8005dd0:	f7fb fa56 	bl	8001280 <HAL_GPIO_Init>

#ifdef NUCLEO
  ledDef.Pin = IR_Pin;
 8005dd4:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8005dd8:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(IR_GPIO_Port, &ledDef);
 8005ddc:	4f61      	ldr	r7, [pc, #388]	; (8005f64 <main+0x1fc>)
 8005dde:	a906      	add	r1, sp, #24
 8005de0:	4638      	mov	r0, r7
 8005de2:	f7fb fa4d 	bl	8001280 <HAL_GPIO_Init>
#endif
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8005de6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005dea:	f7fc feef 	bl	8002bcc <HAL_PWR_DisableWakeUpPin>

  GPIO_InitTypeDef butDef;
  butDef.Pin = BUT_Pin;
 8005dee:	9402      	str	r4, [sp, #8]
  butDef.Mode = GPIO_MODE_INPUT;
 8005df0:	9603      	str	r6, [sp, #12]
  butDef.Pull = GPIO_PULLUP;
 8005df2:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(BUT_GPIO_Port, &butDef);
 8005df4:	a902      	add	r1, sp, #8
 8005df6:	485c      	ldr	r0, [pc, #368]	; (8005f68 <main+0x200>)
 8005df8:	f7fb fa42 	bl	8001280 <HAL_GPIO_Init>
  UWB_Anchor_Init();
  globalUWBData.timeout = 2750;
#endif

#ifdef TAG
  UWB_Tag_Init();
 8005dfc:	f001 fbbc 	bl	8007578 <UWB_Tag_Init>
  globalUWBData.timeout = POLL_RX_TO_RESP_TX_DLY_UUS;
 8005e00:	4b5a      	ldr	r3, [pc, #360]	; (8005f6c <main+0x204>)
 8005e02:	f640 3222 	movw	r2, #2850	; 0xb22
 8005e06:	825a      	strh	r2, [r3, #18]
  newTxDelay = TX_ANT_DLY;
 8005e08:	f244 0360 	movw	r3, #16480	; 0x4060
 8005e0c:	4a58      	ldr	r2, [pc, #352]	; (8005f70 <main+0x208>)
 8005e0e:	8013      	strh	r3, [r2, #0]
  oldTxDelay = newTxDelay;
 8005e10:	4a58      	ldr	r2, [pc, #352]	; (8005f74 <main+0x20c>)
 8005e12:	8013      	strh	r3, [r2, #0]
#endif

#endif

  deviceID = dwt_readdevid();
 8005e14:	f000 fd12 	bl	800683c <dwt_readdevid>
 8005e18:	4b57      	ldr	r3, [pc, #348]	; (8005f78 <main+0x210>)
 8005e1a:	6018      	str	r0, [r3, #0]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_ACTIVE_STATE);
 8005e1c:	4622      	mov	r2, r4
 8005e1e:	4629      	mov	r1, r5
 8005e20:	4648      	mov	r0, r9
 8005e22:	f7fb fb21 	bl	8001468 <HAL_GPIO_WritePin>

#ifdef NUCLEO
  HAL_GPIO_WritePin(IR_GPIO_Port, IR_Pin, LED_ACTIVE_STATE);
 8005e26:	4622      	mov	r2, r4
 8005e28:	4641      	mov	r1, r8
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	f7fb fb1c 	bl	8001468 <HAL_GPIO_WritePin>
#endif
  HAL_UART_Transmit(&huart3, startBuf, sizeof(startBuf), 100U);
 8005e30:	2364      	movs	r3, #100	; 0x64
 8005e32:	2206      	movs	r2, #6
 8005e34:	a90a      	add	r1, sp, #40	; 0x28
 8005e36:	4851      	ldr	r0, [pc, #324]	; (8005f7c <main+0x214>)
 8005e38:	f7fe fa5e 	bl	80042f8 <HAL_UART_Transmit>
 8005e3c:	e02e      	b.n	8005e9c <main+0x134>
if(usbRxFlag == 1)
{
	  usbRxFlag = 0;
	  if(usbRxBuffer[0] == 'g')
	  {
		  transmitEnable = 1;
 8005e3e:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <main+0x210>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	715a      	strb	r2, [r3, #5]
		  CDC_Transmit_FS(intBuf, sprintf(intBuf, "GO \r \n"));
 8005e44:	4b4e      	ldr	r3, [pc, #312]	; (8005f80 <main+0x218>)
 8005e46:	4a4f      	ldr	r2, [pc, #316]	; (8005f84 <main+0x21c>)
 8005e48:	6810      	ldr	r0, [r2, #0]
 8005e4a:	6018      	str	r0, [r3, #0]
 8005e4c:	8891      	ldrh	r1, [r2, #4]
 8005e4e:	7992      	ldrb	r2, [r2, #6]
 8005e50:	8099      	strh	r1, [r3, #4]
 8005e52:	719a      	strb	r2, [r3, #6]
 8005e54:	2106      	movs	r1, #6
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fab8 	bl	80063cc <CDC_Transmit_FS>
 8005e5c:	e02b      	b.n	8005eb6 <main+0x14e>

	  }

	  if(usbRxBuffer[0] == 'h')
	  {
		  transmitEnable = 0;
 8005e5e:	4b46      	ldr	r3, [pc, #280]	; (8005f78 <main+0x210>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	715a      	strb	r2, [r3, #5]
		  CDC_Transmit_FS(intBuf, sprintf(intBuf, "HALT \r \n"));
 8005e64:	4a46      	ldr	r2, [pc, #280]	; (8005f80 <main+0x218>)
 8005e66:	4b48      	ldr	r3, [pc, #288]	; (8005f88 <main+0x220>)
 8005e68:	cb03      	ldmia	r3!, {r0, r1}
 8005e6a:	6010      	str	r0, [r2, #0]
 8005e6c:	6051      	str	r1, [r2, #4]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	7213      	strb	r3, [r2, #8]
 8005e72:	2108      	movs	r1, #8
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 faa9 	bl	80063cc <CDC_Transmit_FS>
 8005e7a:	e020      	b.n	8005ebe <main+0x156>
	  if(usbRxBuffer[0] == 'c')
	  {
		  currentAnchor = (usbRxBuffer[1]-48); //ASCII 1-4
		  CDC_Transmit_FS(intBuf, sprintf(intBuf, "CURRENT ANCHOR: %i \r \n", currentAnchor));
	  }
      if(usbRxBuffer[0] == 'a')
 8005e7c:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <main+0x224>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b61      	cmp	r3, #97	; 0x61
 8005e82:	d030      	beq.n	8005ee6 <main+0x17e>

}



if(UWB_Tag_Get_Distance(&globalUWBData, currentAnchor) == 2)
 8005e84:	4d42      	ldr	r5, [pc, #264]	; (8005f90 <main+0x228>)
 8005e86:	4c39      	ldr	r4, [pc, #228]	; (8005f6c <main+0x204>)
 8005e88:	7829      	ldrb	r1, [r5, #0]
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f001 fba4 	bl	80075d8 <UWB_Tag_Get_Distance>

	//Tutaj raczej odczytaj bufor a nie probuj znowu receive robic.
	//if(UWB_Get_Data(intBuf) == 0) <- odczyt z bufora tylko.
	//CDC_Transmit_FS(intBuf, 40);
}
if(UWB_Tag_Get_Distance(&globalUWBData, currentAnchor) == 0)
 8005e90:	7829      	ldrb	r1, [r5, #0]
 8005e92:	4620      	mov	r0, r4
 8005e94:	f001 fba0 	bl	80075d8 <UWB_Tag_Get_Distance>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d03e      	beq.n	8005f1a <main+0x1b2>
Start_Measuring_Time();
 8005e9c:	f7ff ff38 	bl	8005d10 <Start_Measuring_Time>
if(usbRxFlag == 1)
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <main+0x210>)
 8005ea2:	791b      	ldrb	r3, [r3, #4]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d1ed      	bne.n	8005e84 <main+0x11c>
	  usbRxFlag = 0;
 8005ea8:	4b33      	ldr	r3, [pc, #204]	; (8005f78 <main+0x210>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	711a      	strb	r2, [r3, #4]
	  if(usbRxBuffer[0] == 'g')
 8005eae:	4b37      	ldr	r3, [pc, #220]	; (8005f8c <main+0x224>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b67      	cmp	r3, #103	; 0x67
 8005eb4:	d0c3      	beq.n	8005e3e <main+0xd6>
	  if(usbRxBuffer[0] == 'h')
 8005eb6:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <main+0x224>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b68      	cmp	r3, #104	; 0x68
 8005ebc:	d0cf      	beq.n	8005e5e <main+0xf6>
	  if(usbRxBuffer[0] == 'c')
 8005ebe:	4b33      	ldr	r3, [pc, #204]	; (8005f8c <main+0x224>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b63      	cmp	r3, #99	; 0x63
 8005ec4:	d1da      	bne.n	8005e7c <main+0x114>
		  currentAnchor = (usbRxBuffer[1]-48); //ASCII 1-4
 8005ec6:	4b31      	ldr	r3, [pc, #196]	; (8005f8c <main+0x224>)
 8005ec8:	785a      	ldrb	r2, [r3, #1]
 8005eca:	3a30      	subs	r2, #48	; 0x30
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	4b30      	ldr	r3, [pc, #192]	; (8005f90 <main+0x228>)
 8005ed0:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS(intBuf, sprintf(intBuf, "CURRENT ANCHOR: %i \r \n", currentAnchor));
 8005ed2:	4c2b      	ldr	r4, [pc, #172]	; (8005f80 <main+0x218>)
 8005ed4:	492f      	ldr	r1, [pc, #188]	; (8005f94 <main+0x22c>)
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	f001 fdc2 	bl	8007a60 <siprintf>
 8005edc:	4601      	mov	r1, r0
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 fa74 	bl	80063cc <CDC_Transmit_FS>
 8005ee4:	e7ca      	b.n	8005e7c <main+0x114>
    	  CDC_Transmit_FS(intBuf, sprintf(intBuf, "CURRENT ANCHOR: %i \r \n", currentAnchor));
 8005ee6:	4c26      	ldr	r4, [pc, #152]	; (8005f80 <main+0x218>)
 8005ee8:	4b29      	ldr	r3, [pc, #164]	; (8005f90 <main+0x228>)
 8005eea:	781a      	ldrb	r2, [r3, #0]
 8005eec:	4929      	ldr	r1, [pc, #164]	; (8005f94 <main+0x22c>)
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f001 fdb6 	bl	8007a60 <siprintf>
 8005ef4:	4601      	mov	r1, r0
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 fa68 	bl	80063cc <CDC_Transmit_FS>
    	  for(uint8_t ledCnt = 0; ledCnt < 10; ledCnt++)
 8005efc:	2400      	movs	r4, #0
 8005efe:	e009      	b.n	8005f14 <main+0x1ac>
			  HAL_GPIO_TogglePin(IR_GPIO_Port, IR_Pin);
 8005f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f04:	4817      	ldr	r0, [pc, #92]	; (8005f64 <main+0x1fc>)
 8005f06:	f7fb fab5 	bl	8001474 <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 8005f0a:	2064      	movs	r0, #100	; 0x64
 8005f0c:	f7fa ff9a 	bl	8000e44 <HAL_Delay>
    	  for(uint8_t ledCnt = 0; ledCnt < 10; ledCnt++)
 8005f10:	3401      	adds	r4, #1
 8005f12:	b2e4      	uxtb	r4, r4
 8005f14:	2c09      	cmp	r4, #9
 8005f16:	d9f3      	bls.n	8005f00 <main+0x198>
 8005f18:	e7b4      	b.n	8005e84 <main+0x11c>
{
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
	CDC_Transmit_FS(intBuf, 40);
}
*/
debugTimer = Stop_Measuring_Time();
 8005f1a:	f7ff ff05 	bl	8005d28 <Stop_Measuring_Time>
 8005f1e:	4b16      	ldr	r3, [pc, #88]	; (8005f78 <main+0x210>)
 8005f20:	6098      	str	r0, [r3, #8]
//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);


if(transmitEnable == 1)
 8005f22:	795b      	ldrb	r3, [r3, #5]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d006      	beq.n	8005f36 <main+0x1ce>
	CDC_Transmit_FS(intBuf, sprintf(intBuf, "\r \n %ldE-9 \r \n", globalUWBData.uwbDistance64));
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, !LED_ACTIVE_STATE);
}
else
{
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_ACTIVE_STATE);
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f2e:	481a      	ldr	r0, [pc, #104]	; (8005f98 <main+0x230>)
 8005f30:	f7fb fa9a 	bl	8001468 <HAL_GPIO_WritePin>
 8005f34:	e7b2      	b.n	8005e9c <main+0x134>
	CDC_Transmit_FS(intBuf, sprintf(intBuf, "\r \n %ldE-9 \r \n", globalUWBData.uwbDistance64));
 8005f36:	4c12      	ldr	r4, [pc, #72]	; (8005f80 <main+0x218>)
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <main+0x204>)
 8005f3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005f3e:	4917      	ldr	r1, [pc, #92]	; (8005f9c <main+0x234>)
 8005f40:	4620      	mov	r0, r4
 8005f42:	f001 fd8d 	bl	8007a60 <siprintf>
 8005f46:	4601      	mov	r1, r0
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fa3f 	bl	80063cc <CDC_Transmit_FS>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, !LED_ACTIVE_STATE);
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f54:	4810      	ldr	r0, [pc, #64]	; (8005f98 <main+0x230>)
 8005f56:	f7fb fa87 	bl	8001468 <HAL_GPIO_WritePin>
 8005f5a:	e79f      	b.n	8005e9c <main+0x134>
 8005f5c:	08008450 	.word	0x08008450
 8005f60:	40021000 	.word	0x40021000
 8005f64:	40010c00 	.word	0x40010c00
 8005f68:	40010800 	.word	0x40010800
 8005f6c:	200006c0 	.word	0x200006c0
 8005f70:	20000774 	.word	0x20000774
 8005f74:	200006a4 	.word	0x200006a4
 8005f78:	20000240 	.word	0x20000240
 8005f7c:	20000578 	.word	0x20000578
 8005f80:	200006e8 	.word	0x200006e8
 8005f84:	08008414 	.word	0x08008414
 8005f88:	0800841c 	.word	0x0800841c
 8005f8c:	2000080c 	.word	0x2000080c
 8005f90:	20000118 	.word	0x20000118
 8005f94:	08008428 	.word	0x08008428
 8005f98:	40011000 	.word	0x40011000
 8005f9c:	08008440 	.word	0x08008440

08005fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fa0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	; (8005fd8 <HAL_MspInit+0x38>)
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	f042 0201 	orr.w	r2, r2, #1
 8005faa:	619a      	str	r2, [r3, #24]
 8005fac:	699a      	ldr	r2, [r3, #24]
 8005fae:	f002 0201 	and.w	r2, r2, #1
 8005fb2:	9200      	str	r2, [sp, #0]
 8005fb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005fb6:	69da      	ldr	r2, [r3, #28]
 8005fb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fbc:	61da      	str	r2, [r3, #28]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /**ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8005fc8:	4a04      	ldr	r2, [pc, #16]	; (8005fdc <HAL_MspInit+0x3c>)
 8005fca:	6853      	ldr	r3, [r2, #4]
 8005fcc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005fd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fd2:	b002      	add	sp, #8
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40010000 	.word	0x40010000

08005fe0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005fe0:	b500      	push	{lr}
 8005fe2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9302      	str	r3, [sp, #8]
 8005fe8:	9303      	str	r3, [sp, #12]
 8005fea:	9304      	str	r3, [sp, #16]
 8005fec:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8005fee:	6802      	ldr	r2, [r0, #0]
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <HAL_ADC_MspInit+0x58>)
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d002      	beq.n	8005ffc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ff6:	b007      	add	sp, #28
 8005ff8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005ffc:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006006:	619a      	str	r2, [r3, #24]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800600e:	9200      	str	r2, [sp, #0]
 8006010:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006012:	699a      	ldr	r2, [r3, #24]
 8006014:	f042 0210 	orr.w	r2, r2, #16
 8006018:	619a      	str	r2, [r3, #24]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006024:	230c      	movs	r3, #12
 8006026:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006028:	2303      	movs	r3, #3
 800602a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800602c:	a902      	add	r1, sp, #8
 800602e:	4803      	ldr	r0, [pc, #12]	; (800603c <HAL_ADC_MspInit+0x5c>)
 8006030:	f7fb f926 	bl	8001280 <HAL_GPIO_Init>
}
 8006034:	e7df      	b.n	8005ff6 <HAL_ADC_MspInit+0x16>
 8006036:	bf00      	nop
 8006038:	40012400 	.word	0x40012400
 800603c:	40011000 	.word	0x40011000

08006040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006040:	b510      	push	{r4, lr}
 8006042:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006044:	2300      	movs	r3, #0
 8006046:	9302      	str	r3, [sp, #8]
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	9304      	str	r3, [sp, #16]
 800604c:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 800604e:	6802      	ldr	r2, [r0, #0]
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <HAL_I2C_MspInit+0x78>)
 8006052:	429a      	cmp	r2, r3
 8006054:	d001      	beq.n	800605a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006056:	b006      	add	sp, #24
 8006058:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605a:	4c18      	ldr	r4, [pc, #96]	; (80060bc <HAL_I2C_MspInit+0x7c>)
 800605c:	69a3      	ldr	r3, [r4, #24]
 800605e:	f043 0308 	orr.w	r3, r3, #8
 8006062:	61a3      	str	r3, [r4, #24]
 8006064:	69a3      	ldr	r3, [r4, #24]
 8006066:	f003 0308 	and.w	r3, r3, #8
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 800606e:	23c0      	movs	r3, #192	; 0xc0
 8006070:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006072:	2312      	movs	r3, #18
 8006074:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006076:	2303      	movs	r3, #3
 8006078:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800607a:	a902      	add	r1, sp, #8
 800607c:	4810      	ldr	r0, [pc, #64]	; (80060c0 <HAL_I2C_MspInit+0x80>)
 800607e:	f7fb f8ff 	bl	8001280 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006082:	69e3      	ldr	r3, [r4, #28]
 8006084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006088:	61e3      	str	r3, [r4, #28]
 800608a:	69e3      	ldr	r3, [r4, #28]
 800608c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006090:	9301      	str	r3, [sp, #4]
 8006092:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 8006094:	2200      	movs	r2, #0
 8006096:	2102      	movs	r1, #2
 8006098:	201f      	movs	r0, #31
 800609a:	f7fb f843 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800609e:	201f      	movs	r0, #31
 80060a0:	f7fb f872 	bl	8001188 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80060a4:	2200      	movs	r2, #0
 80060a6:	4611      	mov	r1, r2
 80060a8:	2020      	movs	r0, #32
 80060aa:	f7fb f83b 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80060ae:	2020      	movs	r0, #32
 80060b0:	f7fb f86a 	bl	8001188 <HAL_NVIC_EnableIRQ>
}
 80060b4:	e7cf      	b.n	8006056 <HAL_I2C_MspInit+0x16>
 80060b6:	bf00      	nop
 80060b8:	40005400 	.word	0x40005400
 80060bc:	40021000 	.word	0x40021000
 80060c0:	40010c00 	.word	0x40010c00

080060c4 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80060c4:	6802      	ldr	r2, [r0, #0]
 80060c6:	4b0f      	ldr	r3, [pc, #60]	; (8006104 <HAL_RTC_MspInit+0x40>)
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d000      	beq.n	80060ce <HAL_RTC_MspInit+0xa>
 80060cc:	4770      	bx	lr
{
 80060ce:	b500      	push	{lr}
 80060d0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80060d2:	f7fc fd75 	bl	8002bc0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <HAL_RTC_MspInit+0x44>)
 80060d8:	69da      	ldr	r2, [r3, #28]
 80060da:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80060de:	61da      	str	r2, [r3, #28]
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80060ea:	2101      	movs	r1, #1
 80060ec:	4b07      	ldr	r3, [pc, #28]	; (800610c <HAL_RTC_MspInit+0x48>)
 80060ee:	6019      	str	r1, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 80060f0:	2200      	movs	r2, #0
 80060f2:	2003      	movs	r0, #3
 80060f4:	f7fb f816 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80060f8:	2003      	movs	r0, #3
 80060fa:	f7fb f845 	bl	8001188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80060fe:	b003      	add	sp, #12
 8006100:	f85d fb04 	ldr.w	pc, [sp], #4
 8006104:	40002800 	.word	0x40002800
 8006108:	40021000 	.word	0x40021000
 800610c:	4242043c 	.word	0x4242043c

08006110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006110:	b570      	push	{r4, r5, r6, lr}
 8006112:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006114:	2300      	movs	r3, #0
 8006116:	9302      	str	r3, [sp, #8]
 8006118:	9303      	str	r3, [sp, #12]
 800611a:	9304      	str	r3, [sp, #16]
 800611c:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI2)
 800611e:	6802      	ldr	r2, [r0, #0]
 8006120:	4b1b      	ldr	r3, [pc, #108]	; (8006190 <HAL_SPI_MspInit+0x80>)
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006126:	b006      	add	sp, #24
 8006128:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800612a:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006134:	61da      	str	r2, [r3, #28]
 8006136:	69da      	ldr	r2, [r3, #28]
 8006138:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800613c:	9200      	str	r2, [sp, #0]
 800613e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	f042 0208 	orr.w	r2, r2, #8
 8006146:	619a      	str	r2, [r3, #24]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	9301      	str	r3, [sp, #4]
 8006150:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MOSI_Pin;
 8006152:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8006156:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006158:	2502      	movs	r5, #2
 800615a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800615c:	2303      	movs	r3, #3
 800615e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006160:	4e0c      	ldr	r6, [pc, #48]	; (8006194 <HAL_SPI_MspInit+0x84>)
 8006162:	a902      	add	r1, sp, #8
 8006164:	4630      	mov	r0, r6
 8006166:	f7fb f88b 	bl	8001280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DW_MISO_Pin;
 800616a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800616e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006170:	2400      	movs	r4, #0
 8006172:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006174:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(DW_MISO_GPIO_Port, &GPIO_InitStruct);
 8006176:	a902      	add	r1, sp, #8
 8006178:	4630      	mov	r0, r6
 800617a:	f7fb f881 	bl	8001280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 800617e:	4622      	mov	r2, r4
 8006180:	4629      	mov	r1, r5
 8006182:	2024      	movs	r0, #36	; 0x24
 8006184:	f7fa ffce 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8006188:	2024      	movs	r0, #36	; 0x24
 800618a:	f7fa fffd 	bl	8001188 <HAL_NVIC_EnableIRQ>
}
 800618e:	e7ca      	b.n	8006126 <HAL_SPI_MspInit+0x16>
 8006190:	40003800 	.word	0x40003800
 8006194:	40010c00 	.word	0x40010c00

08006198 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8006198:	6803      	ldr	r3, [r0, #0]
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800619e:	d000      	beq.n	80061a2 <HAL_TIM_Base_MspInit+0xa>
 80061a0:	4770      	bx	lr
{
 80061a2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80061a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80061a8:	69da      	ldr	r2, [r3, #28]
 80061aa:	f042 0201 	orr.w	r2, r2, #1
 80061ae:	61da      	str	r2, [r3, #28]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80061ba:	b002      	add	sp, #8
 80061bc:	4770      	bx	lr
	...

080061c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061c0:	b530      	push	{r4, r5, lr}
 80061c2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c4:	2300      	movs	r3, #0
 80061c6:	9302      	str	r3, [sp, #8]
 80061c8:	9303      	str	r3, [sp, #12]
 80061ca:	9304      	str	r3, [sp, #16]
 80061cc:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 80061ce:	6802      	ldr	r2, [r0, #0]
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <HAL_UART_MspInit+0x80>)
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d001      	beq.n	80061da <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80061d6:	b007      	add	sp, #28
 80061d8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80061da:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80061e4:	61da      	str	r2, [r3, #28]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80061ec:	9200      	str	r2, [sp, #0]
 80061ee:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061f0:	699a      	ldr	r2, [r3, #24]
 80061f2:	f042 0208 	orr.w	r2, r2, #8
 80061f6:	619a      	str	r2, [r3, #24]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8006202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006206:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006208:	2302      	movs	r3, #2
 800620a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800620c:	2303      	movs	r3, #3
 800620e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8006210:	4d0c      	ldr	r5, [pc, #48]	; (8006244 <HAL_UART_MspInit+0x84>)
 8006212:	a902      	add	r1, sp, #8
 8006214:	4628      	mov	r0, r5
 8006216:	f7fb f833 	bl	8001280 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_RX_Pin;
 800621a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800621e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006220:	2400      	movs	r4, #0
 8006222:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006224:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8006226:	a902      	add	r1, sp, #8
 8006228:	4628      	mov	r0, r5
 800622a:	f7fb f829 	bl	8001280 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800622e:	4622      	mov	r2, r4
 8006230:	2101      	movs	r1, #1
 8006232:	2027      	movs	r0, #39	; 0x27
 8006234:	f7fa ff76 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006238:	2027      	movs	r0, #39	; 0x27
 800623a:	f7fa ffa5 	bl	8001188 <HAL_NVIC_EnableIRQ>
}
 800623e:	e7ca      	b.n	80061d6 <HAL_UART_MspInit+0x16>
 8006240:	40004800 	.word	0x40004800
 8006244:	40010c00 	.word	0x40010c00

08006248 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006248:	4770      	bx	lr

0800624a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800624a:	e7fe      	b.n	800624a <HardFault_Handler>

0800624c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800624c:	e7fe      	b.n	800624c <MemManage_Handler>

0800624e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800624e:	e7fe      	b.n	800624e <BusFault_Handler>

08006250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006250:	e7fe      	b.n	8006250 <UsageFault_Handler>

08006252 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006252:	4770      	bx	lr

08006254 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006254:	4770      	bx	lr

08006256 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006256:	4770      	bx	lr

08006258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006258:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800625a:	f7fa fde1 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800625e:	bd08      	pop	{r3, pc}

08006260 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8006260:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8006262:	4802      	ldr	r0, [pc, #8]	; (800626c <RTC_IRQHandler+0xc>)
 8006264:	f7fd fb3a 	bl	80038dc <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8006268:	bd08      	pop	{r3, pc}
 800626a:	bf00      	nop
 800626c:	2000063c 	.word	0x2000063c

08006270 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006270:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8006272:	2001      	movs	r0, #1
 8006274:	f7fb f902 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006278:	bd08      	pop	{r3, pc}
	...

0800627c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800627c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800627e:	4802      	ldr	r0, [pc, #8]	; (8006288 <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8006280:	f7fc fb7e 	bl	8002980 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006284:	bd08      	pop	{r3, pc}
 8006286:	bf00      	nop
 8006288:	20001228 	.word	0x20001228

0800628c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800628c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800628e:	4802      	ldr	r0, [pc, #8]	; (8006298 <I2C1_EV_IRQHandler+0xc>)
 8006290:	f7fb feca 	bl	8002028 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8006294:	bd08      	pop	{r3, pc}
 8006296:	bf00      	nop
 8006298:	200005b8 	.word	0x200005b8

0800629c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800629c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800629e:	4802      	ldr	r0, [pc, #8]	; (80062a8 <I2C1_ER_IRQHandler+0xc>)
 80062a0:	f7fb ff72 	bl	8002188 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80062a4:	bd08      	pop	{r3, pc}
 80062a6:	bf00      	nop
 80062a8:	200005b8 	.word	0x200005b8

080062ac <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80062ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80062ae:	4802      	ldr	r0, [pc, #8]	; (80062b8 <SPI2_IRQHandler+0xc>)
 80062b0:	f7fd fc6e 	bl	8003b90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80062b4:	bd08      	pop	{r3, pc}
 80062b6:	bf00      	nop
 80062b8:	20000520 	.word	0x20000520

080062bc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80062bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80062be:	4802      	ldr	r0, [pc, #8]	; (80062c8 <USART3_IRQHandler+0xc>)
 80062c0:	f7fe f8f0 	bl	80044a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80062c4:	bd08      	pop	{r3, pc}
 80062c6:	bf00      	nop
 80062c8:	20000578 	.word	0x20000578

080062cc <SystemInit>:
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <SystemInit+0x40>)
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	f042 0201 	orr.w	r2, r2, #1
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	6859      	ldr	r1, [r3, #4]
 80062d8:	4a0d      	ldr	r2, [pc, #52]	; (8006310 <SystemInit+0x44>)
 80062da:	400a      	ands	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80062e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062f0:	601a      	str	r2, [r3, #0]
 80062f2:	685a      	ldr	r2, [r3, #4]
 80062f4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80062f8:	605a      	str	r2, [r3, #4]
 80062fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006304:	4b03      	ldr	r3, [pc, #12]	; (8006314 <SystemInit+0x48>)
 8006306:	609a      	str	r2, [r3, #8]
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40021000 	.word	0x40021000
 8006310:	f8ff0000 	.word	0xf8ff0000
 8006314:	e000ed00 	.word	0xe000ed00

08006318 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006318:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800631a:	4c09      	ldr	r4, [pc, #36]	; (8006340 <MX_USB_DEVICE_Init+0x28>)
 800631c:	2200      	movs	r2, #0
 800631e:	4909      	ldr	r1, [pc, #36]	; (8006344 <MX_USB_DEVICE_Init+0x2c>)
 8006320:	4620      	mov	r0, r4
 8006322:	f7fe ff70 	bl	8005206 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8006326:	4908      	ldr	r1, [pc, #32]	; (8006348 <MX_USB_DEVICE_Init+0x30>)
 8006328:	4620      	mov	r0, r4
 800632a:	f7fe ff83 	bl	8005234 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800632e:	4907      	ldr	r1, [pc, #28]	; (800634c <MX_USB_DEVICE_Init+0x34>)
 8006330:	4620      	mov	r0, r4
 8006332:	f7fe ff23 	bl	800517c <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8006336:	4620      	mov	r0, r4
 8006338:	f7fe ff83 	bl	8005242 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800633c:	bd10      	pop	{r4, pc}
 800633e:	bf00      	nop
 8006340:	20000834 	.word	0x20000834
 8006344:	20000164 	.word	0x20000164
 8006348:	200000e0 	.word	0x200000e0
 800634c:	2000013c 	.word	0x2000013c

08006350 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006350:	2000      	movs	r0, #0
 8006352:	4770      	bx	lr

08006354 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006354:	2000      	movs	r0, #0
 8006356:	4770      	bx	lr

08006358 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4604      	mov	r4, r0
 800635c:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800635e:	4d0e      	ldr	r5, [pc, #56]	; (8006398 <CDC_Receive_FS+0x40>)
 8006360:	4601      	mov	r1, r0
 8006362:	4628      	mov	r0, r5
 8006364:	f7fe ff19 	bl	800519a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006368:	4628      	mov	r0, r5
 800636a:	f7fe ff33 	bl	80051d4 <USBD_CDC_ReceivePacket>
  extern uint8_t usbRxFlag;
  extern uint8_t usbRxBuffer[40];
  for(uint8_t cnt = 0; cnt < 40; cnt++)
 800636e:	2300      	movs	r3, #0
 8006370:	e004      	b.n	800637c <CDC_Receive_FS+0x24>
  {
	  usbRxBuffer[cnt] = 0;
 8006372:	4a0a      	ldr	r2, [pc, #40]	; (800639c <CDC_Receive_FS+0x44>)
 8006374:	2100      	movs	r1, #0
 8006376:	54d1      	strb	r1, [r2, r3]
  for(uint8_t cnt = 0; cnt < 40; cnt++)
 8006378:	3301      	adds	r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b27      	cmp	r3, #39	; 0x27
 800637e:	d9f8      	bls.n	8006372 <CDC_Receive_FS+0x1a>
  }

  strlcpy(usbRxBuffer, Buf, (*Len)+1);
 8006380:	6832      	ldr	r2, [r6, #0]
 8006382:	3201      	adds	r2, #1
 8006384:	4621      	mov	r1, r4
 8006386:	4805      	ldr	r0, [pc, #20]	; (800639c <CDC_Receive_FS+0x44>)
 8006388:	f001 fb8a 	bl	8007aa0 <strlcpy>
  usbRxFlag = 1;
 800638c:	4b04      	ldr	r3, [pc, #16]	; (80063a0 <CDC_Receive_FS+0x48>)
 800638e:	2201      	movs	r2, #1
 8006390:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8006392:	2000      	movs	r0, #0
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	bf00      	nop
 8006398:	20000834 	.word	0x20000834
 800639c:	2000080c 	.word	0x2000080c
 80063a0:	20000244 	.word	0x20000244

080063a4 <CDC_Init_FS>:
{
 80063a4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80063a6:	4c06      	ldr	r4, [pc, #24]	; (80063c0 <CDC_Init_FS+0x1c>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	4906      	ldr	r1, [pc, #24]	; (80063c4 <CDC_Init_FS+0x20>)
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7fe feec 	bl	800518a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80063b2:	4905      	ldr	r1, [pc, #20]	; (80063c8 <CDC_Init_FS+0x24>)
 80063b4:	4620      	mov	r0, r4
 80063b6:	f7fe fef0 	bl	800519a <USBD_CDC_SetRxBuffer>
}
 80063ba:	2000      	movs	r0, #0
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	bf00      	nop
 80063c0:	20000834 	.word	0x20000834
 80063c4:	20000e40 	.word	0x20000e40
 80063c8:	20000a58 	.word	0x20000a58

080063cc <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80063cc:	4b09      	ldr	r3, [pc, #36]	; (80063f4 <CDC_Transmit_FS+0x28>)
 80063ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if (hcdc->TxState != 0){
 80063d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063d6:	b10b      	cbz	r3, 80063dc <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 80063d8:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 80063da:	4770      	bx	lr
{
 80063dc:	b510      	push	{r4, lr}
 80063de:	460a      	mov	r2, r1
 80063e0:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80063e2:	4c04      	ldr	r4, [pc, #16]	; (80063f4 <CDC_Transmit_FS+0x28>)
 80063e4:	4620      	mov	r0, r4
 80063e6:	f7fe fed0 	bl	800518a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80063ea:	4620      	mov	r0, r4
 80063ec:	f7fe fedb 	bl	80051a6 <USBD_CDC_TransmitPacket>
}
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	bf00      	nop
 80063f4:	20000834 	.word	0x20000834

080063f8 <HAL_PCD_MspInit>:
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  if(pcdHandle->Instance==USB)
 80063f8:	6802      	ldr	r2, [r0, #0]
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <HAL_PCD_MspInit+0x3c>)
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d000      	beq.n	8006402 <HAL_PCD_MspInit+0xa>
 8006400:	4770      	bx	lr
{
 8006402:	b500      	push	{lr}
 8006404:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8006406:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006410:	61da      	str	r2, [r3, #28]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	9b01      	ldr	r3, [sp, #4]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800641c:	2200      	movs	r2, #0
 800641e:	4611      	mov	r1, r2
 8006420:	2014      	movs	r0, #20
 8006422:	f7fa fe7f 	bl	8001124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006426:	2014      	movs	r0, #20
 8006428:	f7fa feae 	bl	8001188 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800642c:	b003      	add	sp, #12
 800642e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006432:	bf00      	nop
 8006434:	40005c00 	.word	0x40005c00

08006438 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006438:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800643a:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 800643e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8006442:	f7fe ff17 	bl	8005274 <USBD_LL_SetupStage>
}
 8006446:	bd08      	pop	{r3, pc}

08006448 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006448:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800644a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 800644e:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8006452:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8006456:	f7fe ff3a 	bl	80052ce <USBD_LL_DataOutStage>
}
 800645a:	bd08      	pop	{r3, pc}

0800645c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800645c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800645e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8006462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006464:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8006468:	f7fe ff66 	bl	8005338 <USBD_LL_DataInStage>
}
 800646c:	bd08      	pop	{r3, pc}

0800646e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800646e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006470:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8006474:	f7fe ffe9 	bl	800544a <USBD_LL_SOF>
}
 8006478:	bd08      	pop	{r3, pc}

0800647a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 800647a:	b510      	push	{r4, lr}
 800647c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800647e:	2101      	movs	r1, #1
 8006480:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8006484:	f7fe ffcf 	bl	8005426 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006488:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 800648c:	f7fe ffac 	bl	80053e8 <USBD_LL_Reset>
}
 8006490:	bd10      	pop	{r4, pc}
	...

08006494 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006494:	b510      	push	{r4, lr}
 8006496:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006498:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 800649c:	f7fe ffc6 	bl	800542c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064a0:	69a3      	ldr	r3, [r4, #24]
 80064a2:	b123      	cbz	r3, 80064ae <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064a4:	4a02      	ldr	r2, [pc, #8]	; (80064b0 <HAL_PCD_SuspendCallback+0x1c>)
 80064a6:	6913      	ldr	r3, [r2, #16]
 80064a8:	f043 0306 	orr.w	r3, r3, #6
 80064ac:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064ae:	bd10      	pop	{r4, pc}
 80064b0:	e000ed00 	.word	0xe000ed00

080064b4 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80064b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064b6:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 80064ba:	f7fe ffc0 	bl	800543e <USBD_LL_Resume>
}
 80064be:	bd08      	pop	{r3, pc}

080064c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4604      	mov	r4, r0
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80064c4:	481e      	ldr	r0, [pc, #120]	; (8006540 <USBD_LL_Init+0x80>)
 80064c6:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 80064ca:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220

  hpcd_USB_FS.Instance = USB;
 80064ce:	4b1d      	ldr	r3, [pc, #116]	; (8006544 <USBD_LL_Init+0x84>)
 80064d0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80064d2:	2308      	movs	r3, #8
 80064d4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80064d6:	2302      	movs	r3, #2
 80064d8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 80064da:	2303      	movs	r3, #3
 80064dc:	60c3      	str	r3, [r0, #12]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80064de:	2300      	movs	r3, #0
 80064e0:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80064e2:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80064e4:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80064e6:	f7fb feeb 	bl	80022c0 <HAL_PCD_Init>
 80064ea:	bb30      	cbnz	r0, 800653a <USBD_LL_Init+0x7a>
  {
    Error_Handler( );
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80064ec:	2318      	movs	r3, #24
 80064ee:	2200      	movs	r2, #0
 80064f0:	4611      	mov	r1, r2
 80064f2:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 80064f6:	f7fc fb47 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80064fa:	2358      	movs	r3, #88	; 0x58
 80064fc:	2200      	movs	r2, #0
 80064fe:	2180      	movs	r1, #128	; 0x80
 8006500:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8006504:	f7fc fb40 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006508:	23c0      	movs	r3, #192	; 0xc0
 800650a:	2200      	movs	r2, #0
 800650c:	2181      	movs	r1, #129	; 0x81
 800650e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8006512:	f7fc fb39 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006516:	f44f 7388 	mov.w	r3, #272	; 0x110
 800651a:	2200      	movs	r2, #0
 800651c:	2101      	movs	r1, #1
 800651e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8006522:	f7fc fb31 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800652a:	2200      	movs	r2, #0
 800652c:	2182      	movs	r1, #130	; 0x82
 800652e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8006532:	f7fc fb29 	bl	8002b88 <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8006536:	2000      	movs	r0, #0
 8006538:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800653a:	f7ff fbe7 	bl	8005d0c <Error_Handler>
 800653e:	e7d5      	b.n	80064ec <USBD_LL_Init+0x2c>
 8006540:	20001228 	.word	0x20001228
 8006544:	40005c00 	.word	0x40005c00

08006548 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006548:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800654a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800654e:	f7fb ff25 	bl	800239c <HAL_PCD_Start>
     
  switch (hal_status) {
 8006552:	b118      	cbz	r0, 800655c <USBD_LL_Start+0x14>
 8006554:	2802      	cmp	r0, #2
 8006556:	d003      	beq.n	8006560 <USBD_LL_Start+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006558:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800655a:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800655c:	2000      	movs	r0, #0
 800655e:	e7fc      	b.n	800655a <USBD_LL_Start+0x12>
      usb_status = USBD_BUSY;
 8006560:	2001      	movs	r0, #1
    break;
 8006562:	e7fa      	b.n	800655a <USBD_LL_Start+0x12>

08006564 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006564:	b510      	push	{r4, lr}
 8006566:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006568:	4613      	mov	r3, r2
 800656a:	4622      	mov	r2, r4
 800656c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006570:	f7fb ff40 	bl	80023f4 <HAL_PCD_EP_Open>

  switch (hal_status) {
 8006574:	b118      	cbz	r0, 800657e <USBD_LL_OpenEP+0x1a>
 8006576:	2802      	cmp	r0, #2
 8006578:	d003      	beq.n	8006582 <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800657a:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800657c:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 800657e:	2000      	movs	r0, #0
 8006580:	e7fc      	b.n	800657c <USBD_LL_OpenEP+0x18>
      usb_status = USBD_BUSY;
 8006582:	2001      	movs	r0, #1
    break;
 8006584:	e7fa      	b.n	800657c <USBD_LL_OpenEP+0x18>

08006586 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006586:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006588:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800658c:	f7fb ff5c 	bl	8002448 <HAL_PCD_EP_Close>
      
  switch (hal_status) {
 8006590:	b118      	cbz	r0, 800659a <USBD_LL_CloseEP+0x14>
 8006592:	2802      	cmp	r0, #2
 8006594:	d003      	beq.n	800659e <USBD_LL_CloseEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006596:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006598:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800659a:	2000      	movs	r0, #0
 800659c:	e7fc      	b.n	8006598 <USBD_LL_CloseEP+0x12>
      usb_status = USBD_BUSY;
 800659e:	2001      	movs	r0, #1
    break;
 80065a0:	e7fa      	b.n	8006598 <USBD_LL_CloseEP+0x12>

080065a2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065a2:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065a4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80065a8:	f7fc fa98 	bl	8002adc <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 80065ac:	b118      	cbz	r0, 80065b6 <USBD_LL_StallEP+0x14>
 80065ae:	2802      	cmp	r0, #2
 80065b0:	d003      	beq.n	80065ba <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065b2:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 80065b4:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 80065b6:	2000      	movs	r0, #0
 80065b8:	e7fc      	b.n	80065b4 <USBD_LL_StallEP+0x12>
      usb_status = USBD_BUSY;
 80065ba:	2001      	movs	r0, #1
    break;
 80065bc:	e7fa      	b.n	80065b4 <USBD_LL_StallEP+0x12>

080065be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065be:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80065c0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80065c4:	f7fc fab8 	bl	8002b38 <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 80065c8:	b118      	cbz	r0, 80065d2 <USBD_LL_ClearStallEP+0x14>
 80065ca:	2802      	cmp	r0, #2
 80065cc:	d003      	beq.n	80065d6 <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80065ce:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 80065d0:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 80065d2:	2000      	movs	r0, #0
 80065d4:	e7fc      	b.n	80065d0 <USBD_LL_ClearStallEP+0x12>
      usb_status = USBD_BUSY;
 80065d6:	2001      	movs	r0, #1
    break;
 80065d8:	e7fa      	b.n	80065d0 <USBD_LL_ClearStallEP+0x12>

080065da <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80065da:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 80065de:	f011 0f80 	tst.w	r1, #128	; 0x80
 80065e2:	d106      	bne.n	80065f2 <USBD_LL_IsStallEP+0x18>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80065e4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80065e8:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80065ec:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
  }
}
 80065f0:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80065f2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80065f6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80065fa:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 80065fe:	4770      	bx	lr

08006600 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006600:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006602:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006606:	f7fb fee1 	bl	80023cc <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 800660a:	b118      	cbz	r0, 8006614 <USBD_LL_SetUSBAddress+0x14>
 800660c:	2802      	cmp	r0, #2
 800660e:	d003      	beq.n	8006618 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006610:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8006612:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8006614:	2000      	movs	r0, #0
 8006616:	e7fc      	b.n	8006612 <USBD_LL_SetUSBAddress+0x12>
      usb_status = USBD_BUSY;
 8006618:	2001      	movs	r0, #1
    break;
 800661a:	e7fa      	b.n	8006612 <USBD_LL_SetUSBAddress+0x12>

0800661c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800661c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800661e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8006622:	f7fb ff61 	bl	80024e8 <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8006626:	b118      	cbz	r0, 8006630 <USBD_LL_Transmit+0x14>
 8006628:	2802      	cmp	r0, #2
 800662a:	d003      	beq.n	8006634 <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800662c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 800662e:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8006630:	2000      	movs	r0, #0
 8006632:	e7fc      	b.n	800662e <USBD_LL_Transmit+0x12>
      usb_status = USBD_BUSY;
 8006634:	2001      	movs	r0, #1
    break;
 8006636:	e7fa      	b.n	800662e <USBD_LL_Transmit+0x12>

08006638 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006638:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800663a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800663e:	f7fb ff2b 	bl	8002498 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8006642:	b118      	cbz	r0, 800664c <USBD_LL_PrepareReceive+0x14>
 8006644:	2802      	cmp	r0, #2
 8006646:	d003      	beq.n	8006650 <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006648:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 800664a:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 800664c:	2000      	movs	r0, #0
 800664e:	e7fc      	b.n	800664a <USBD_LL_PrepareReceive+0x12>
      usb_status = USBD_BUSY;
 8006650:	2001      	movs	r0, #1
    break;
 8006652:	e7fa      	b.n	800664a <USBD_LL_PrepareReceive+0x12>

08006654 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006654:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006656:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800665a:	f7fb ff3d 	bl	80024d8 <HAL_PCD_EP_GetRxCount>
}
 800665e:	bd08      	pop	{r3, pc}

08006660 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8006660:	4800      	ldr	r0, [pc, #0]	; (8006664 <USBD_static_malloc+0x4>)
 8006662:	4770      	bx	lr
 8006664:	20000278 	.word	0x20000278

08006668 <USBD_static_free>:
  * @retval None
  */
void USBD_static_free(void *p)
{

}
 8006668:	4770      	bx	lr

0800666a <HAL_PCDEx_SetConnectionState>:
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800666a:	4770      	bx	lr

0800666c <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 800666c:	2312      	movs	r3, #18
 800666e:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8006670:	4800      	ldr	r0, [pc, #0]	; (8006674 <USBD_FS_DeviceDescriptor+0x8>)
 8006672:	4770      	bx	lr
 8006674:	2000014c 	.word	0x2000014c

08006678 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8006678:	2304      	movs	r3, #4
 800667a:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 800667c:	4800      	ldr	r0, [pc, #0]	; (8006680 <USBD_FS_LangIDStrDescriptor+0x8>)
 800667e:	4770      	bx	lr
 8006680:	20000160 	.word	0x20000160

08006684 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006684:	b508      	push	{r3, lr}
 8006686:	460a      	mov	r2, r1
  if(speed == 0)
 8006688:	b128      	cbz	r0, 8006696 <USBD_FS_ProductStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800668a:	4905      	ldr	r1, [pc, #20]	; (80066a0 <USBD_FS_ProductStrDescriptor+0x1c>)
 800668c:	4805      	ldr	r0, [pc, #20]	; (80066a4 <USBD_FS_ProductStrDescriptor+0x20>)
 800668e:	f7ff f94a 	bl	8005926 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8006692:	4803      	ldr	r0, [pc, #12]	; (80066a0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006694:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006696:	4902      	ldr	r1, [pc, #8]	; (80066a0 <USBD_FS_ProductStrDescriptor+0x1c>)
 8006698:	4802      	ldr	r0, [pc, #8]	; (80066a4 <USBD_FS_ProductStrDescriptor+0x20>)
 800669a:	f7ff f944 	bl	8005926 <USBD_GetString>
 800669e:	e7f8      	b.n	8006692 <USBD_FS_ProductStrDescriptor+0xe>
 80066a0:	20001688 	.word	0x20001688
 80066a4:	08008458 	.word	0x08008458

080066a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066a8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066aa:	4c04      	ldr	r4, [pc, #16]	; (80066bc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80066ac:	460a      	mov	r2, r1
 80066ae:	4621      	mov	r1, r4
 80066b0:	4803      	ldr	r0, [pc, #12]	; (80066c0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80066b2:	f7ff f938 	bl	8005926 <USBD_GetString>
  return USBD_StrDesc;
}
 80066b6:	4620      	mov	r0, r4
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	20001688 	.word	0x20001688
 80066c0:	08008470 	.word	0x08008470

080066c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c4:	b508      	push	{r3, lr}
 80066c6:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80066c8:	b128      	cbz	r0, 80066d6 <USBD_FS_SerialStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80066ca:	4905      	ldr	r1, [pc, #20]	; (80066e0 <USBD_FS_SerialStrDescriptor+0x1c>)
 80066cc:	4805      	ldr	r0, [pc, #20]	; (80066e4 <USBD_FS_SerialStrDescriptor+0x20>)
 80066ce:	f7ff f92a 	bl	8005926 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 80066d2:	4803      	ldr	r0, [pc, #12]	; (80066e0 <USBD_FS_SerialStrDescriptor+0x1c>)
 80066d4:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 80066d6:	4902      	ldr	r1, [pc, #8]	; (80066e0 <USBD_FS_SerialStrDescriptor+0x1c>)
 80066d8:	4802      	ldr	r0, [pc, #8]	; (80066e4 <USBD_FS_SerialStrDescriptor+0x20>)
 80066da:	f7ff f924 	bl	8005926 <USBD_GetString>
 80066de:	e7f8      	b.n	80066d2 <USBD_FS_SerialStrDescriptor+0xe>
 80066e0:	20001688 	.word	0x20001688
 80066e4:	08008484 	.word	0x08008484

080066e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066e8:	b508      	push	{r3, lr}
 80066ea:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80066ec:	b128      	cbz	r0, 80066fa <USBD_FS_ConfigStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066ee:	4905      	ldr	r1, [pc, #20]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80066f0:	4805      	ldr	r0, [pc, #20]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x20>)
 80066f2:	f7ff f918 	bl	8005926 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 80066f6:	4803      	ldr	r0, [pc, #12]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80066f8:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066fa:	4902      	ldr	r1, [pc, #8]	; (8006704 <USBD_FS_ConfigStrDescriptor+0x1c>)
 80066fc:	4802      	ldr	r0, [pc, #8]	; (8006708 <USBD_FS_ConfigStrDescriptor+0x20>)
 80066fe:	f7ff f912 	bl	8005926 <USBD_GetString>
 8006702:	e7f8      	b.n	80066f6 <USBD_FS_ConfigStrDescriptor+0xe>
 8006704:	20001688 	.word	0x20001688
 8006708:	08008494 	.word	0x08008494

0800670c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800670c:	b508      	push	{r3, lr}
 800670e:	460a      	mov	r2, r1
  if(speed == 0)
 8006710:	b128      	cbz	r0, 800671e <USBD_FS_InterfaceStrDescriptor+0x12>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006712:	4905      	ldr	r1, [pc, #20]	; (8006728 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006714:	4805      	ldr	r0, [pc, #20]	; (800672c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006716:	f7ff f906 	bl	8005926 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 800671a:	4803      	ldr	r0, [pc, #12]	; (8006728 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 800671c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800671e:	4902      	ldr	r1, [pc, #8]	; (8006728 <USBD_FS_InterfaceStrDescriptor+0x1c>)
 8006720:	4802      	ldr	r0, [pc, #8]	; (800672c <USBD_FS_InterfaceStrDescriptor+0x20>)
 8006722:	f7ff f900 	bl	8005926 <USBD_GetString>
 8006726:	e7f8      	b.n	800671a <USBD_FS_InterfaceStrDescriptor+0xe>
 8006728:	20001688 	.word	0x20001688
 800672c:	080084a0 	.word	0x080084a0

08006730 <dwt_writetodevice>:
 8006730:	b510      	push	{r4, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	b929      	cbnz	r1, 8006742 <dwt_writetodevice+0x12>
 8006736:	f060 007f 	orn	r0, r0, #127	; 0x7f
 800673a:	f88d 0004 	strb.w	r0, [sp, #4]
 800673e:	2001      	movs	r0, #1
 8006740:	e013      	b.n	800676a <dwt_writetodevice+0x3a>
 8006742:	460c      	mov	r4, r1
 8006744:	f060 003f 	orn	r0, r0, #63	; 0x3f
 8006748:	f88d 0004 	strb.w	r0, [sp, #4]
 800674c:	297f      	cmp	r1, #127	; 0x7f
 800674e:	d803      	bhi.n	8006758 <dwt_writetodevice+0x28>
 8006750:	f88d 1005 	strb.w	r1, [sp, #5]
 8006754:	2002      	movs	r0, #2
 8006756:	e008      	b.n	800676a <dwt_writetodevice+0x3a>
 8006758:	f061 017f 	orn	r1, r1, #127	; 0x7f
 800675c:	f88d 1005 	strb.w	r1, [sp, #5]
 8006760:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8006764:	f88d 4006 	strb.w	r4, [sp, #6]
 8006768:	2003      	movs	r0, #3
 800676a:	a901      	add	r1, sp, #4
 800676c:	f000 fd02 	bl	8007174 <writetospi>
 8006770:	b002      	add	sp, #8
 8006772:	bd10      	pop	{r4, pc}

08006774 <dwt_writetxdata>:
 8006774:	1813      	adds	r3, r2, r0
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	dc09      	bgt.n	8006790 <dwt_writetxdata+0x1c>
 800677c:	b510      	push	{r4, lr}
 800677e:	4614      	mov	r4, r2
 8006780:	460b      	mov	r3, r1
 8006782:	1e82      	subs	r2, r0, #2
 8006784:	4621      	mov	r1, r4
 8006786:	2009      	movs	r0, #9
 8006788:	f7ff ffd2 	bl	8006730 <dwt_writetodevice>
 800678c:	2000      	movs	r0, #0
 800678e:	bd10      	pop	{r4, pc}
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop

08006798 <dwt_readfromdevice>:
 8006798:	b510      	push	{r4, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	b919      	cbnz	r1, 80067a6 <dwt_readfromdevice+0xe>
 800679e:	f88d 0004 	strb.w	r0, [sp, #4]
 80067a2:	2001      	movs	r0, #1
 80067a4:	e013      	b.n	80067ce <dwt_readfromdevice+0x36>
 80067a6:	460c      	mov	r4, r1
 80067a8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 80067ac:	f88d 0004 	strb.w	r0, [sp, #4]
 80067b0:	297f      	cmp	r1, #127	; 0x7f
 80067b2:	d803      	bhi.n	80067bc <dwt_readfromdevice+0x24>
 80067b4:	f88d 1005 	strb.w	r1, [sp, #5]
 80067b8:	2002      	movs	r0, #2
 80067ba:	e008      	b.n	80067ce <dwt_readfromdevice+0x36>
 80067bc:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80067c0:	f88d 1005 	strb.w	r1, [sp, #5]
 80067c4:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 80067c8:	f88d 4006 	strb.w	r4, [sp, #6]
 80067cc:	2003      	movs	r0, #3
 80067ce:	a901      	add	r1, sp, #4
 80067d0:	f000 fd06 	bl	80071e0 <readfromspi>
 80067d4:	b002      	add	sp, #8
 80067d6:	bd10      	pop	{r4, pc}

080067d8 <dwt_readrxdata>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	4614      	mov	r4, r2
 80067dc:	4603      	mov	r3, r0
 80067de:	460a      	mov	r2, r1
 80067e0:	4621      	mov	r1, r4
 80067e2:	2011      	movs	r0, #17
 80067e4:	f7ff ffd8 	bl	8006798 <dwt_readfromdevice>
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop

080067ec <dwt_readtxtimestamp>:
 80067ec:	b508      	push	{r3, lr}
 80067ee:	4603      	mov	r3, r0
 80067f0:	2205      	movs	r2, #5
 80067f2:	2100      	movs	r1, #0
 80067f4:	2017      	movs	r0, #23
 80067f6:	f7ff ffcf 	bl	8006798 <dwt_readfromdevice>
 80067fa:	bd08      	pop	{r3, pc}

080067fc <dwt_readrxtimestamp>:
 80067fc:	b508      	push	{r3, lr}
 80067fe:	4603      	mov	r3, r0
 8006800:	2205      	movs	r2, #5
 8006802:	2100      	movs	r1, #0
 8006804:	2015      	movs	r0, #21
 8006806:	f7ff ffc7 	bl	8006798 <dwt_readfromdevice>
 800680a:	bd08      	pop	{r3, pc}

0800680c <dwt_read32bitoffsetreg>:
 800680c:	b500      	push	{lr}
 800680e:	b083      	sub	sp, #12
 8006810:	ab01      	add	r3, sp, #4
 8006812:	2204      	movs	r2, #4
 8006814:	b289      	uxth	r1, r1
 8006816:	b280      	uxth	r0, r0
 8006818:	f7ff ffbe 	bl	8006798 <dwt_readfromdevice>
 800681c:	2303      	movs	r3, #3
 800681e:	2000      	movs	r0, #0
 8006820:	e006      	b.n	8006830 <dwt_read32bitoffsetreg+0x24>
 8006822:	aa02      	add	r2, sp, #8
 8006824:	441a      	add	r2, r3
 8006826:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 800682a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
 800682e:	3b01      	subs	r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	daf6      	bge.n	8006822 <dwt_read32bitoffsetreg+0x16>
 8006834:	b003      	add	sp, #12
 8006836:	f85d fb04 	ldr.w	pc, [sp], #4
 800683a:	bf00      	nop

0800683c <dwt_readdevid>:
 800683c:	b508      	push	{r3, lr}
 800683e:	2100      	movs	r1, #0
 8006840:	4608      	mov	r0, r1
 8006842:	f7ff ffe3 	bl	800680c <dwt_read32bitoffsetreg>
 8006846:	bd08      	pop	{r3, pc}

08006848 <dwt_read16bitoffsetreg>:
 8006848:	b500      	push	{lr}
 800684a:	b083      	sub	sp, #12
 800684c:	ab01      	add	r3, sp, #4
 800684e:	2202      	movs	r2, #2
 8006850:	b289      	uxth	r1, r1
 8006852:	b280      	uxth	r0, r0
 8006854:	f7ff ffa0 	bl	8006798 <dwt_readfromdevice>
 8006858:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800685c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006860:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 8006864:	b280      	uxth	r0, r0
 8006866:	b003      	add	sp, #12
 8006868:	f85d fb04 	ldr.w	pc, [sp], #4

0800686c <dwt_read8bitoffsetreg>:
 800686c:	b500      	push	{lr}
 800686e:	b083      	sub	sp, #12
 8006870:	f10d 0307 	add.w	r3, sp, #7
 8006874:	2201      	movs	r2, #1
 8006876:	b289      	uxth	r1, r1
 8006878:	b280      	uxth	r0, r0
 800687a:	f7ff ff8d 	bl	8006798 <dwt_readfromdevice>
 800687e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8006882:	b003      	add	sp, #12
 8006884:	f85d fb04 	ldr.w	pc, [sp], #4

08006888 <dwt_write8bitoffsetreg>:
 8006888:	b500      	push	{lr}
 800688a:	b083      	sub	sp, #12
 800688c:	ab02      	add	r3, sp, #8
 800688e:	f803 2d01 	strb.w	r2, [r3, #-1]!
 8006892:	2201      	movs	r2, #1
 8006894:	b289      	uxth	r1, r1
 8006896:	b280      	uxth	r0, r0
 8006898:	f7ff ff4a 	bl	8006730 <dwt_writetodevice>
 800689c:	b003      	add	sp, #12
 800689e:	f85d fb04 	ldr.w	pc, [sp], #4
 80068a2:	bf00      	nop

080068a4 <dwt_write16bitoffsetreg>:
 80068a4:	b500      	push	{lr}
 80068a6:	b083      	sub	sp, #12
 80068a8:	f88d 2004 	strb.w	r2, [sp, #4]
 80068ac:	0a12      	lsrs	r2, r2, #8
 80068ae:	f88d 2005 	strb.w	r2, [sp, #5]
 80068b2:	ab01      	add	r3, sp, #4
 80068b4:	2202      	movs	r2, #2
 80068b6:	b289      	uxth	r1, r1
 80068b8:	b280      	uxth	r0, r0
 80068ba:	f7ff ff39 	bl	8006730 <dwt_writetodevice>
 80068be:	b003      	add	sp, #12
 80068c0:	f85d fb04 	ldr.w	pc, [sp], #4

080068c4 <dwt_setrxantennadelay>:
 80068c4:	b508      	push	{r3, lr}
 80068c6:	4602      	mov	r2, r0
 80068c8:	f641 0104 	movw	r1, #6148	; 0x1804
 80068cc:	202e      	movs	r0, #46	; 0x2e
 80068ce:	f7ff ffe9 	bl	80068a4 <dwt_write16bitoffsetreg>
 80068d2:	bd08      	pop	{r3, pc}

080068d4 <dwt_settxantennadelay>:
 80068d4:	b508      	push	{r3, lr}
 80068d6:	4602      	mov	r2, r0
 80068d8:	2100      	movs	r1, #0
 80068da:	2018      	movs	r0, #24
 80068dc:	f7ff ffe2 	bl	80068a4 <dwt_write16bitoffsetreg>
 80068e0:	bd08      	pop	{r3, pc}
 80068e2:	bf00      	nop

080068e4 <dwt_write32bitoffsetreg>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	2300      	movs	r3, #0
 80068ea:	e005      	b.n	80068f8 <dwt_write32bitoffsetreg+0x14>
 80068ec:	ac02      	add	r4, sp, #8
 80068ee:	441c      	add	r4, r3
 80068f0:	f804 2c04 	strb.w	r2, [r4, #-4]
 80068f4:	0a12      	lsrs	r2, r2, #8
 80068f6:	3301      	adds	r3, #1
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	ddf7      	ble.n	80068ec <dwt_write32bitoffsetreg+0x8>
 80068fc:	ab01      	add	r3, sp, #4
 80068fe:	2204      	movs	r2, #4
 8006900:	b289      	uxth	r1, r1
 8006902:	b280      	uxth	r0, r0
 8006904:	f7ff ff14 	bl	8006730 <dwt_writetodevice>
 8006908:	b002      	add	sp, #8
 800690a:	bd10      	pop	{r4, pc}

0800690c <dwt_writetxfctrl>:
 800690c:	b508      	push	{r3, lr}
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <dwt_writetxfctrl+0x1c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4318      	orrs	r0, r3
 8006916:	ea40 5181 	orr.w	r1, r0, r1, lsl #22
 800691a:	ea41 32c2 	orr.w	r2, r1, r2, lsl #15
 800691e:	2100      	movs	r1, #0
 8006920:	2008      	movs	r0, #8
 8006922:	f7ff ffdf 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006926:	bd08      	pop	{r3, pc}
 8006928:	20000180 	.word	0x20000180

0800692c <_dwt_otpread>:
 800692c:	b508      	push	{r3, lr}
 800692e:	4602      	mov	r2, r0
 8006930:	2104      	movs	r1, #4
 8006932:	202d      	movs	r0, #45	; 0x2d
 8006934:	f7ff ffb6 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006938:	2203      	movs	r2, #3
 800693a:	2106      	movs	r1, #6
 800693c:	202d      	movs	r0, #45	; 0x2d
 800693e:	f7ff ffa3 	bl	8006888 <dwt_write8bitoffsetreg>
 8006942:	2200      	movs	r2, #0
 8006944:	2106      	movs	r1, #6
 8006946:	202d      	movs	r0, #45	; 0x2d
 8006948:	f7ff ff9e 	bl	8006888 <dwt_write8bitoffsetreg>
 800694c:	210a      	movs	r1, #10
 800694e:	202d      	movs	r0, #45	; 0x2d
 8006950:	f7ff ff5c 	bl	800680c <dwt_read32bitoffsetreg>
 8006954:	bd08      	pop	{r3, pc}
 8006956:	bf00      	nop

08006958 <_dwt_aonarrayupload>:
 8006958:	b508      	push	{r3, lr}
 800695a:	2200      	movs	r2, #0
 800695c:	2102      	movs	r1, #2
 800695e:	202c      	movs	r0, #44	; 0x2c
 8006960:	f7ff ff92 	bl	8006888 <dwt_write8bitoffsetreg>
 8006964:	2202      	movs	r2, #2
 8006966:	4611      	mov	r1, r2
 8006968:	202c      	movs	r0, #44	; 0x2c
 800696a:	f7ff ff8d 	bl	8006888 <dwt_write8bitoffsetreg>
 800696e:	bd08      	pop	{r3, pc}

08006970 <_dwt_configlde>:
 8006970:	b510      	push	{r4, lr}
 8006972:	4604      	mov	r4, r0
 8006974:	226d      	movs	r2, #109	; 0x6d
 8006976:	f640 0106 	movw	r1, #2054	; 0x806
 800697a:	202e      	movs	r0, #46	; 0x2e
 800697c:	f7ff ff84 	bl	8006888 <dwt_write8bitoffsetreg>
 8006980:	b13c      	cbz	r4, 8006992 <_dwt_configlde+0x22>
 8006982:	f240 6207 	movw	r2, #1543	; 0x607
 8006986:	f641 0106 	movw	r1, #6150	; 0x1806
 800698a:	202e      	movs	r0, #46	; 0x2e
 800698c:	f7ff ff8a 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006990:	bd10      	pop	{r4, pc}
 8006992:	f241 6207 	movw	r2, #5639	; 0x1607
 8006996:	f641 0106 	movw	r1, #6150	; 0x1806
 800699a:	202e      	movs	r0, #46	; 0x2e
 800699c:	f7ff ff82 	bl	80068a4 <dwt_write16bitoffsetreg>
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	bf00      	nop

080069a4 <dwt_configure>:
 80069a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a8:	4604      	mov	r4, r0
 80069aa:	7805      	ldrb	r5, [r0, #0]
 80069ac:	7942      	ldrb	r2, [r0, #5]
 80069ae:	4b75      	ldr	r3, [pc, #468]	; (8006b84 <dwt_configure+0x1e0>)
 80069b0:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 80069b4:	7846      	ldrb	r6, [r0, #1]
 80069b6:	3e01      	subs	r6, #1
 80069b8:	b2f6      	uxtb	r6, r6
 80069ba:	2d04      	cmp	r5, #4
 80069bc:	d003      	beq.n	80069c6 <dwt_configure+0x22>
 80069be:	2d07      	cmp	r5, #7
 80069c0:	d103      	bne.n	80069ca <dwt_configure+0x26>
 80069c2:	2701      	movs	r7, #1
 80069c4:	e002      	b.n	80069cc <dwt_configure+0x28>
 80069c6:	2701      	movs	r7, #1
 80069c8:	e000      	b.n	80069cc <dwt_configure+0x28>
 80069ca:	2700      	movs	r7, #0
 80069cc:	79e3      	ldrb	r3, [r4, #7]
 80069ce:	b943      	cbnz	r3, 80069e2 <dwt_configure+0x3e>
 80069d0:	4b6d      	ldr	r3, [pc, #436]	; (8006b88 <dwt_configure+0x1e4>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	6913      	ldr	r3, [r2, #16]
 80069d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069da:	6113      	str	r3, [r2, #16]
 80069dc:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 80069e0:	e005      	b.n	80069ee <dwt_configure+0x4a>
 80069e2:	4b69      	ldr	r3, [pc, #420]	; (8006b88 <dwt_configure+0x1e4>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	6913      	ldr	r3, [r2, #16]
 80069e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80069ec:	6113      	str	r3, [r2, #16]
 80069ee:	4b66      	ldr	r3, [pc, #408]	; (8006b88 <dwt_configure+0x1e4>)
 80069f0:	6819      	ldr	r1, [r3, #0]
 80069f2:	7a23      	ldrb	r3, [r4, #8]
 80069f4:	728b      	strb	r3, [r1, #10]
 80069f6:	690a      	ldr	r2, [r1, #16]
 80069f8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80069fc:	610a      	str	r2, [r1, #16]
 80069fe:	7a23      	ldrb	r3, [r4, #8]
 8006a00:	041b      	lsls	r3, r3, #16
 8006a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a06:	431a      	orrs	r2, r3
 8006a08:	610a      	str	r2, [r1, #16]
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	2004      	movs	r0, #4
 8006a0e:	f7ff ff69 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006a12:	4642      	mov	r2, r8
 8006a14:	f642 0104 	movw	r1, #10244	; 0x2804
 8006a18:	202e      	movs	r0, #46	; 0x2e
 8006a1a:	f7ff ff43 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ffa6 	bl	8006970 <_dwt_configlde>
 8006a24:	4b59      	ldr	r3, [pc, #356]	; (8006b8c <dwt_configure+0x1e8>)
 8006a26:	f813 8005 	ldrb.w	r8, [r3, r5]
 8006a2a:	4b59      	ldr	r3, [pc, #356]	; (8006b90 <dwt_configure+0x1ec>)
 8006a2c:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8006a30:	2107      	movs	r1, #7
 8006a32:	202b      	movs	r0, #43	; 0x2b
 8006a34:	f7ff ff56 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006a38:	4b56      	ldr	r3, [pc, #344]	; (8006b94 <dwt_configure+0x1f0>)
 8006a3a:	f813 2008 	ldrb.w	r2, [r3, r8]
 8006a3e:	210b      	movs	r1, #11
 8006a40:	202b      	movs	r0, #43	; 0x2b
 8006a42:	f7ff ff21 	bl	8006888 <dwt_write8bitoffsetreg>
 8006a46:	b2ff      	uxtb	r7, r7
 8006a48:	4b53      	ldr	r3, [pc, #332]	; (8006b98 <dwt_configure+0x1f4>)
 8006a4a:	5dda      	ldrb	r2, [r3, r7]
 8006a4c:	210b      	movs	r1, #11
 8006a4e:	2028      	movs	r0, #40	; 0x28
 8006a50:	f7ff ff1a 	bl	8006888 <dwt_write8bitoffsetreg>
 8006a54:	4b51      	ldr	r3, [pc, #324]	; (8006b9c <dwt_configure+0x1f8>)
 8006a56:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8006a5a:	210c      	movs	r1, #12
 8006a5c:	2028      	movs	r0, #40	; 0x28
 8006a5e:	f7ff ff41 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006a62:	79e2      	ldrb	r2, [r4, #7]
 8006a64:	79a3      	ldrb	r3, [r4, #6]
 8006a66:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8006a6a:	4a4d      	ldr	r2, [pc, #308]	; (8006ba0 <dwt_configure+0x1fc>)
 8006a6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006a70:	2102      	movs	r1, #2
 8006a72:	2027      	movs	r0, #39	; 0x27
 8006a74:	f7ff ff16 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006a78:	4b4a      	ldr	r3, [pc, #296]	; (8006ba4 <dwt_configure+0x200>)
 8006a7a:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 8006a7e:	2104      	movs	r1, #4
 8006a80:	2027      	movs	r0, #39	; 0x27
 8006a82:	f7ff ff0f 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006a86:	79e3      	ldrb	r3, [r4, #7]
 8006a88:	b92b      	cbnz	r3, 8006a96 <dwt_configure+0xf2>
 8006a8a:	2264      	movs	r2, #100	; 0x64
 8006a8c:	2106      	movs	r1, #6
 8006a8e:	2027      	movs	r0, #39	; 0x27
 8006a90:	f7ff ff08 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006a94:	e017      	b.n	8006ac6 <dwt_configure+0x122>
 8006a96:	78a3      	ldrb	r3, [r4, #2]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d10a      	bne.n	8006ab2 <dwt_configure+0x10e>
 8006a9c:	2210      	movs	r2, #16
 8006a9e:	2106      	movs	r1, #6
 8006aa0:	2027      	movs	r0, #39	; 0x27
 8006aa2:	f7ff feff 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	2126      	movs	r1, #38	; 0x26
 8006aaa:	2027      	movs	r0, #39	; 0x27
 8006aac:	f7ff feec 	bl	8006888 <dwt_write8bitoffsetreg>
 8006ab0:	e009      	b.n	8006ac6 <dwt_configure+0x122>
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	2106      	movs	r1, #6
 8006ab6:	2027      	movs	r0, #39	; 0x27
 8006ab8:	f7ff fef4 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006abc:	2228      	movs	r2, #40	; 0x28
 8006abe:	2126      	movs	r1, #38	; 0x26
 8006ac0:	2027      	movs	r0, #39	; 0x27
 8006ac2:	f7ff fee1 	bl	8006888 <dwt_write8bitoffsetreg>
 8006ac6:	78e3      	ldrb	r3, [r4, #3]
 8006ac8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8006acc:	4a36      	ldr	r2, [pc, #216]	; (8006ba8 <dwt_configure+0x204>)
 8006ace:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ad2:	2108      	movs	r1, #8
 8006ad4:	2027      	movs	r0, #39	; 0x27
 8006ad6:	f7ff ff05 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006ada:	8963      	ldrh	r3, [r4, #10]
 8006adc:	b913      	cbnz	r3, 8006ae4 <dwt_configure+0x140>
 8006ade:	f241 0341 	movw	r3, #4161	; 0x1041
 8006ae2:	8163      	strh	r3, [r4, #10]
 8006ae4:	8962      	ldrh	r2, [r4, #10]
 8006ae6:	2120      	movs	r1, #32
 8006ae8:	2027      	movs	r0, #39	; 0x27
 8006aea:	f7ff fedb 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006aee:	4f2f      	ldr	r7, [pc, #188]	; (8006bac <dwt_configure+0x208>)
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	210c      	movs	r1, #12
 8006af4:	2023      	movs	r0, #35	; 0x23
 8006af6:	f7ff fef5 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006afa:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 8006afe:	88b2      	ldrh	r2, [r6, #4]
 8006b00:	2104      	movs	r1, #4
 8006b02:	2023      	movs	r0, #35	; 0x23
 8006b04:	f7ff fece 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006b08:	79a3      	ldrb	r3, [r4, #6]
 8006b0a:	b14b      	cbz	r3, 8006b20 <dwt_configure+0x17c>
 8006b0c:	79e3      	ldrb	r3, [r4, #7]
 8006b0e:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <dwt_configure+0x20c>)
 8006b10:	5cd2      	ldrb	r2, [r2, r3]
 8006b12:	2100      	movs	r1, #0
 8006b14:	2021      	movs	r0, #33	; 0x21
 8006b16:	f7ff feb7 	bl	8006888 <dwt_write8bitoffsetreg>
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e001      	b.n	8006b24 <dwt_configure+0x180>
 8006b20:	2200      	movs	r2, #0
 8006b22:	4613      	mov	r3, r2
 8006b24:	f005 010f 	and.w	r1, r5, #15
 8006b28:	012d      	lsls	r5, r5, #4
 8006b2a:	b2ed      	uxtb	r5, r5
 8006b2c:	430d      	orrs	r5, r1
 8006b2e:	7861      	ldrb	r1, [r4, #1]
 8006b30:	0489      	lsls	r1, r1, #18
 8006b32:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
 8006b36:	4329      	orrs	r1, r5
 8006b38:	ea41 5303 	orr.w	r3, r1, r3, lsl #20
 8006b3c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006b40:	7922      	ldrb	r2, [r4, #4]
 8006b42:	0592      	lsls	r2, r2, #22
 8006b44:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	7962      	ldrb	r2, [r4, #5]
 8006b4c:	ea43 62c2 	orr.w	r2, r3, r2, lsl #27
 8006b50:	2100      	movs	r1, #0
 8006b52:	201f      	movs	r0, #31
 8006b54:	f7ff fec6 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006b58:	4b0b      	ldr	r3, [pc, #44]	; (8006b88 <dwt_configure+0x1e4>)
 8006b5a:	6819      	ldr	r1, [r3, #0]
 8006b5c:	78a2      	ldrb	r2, [r4, #2]
 8006b5e:	7863      	ldrb	r3, [r4, #1]
 8006b60:	431a      	orrs	r2, r3
 8006b62:	79e3      	ldrb	r3, [r4, #7]
 8006b64:	035b      	lsls	r3, r3, #13
 8006b66:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8006b6a:	60ca      	str	r2, [r1, #12]
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	2008      	movs	r0, #8
 8006b70:	f7ff feb8 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006b74:	2242      	movs	r2, #66	; 0x42
 8006b76:	2100      	movs	r1, #0
 8006b78:	200d      	movs	r0, #13
 8006b7a:	f7ff fe85 	bl	8006888 <dwt_write8bitoffsetreg>
 8006b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b82:	bf00      	nop
 8006b84:	08008324 	.word	0x08008324
 8006b88:	20000180 	.word	0x20000180
 8006b8c:	080083d0 	.word	0x080083d0
 8006b90:	080083a0 	.word	0x080083a0
 8006b94:	08008398 	.word	0x08008398
 8006b98:	08008394 	.word	0x08008394
 8006b9c:	080083b8 	.word	0x080083b8
 8006ba0:	0800837c 	.word	0x0800837c
 8006ba4:	08008378 	.word	0x08008378
 8006ba8:	08008358 	.word	0x08008358
 8006bac:	0800838c 	.word	0x0800838c
 8006bb0:	08008388 	.word	0x08008388

08006bb4 <dwt_setrxaftertxdelay>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	2100      	movs	r1, #0
 8006bba:	201a      	movs	r0, #26
 8006bbc:	f7ff fe26 	bl	800680c <dwt_read32bitoffsetreg>
 8006bc0:	0d02      	lsrs	r2, r0, #20
 8006bc2:	0512      	lsls	r2, r2, #20
 8006bc4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006bc8:	4322      	orrs	r2, r4
 8006bca:	2100      	movs	r1, #0
 8006bcc:	201a      	movs	r0, #26
 8006bce:	f7ff fe89 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006bd2:	bd10      	pop	{r4, pc}

08006bd4 <dwt_setleds>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	f010 0f01 	tst.w	r0, #1
 8006bda:	d02c      	beq.n	8006c36 <dwt_setleds+0x62>
 8006bdc:	4604      	mov	r4, r0
 8006bde:	2100      	movs	r1, #0
 8006be0:	2026      	movs	r0, #38	; 0x26
 8006be2:	f7ff fe13 	bl	800680c <dwt_read32bitoffsetreg>
 8006be6:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
 8006bea:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8006bee:	2100      	movs	r1, #0
 8006bf0:	2026      	movs	r0, #38	; 0x26
 8006bf2:	f7ff fe77 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	2036      	movs	r0, #54	; 0x36
 8006bfa:	f7ff fe07 	bl	800680c <dwt_read32bitoffsetreg>
 8006bfe:	f440 0204 	orr.w	r2, r0, #8650752	; 0x840000
 8006c02:	2100      	movs	r1, #0
 8006c04:	2036      	movs	r0, #54	; 0x36
 8006c06:	f7ff fe6d 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006c0a:	f004 0402 	and.w	r4, r4, #2
 8006c0e:	f004 05ff 	and.w	r5, r4, #255	; 0xff
 8006c12:	b914      	cbnz	r4, 8006c1a <dwt_setleds+0x46>
 8006c14:	f44f 7488 	mov.w	r4, #272	; 0x110
 8006c18:	e000      	b.n	8006c1c <dwt_setleds+0x48>
 8006c1a:	4c0c      	ldr	r4, [pc, #48]	; (8006c4c <dwt_setleds+0x78>)
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	2128      	movs	r1, #40	; 0x28
 8006c20:	2036      	movs	r0, #54	; 0x36
 8006c22:	f7ff fe5f 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006c26:	b185      	cbz	r5, 8006c4a <dwt_setleds+0x76>
 8006c28:	f404 7288 	and.w	r2, r4, #272	; 0x110
 8006c2c:	2128      	movs	r1, #40	; 0x28
 8006c2e:	2036      	movs	r0, #54	; 0x36
 8006c30:	f7ff fe58 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006c34:	bd38      	pop	{r3, r4, r5, pc}
 8006c36:	2100      	movs	r1, #0
 8006c38:	2026      	movs	r0, #38	; 0x26
 8006c3a:	f7ff fde7 	bl	800680c <dwt_read32bitoffsetreg>
 8006c3e:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
 8006c42:	2100      	movs	r1, #0
 8006c44:	2026      	movs	r0, #38	; 0x26
 8006c46:	f7ff fe4d 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	000f0110 	.word	0x000f0110

08006c50 <_dwt_enableclocks>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	4604      	mov	r4, r0
 8006c56:	ab01      	add	r3, sp, #4
 8006c58:	2202      	movs	r2, #2
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	2036      	movs	r0, #54	; 0x36
 8006c5e:	f7ff fd9b 	bl	8006798 <dwt_readfromdevice>
 8006c62:	2c0e      	cmp	r4, #14
 8006c64:	d85e      	bhi.n	8006d24 <_dwt_enableclocks+0xd4>
 8006c66:	e8df f004 	tbb	[pc, r4]
 8006c6a:	0812      	.short	0x0812
 8006c6c:	5d5d5d1b 	.word	0x5d5d5d1b
 8006c70:	5d33245d 	.word	0x5d33245d
 8006c74:	4e47405d 	.word	0x4e47405d
 8006c78:	57          	.byte	0x57
 8006c79:	00          	.byte	0x00
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f88d 3004 	strb.w	r3, [sp, #4]
 8006c80:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	f88d 3005 	strb.w	r3, [sp, #5]
 8006c8c:	e04a      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006c8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006c92:	f023 0303 	bic.w	r3, r3, #3
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	f88d 3004 	strb.w	r3, [sp, #4]
 8006c9e:	e041      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006ca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006ca4:	f023 0303 	bic.w	r3, r3, #3
 8006ca8:	f043 0302 	orr.w	r3, r3, #2
 8006cac:	f88d 3004 	strb.w	r3, [sp, #4]
 8006cb0:	e038      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006cb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006cb6:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8006cba:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 8006cbe:	f88d 3004 	strb.w	r3, [sp, #4]
 8006cc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006cc6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cca:	f88d 3005 	strb.w	r3, [sp, #5]
 8006cce:	e029      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006cd0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006cd4:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8006cd8:	f88d 3004 	strb.w	r3, [sp, #4]
 8006cdc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006ce0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce4:	f88d 3005 	strb.w	r3, [sp, #5]
 8006ce8:	e01c      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006cea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006cee:	f043 0302 	orr.w	r3, r3, #2
 8006cf2:	f88d 3005 	strb.w	r3, [sp, #5]
 8006cf6:	e015      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006cf8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006cfc:	f023 0302 	bic.w	r3, r3, #2
 8006d00:	f88d 3005 	strb.w	r3, [sp, #5]
 8006d04:	e00e      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006d06:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006d0e:	f043 0320 	orr.w	r3, r3, #32
 8006d12:	f88d 3004 	strb.w	r3, [sp, #4]
 8006d16:	e005      	b.n	8006d24 <_dwt_enableclocks+0xd4>
 8006d18:	2301      	movs	r3, #1
 8006d1a:	f88d 3004 	strb.w	r3, [sp, #4]
 8006d1e:	2303      	movs	r3, #3
 8006d20:	f88d 3005 	strb.w	r3, [sp, #5]
 8006d24:	ab01      	add	r3, sp, #4
 8006d26:	2201      	movs	r2, #1
 8006d28:	2100      	movs	r1, #0
 8006d2a:	2036      	movs	r0, #54	; 0x36
 8006d2c:	f7ff fd00 	bl	8006730 <dwt_writetodevice>
 8006d30:	f10d 0305 	add.w	r3, sp, #5
 8006d34:	2201      	movs	r2, #1
 8006d36:	4611      	mov	r1, r2
 8006d38:	2036      	movs	r0, #54	; 0x36
 8006d3a:	f7ff fcf9 	bl	8006730 <dwt_writetodevice>
 8006d3e:	b002      	add	sp, #8
 8006d40:	bd10      	pop	{r4, pc}
 8006d42:	bf00      	nop

08006d44 <_dwt_loaducodefromrom>:
 8006d44:	b508      	push	{r3, lr}
 8006d46:	200e      	movs	r0, #14
 8006d48:	f7ff ff82 	bl	8006c50 <_dwt_enableclocks>
 8006d4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d50:	2106      	movs	r1, #6
 8006d52:	202d      	movs	r0, #45	; 0x2d
 8006d54:	f7ff fda6 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f000 fa07 	bl	800716c <deca_sleep>
 8006d5e:	2001      	movs	r0, #1
 8006d60:	f7ff ff76 	bl	8006c50 <_dwt_enableclocks>
 8006d64:	bd08      	pop	{r3, pc}
 8006d66:	bf00      	nop

08006d68 <_dwt_disablesequencing>:
 8006d68:	b508      	push	{r3, lr}
 8006d6a:	2000      	movs	r0, #0
 8006d6c:	f7ff ff70 	bl	8006c50 <_dwt_enableclocks>
 8006d70:	2200      	movs	r2, #0
 8006d72:	2104      	movs	r1, #4
 8006d74:	2036      	movs	r0, #54	; 0x36
 8006d76:	f7ff fd95 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006d7a:	bd08      	pop	{r3, pc}

08006d7c <dwt_setdelayedtrxtime>:
 8006d7c:	b508      	push	{r3, lr}
 8006d7e:	4602      	mov	r2, r0
 8006d80:	2101      	movs	r1, #1
 8006d82:	200a      	movs	r0, #10
 8006d84:	f7ff fdae 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006d88:	bd08      	pop	{r3, pc}
 8006d8a:	bf00      	nop

08006d8c <dwt_starttx>:
 8006d8c:	b508      	push	{r3, lr}
 8006d8e:	f010 0f02 	tst.w	r0, #2
 8006d92:	d005      	beq.n	8006da0 <dwt_starttx+0x14>
 8006d94:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <dwt_starttx+0x5c>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	755a      	strb	r2, [r3, #21]
 8006d9c:	2280      	movs	r2, #128	; 0x80
 8006d9e:	e000      	b.n	8006da2 <dwt_starttx+0x16>
 8006da0:	2200      	movs	r2, #0
 8006da2:	f010 0f01 	tst.w	r0, #1
 8006da6:	d014      	beq.n	8006dd2 <dwt_starttx+0x46>
 8006da8:	f042 0206 	orr.w	r2, r2, #6
 8006dac:	2100      	movs	r1, #0
 8006dae:	200d      	movs	r0, #13
 8006db0:	f7ff fd6a 	bl	8006888 <dwt_write8bitoffsetreg>
 8006db4:	2103      	movs	r1, #3
 8006db6:	200f      	movs	r0, #15
 8006db8:	f7ff fd46 	bl	8006848 <dwt_read16bitoffsetreg>
 8006dbc:	f410 6f81 	tst.w	r0, #1032	; 0x408
 8006dc0:	d010      	beq.n	8006de4 <dwt_starttx+0x58>
 8006dc2:	2240      	movs	r2, #64	; 0x40
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	200d      	movs	r0, #13
 8006dc8:	f7ff fd5e 	bl	8006888 <dwt_write8bitoffsetreg>
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	bd08      	pop	{r3, pc}
 8006dd2:	f042 0202 	orr.w	r2, r2, #2
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	200d      	movs	r0, #13
 8006dda:	f7ff fd55 	bl	8006888 <dwt_write8bitoffsetreg>
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295
 8006de2:	bd08      	pop	{r3, pc}
 8006de4:	2000      	movs	r0, #0
 8006de6:	bd08      	pop	{r3, pc}
 8006de8:	20000180 	.word	0x20000180

08006dec <dwt_syncrxbufptrs>:
 8006dec:	b508      	push	{r3, lr}
 8006dee:	2103      	movs	r1, #3
 8006df0:	200f      	movs	r0, #15
 8006df2:	f7ff fd3b 	bl	800686c <dwt_read8bitoffsetreg>
 8006df6:	ea80 0040 	eor.w	r0, r0, r0, lsl #1
 8006dfa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006dfe:	d004      	beq.n	8006e0a <dwt_syncrxbufptrs+0x1e>
 8006e00:	2201      	movs	r2, #1
 8006e02:	2103      	movs	r1, #3
 8006e04:	200d      	movs	r0, #13
 8006e06:	f7ff fd3f 	bl	8006888 <dwt_write8bitoffsetreg>
 8006e0a:	bd08      	pop	{r3, pc}

08006e0c <dwt_forcetrxoff>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	2100      	movs	r1, #0
 8006e10:	200e      	movs	r0, #14
 8006e12:	f7ff fcfb 	bl	800680c <dwt_read32bitoffsetreg>
 8006e16:	4605      	mov	r5, r0
 8006e18:	f000 f998 	bl	800714c <decamutexon>
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4611      	mov	r1, r2
 8006e22:	200e      	movs	r0, #14
 8006e24:	f7ff fd5e 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006e28:	2240      	movs	r2, #64	; 0x40
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	200d      	movs	r0, #13
 8006e2e:	f7ff fd2b 	bl	8006888 <dwt_write8bitoffsetreg>
 8006e32:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <dwt_forcetrxoff+0x50>)
 8006e34:	2100      	movs	r1, #0
 8006e36:	200f      	movs	r0, #15
 8006e38:	f7ff fd54 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006e3c:	f7ff ffd6 	bl	8006dec <dwt_syncrxbufptrs>
 8006e40:	462a      	mov	r2, r5
 8006e42:	2100      	movs	r1, #0
 8006e44:	200e      	movs	r0, #14
 8006e46:	f7ff fd4d 	bl	80068e4 <dwt_write32bitoffsetreg>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f000 f988 	bl	8007160 <decamutexoff>
 8006e50:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <dwt_forcetrxoff+0x54>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2200      	movs	r2, #0
 8006e56:	755a      	strb	r2, [r3, #21]
 8006e58:	bd38      	pop	{r3, r4, r5, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2427fff8 	.word	0x2427fff8
 8006e60:	20000180 	.word	0x20000180

08006e64 <dwt_rxenable>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	4604      	mov	r4, r0
 8006e68:	f010 0f04 	tst.w	r0, #4
 8006e6c:	d101      	bne.n	8006e72 <dwt_rxenable+0xe>
 8006e6e:	f7ff ffbd 	bl	8006dec <dwt_syncrxbufptrs>
 8006e72:	f014 0501 	ands.w	r5, r4, #1
 8006e76:	d102      	bne.n	8006e7e <dwt_rxenable+0x1a>
 8006e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e7c:	e001      	b.n	8006e82 <dwt_rxenable+0x1e>
 8006e7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006e82:	2100      	movs	r1, #0
 8006e84:	200d      	movs	r0, #13
 8006e86:	f7ff fd0d 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006e8a:	b1c5      	cbz	r5, 8006ebe <dwt_rxenable+0x5a>
 8006e8c:	2103      	movs	r1, #3
 8006e8e:	200f      	movs	r0, #15
 8006e90:	f7ff fcec 	bl	800686c <dwt_read8bitoffsetreg>
 8006e94:	f010 0f08 	tst.w	r0, #8
 8006e98:	d00d      	beq.n	8006eb6 <dwt_rxenable+0x52>
 8006e9a:	f7ff ffb7 	bl	8006e0c <dwt_forcetrxoff>
 8006e9e:	f014 0f02 	tst.w	r4, #2
 8006ea2:	d10a      	bne.n	8006eba <dwt_rxenable+0x56>
 8006ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	200d      	movs	r0, #13
 8006eac:	f7ff fcfa 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006eb0:	f04f 35ff 	mov.w	r5, #4294967295
 8006eb4:	e003      	b.n	8006ebe <dwt_rxenable+0x5a>
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	e001      	b.n	8006ebe <dwt_rxenable+0x5a>
 8006eba:	f04f 35ff 	mov.w	r5, #4294967295
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	bf00      	nop

08006ec4 <dwt_setrxtimeout>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4605      	mov	r5, r0
 8006ec8:	2103      	movs	r1, #3
 8006eca:	2004      	movs	r0, #4
 8006ecc:	f7ff fcce 	bl	800686c <dwt_read8bitoffsetreg>
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	b195      	cbz	r5, 8006efa <dwt_setrxtimeout+0x36>
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	200c      	movs	r0, #12
 8006eda:	f7ff fce3 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006ede:	f044 0210 	orr.w	r2, r4, #16
 8006ee2:	4b0c      	ldr	r3, [pc, #48]	; (8006f14 <dwt_setrxtimeout+0x50>)
 8006ee4:	6819      	ldr	r1, [r3, #0]
 8006ee6:	690b      	ldr	r3, [r1, #16]
 8006ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eec:	610b      	str	r3, [r1, #16]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	2103      	movs	r1, #3
 8006ef2:	2004      	movs	r0, #4
 8006ef4:	f7ff fcc8 	bl	8006888 <dwt_write8bitoffsetreg>
 8006ef8:	bd38      	pop	{r3, r4, r5, pc}
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <dwt_setrxtimeout+0x50>)
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	6913      	ldr	r3, [r2, #16]
 8006f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f04:	6113      	str	r3, [r2, #16]
 8006f06:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 8006f0a:	2103      	movs	r1, #3
 8006f0c:	2004      	movs	r0, #4
 8006f0e:	f7ff fcbb 	bl	8006888 <dwt_write8bitoffsetreg>
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	20000180 	.word	0x20000180

08006f18 <dwt_setpreambledetecttimeout>:
 8006f18:	b508      	push	{r3, lr}
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	2124      	movs	r1, #36	; 0x24
 8006f1e:	2027      	movs	r0, #39	; 0x27
 8006f20:	f7ff fcc0 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006f24:	bd08      	pop	{r3, pc}
 8006f26:	bf00      	nop

08006f28 <dwt_rxreset>:
 8006f28:	b508      	push	{r3, lr}
 8006f2a:	22e0      	movs	r2, #224	; 0xe0
 8006f2c:	2103      	movs	r1, #3
 8006f2e:	2036      	movs	r0, #54	; 0x36
 8006f30:	f7ff fcaa 	bl	8006888 <dwt_write8bitoffsetreg>
 8006f34:	22f0      	movs	r2, #240	; 0xf0
 8006f36:	2103      	movs	r1, #3
 8006f38:	2036      	movs	r0, #54	; 0x36
 8006f3a:	f7ff fca5 	bl	8006888 <dwt_write8bitoffsetreg>
 8006f3e:	bd08      	pop	{r3, pc}

08006f40 <dwt_softreset>:
 8006f40:	b508      	push	{r3, lr}
 8006f42:	f7ff ff11 	bl	8006d68 <_dwt_disablesequencing>
 8006f46:	2200      	movs	r2, #0
 8006f48:	4611      	mov	r1, r2
 8006f4a:	202c      	movs	r0, #44	; 0x2c
 8006f4c:	f7ff fcaa 	bl	80068a4 <dwt_write16bitoffsetreg>
 8006f50:	2200      	movs	r2, #0
 8006f52:	2106      	movs	r1, #6
 8006f54:	202c      	movs	r0, #44	; 0x2c
 8006f56:	f7ff fc97 	bl	8006888 <dwt_write8bitoffsetreg>
 8006f5a:	f7ff fcfd 	bl	8006958 <_dwt_aonarrayupload>
 8006f5e:	2200      	movs	r2, #0
 8006f60:	2103      	movs	r1, #3
 8006f62:	2036      	movs	r0, #54	; 0x36
 8006f64:	f7ff fc90 	bl	8006888 <dwt_write8bitoffsetreg>
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f000 f8ff 	bl	800716c <deca_sleep>
 8006f6e:	22f0      	movs	r2, #240	; 0xf0
 8006f70:	2103      	movs	r1, #3
 8006f72:	2036      	movs	r0, #54	; 0x36
 8006f74:	f7ff fc88 	bl	8006888 <dwt_write8bitoffsetreg>
 8006f78:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <dwt_softreset+0x44>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	755a      	strb	r2, [r3, #21]
 8006f80:	bd08      	pop	{r3, pc}
 8006f82:	bf00      	nop
 8006f84:	20000180 	.word	0x20000180

08006f88 <dwt_setxtaltrim>:
 8006f88:	b508      	push	{r3, lr}
 8006f8a:	f000 021f 	and.w	r2, r0, #31
 8006f8e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006f92:	210e      	movs	r1, #14
 8006f94:	202b      	movs	r0, #43	; 0x2b
 8006f96:	f7ff fc77 	bl	8006888 <dwt_write8bitoffsetreg>
 8006f9a:	bd08      	pop	{r3, pc}

08006f9c <dwt_initialise>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4b68      	ldr	r3, [pc, #416]	; (8007144 <dwt_initialise+0x1a8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	751a      	strb	r2, [r3, #20]
 8006fa8:	755a      	strb	r2, [r3, #21]
 8006faa:	82da      	strh	r2, [r3, #22]
 8006fac:	629a      	str	r2, [r3, #40]	; 0x28
 8006fae:	62da      	str	r2, [r3, #44]	; 0x2c
 8006fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8006fb2:	635a      	str	r2, [r3, #52]	; 0x34
 8006fb4:	f7ff fc42 	bl	800683c <dwt_readdevid>
 8006fb8:	4b63      	ldr	r3, [pc, #396]	; (8007148 <dwt_initialise+0x1ac>)
 8006fba:	4298      	cmp	r0, r3
 8006fbc:	f040 80bf 	bne.w	800713e <dwt_initialise+0x1a2>
 8006fc0:	f014 0502 	ands.w	r5, r4, #2
 8006fc4:	d101      	bne.n	8006fca <dwt_initialise+0x2e>
 8006fc6:	f7ff ffbb 	bl	8006f40 <dwt_softreset>
 8006fca:	b115      	cbz	r5, 8006fd2 <dwt_initialise+0x36>
 8006fcc:	f014 0ff8 	tst.w	r4, #248	; 0xf8
 8006fd0:	d102      	bne.n	8006fd8 <dwt_initialise+0x3c>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	f7ff fe3c 	bl	8006c50 <_dwt_enableclocks>
 8006fd8:	2204      	movs	r2, #4
 8006fda:	2100      	movs	r1, #0
 8006fdc:	2024      	movs	r0, #36	; 0x24
 8006fde:	f7ff fc53 	bl	8006888 <dwt_write8bitoffsetreg>
 8006fe2:	b985      	cbnz	r5, 8007006 <dwt_initialise+0x6a>
 8006fe4:	2004      	movs	r0, #4
 8006fe6:	f7ff fca1 	bl	800692c <_dwt_otpread>
 8006fea:	b2c0      	uxtb	r0, r0
 8006fec:	b1c0      	cbz	r0, 8007020 <dwt_initialise+0x84>
 8006fee:	2202      	movs	r2, #2
 8006ff0:	2112      	movs	r1, #18
 8006ff2:	202d      	movs	r0, #45	; 0x2d
 8006ff4:	f7ff fc48 	bl	8006888 <dwt_write8bitoffsetreg>
 8006ff8:	4b52      	ldr	r3, [pc, #328]	; (8007144 <dwt_initialise+0x1a8>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	8ad3      	ldrh	r3, [r2, #22]
 8006ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007002:	82d3      	strh	r3, [r2, #22]
 8007004:	e00c      	b.n	8007020 <dwt_initialise+0x84>
 8007006:	2130      	movs	r1, #48	; 0x30
 8007008:	2028      	movs	r0, #40	; 0x28
 800700a:	f7ff fbff 	bl	800680c <dwt_read32bitoffsetreg>
 800700e:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
 8007012:	d005      	beq.n	8007020 <dwt_initialise+0x84>
 8007014:	4b4b      	ldr	r3, [pc, #300]	; (8007144 <dwt_initialise+0x1a8>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	8ad3      	ldrh	r3, [r2, #22]
 800701a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800701e:	82d3      	strh	r3, [r2, #22]
 8007020:	b11d      	cbz	r5, 800702a <dwt_initialise+0x8e>
 8007022:	f004 030a 	and.w	r3, r4, #10
 8007026:	2b0a      	cmp	r3, #10
 8007028:	d108      	bne.n	800703c <dwt_initialise+0xa0>
 800702a:	201e      	movs	r0, #30
 800702c:	f7ff fc7e 	bl	800692c <_dwt_otpread>
 8007030:	b280      	uxth	r0, r0
 8007032:	4b44      	ldr	r3, [pc, #272]	; (8007144 <dwt_initialise+0x1a8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	0a02      	lsrs	r2, r0, #8
 8007038:	72da      	strb	r2, [r3, #11]
 800703a:	e003      	b.n	8007044 <dwt_initialise+0xa8>
 800703c:	4b41      	ldr	r3, [pc, #260]	; (8007144 <dwt_initialise+0x1a8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2000      	movs	r0, #0
 8007042:	72d8      	strb	r0, [r3, #11]
 8007044:	b935      	cbnz	r5, 8007054 <dwt_initialise+0xb8>
 8007046:	f010 0f1f 	tst.w	r0, #31
 800704a:	d100      	bne.n	800704e <dwt_initialise+0xb2>
 800704c:	2010      	movs	r0, #16
 800704e:	b2c0      	uxtb	r0, r0
 8007050:	f7ff ff9a 	bl	8006f88 <dwt_setxtaltrim>
 8007054:	f014 0f10 	tst.w	r4, #16
 8007058:	d006      	beq.n	8007068 <dwt_initialise+0xcc>
 800705a:	4b3a      	ldr	r3, [pc, #232]	; (8007144 <dwt_initialise+0x1a8>)
 800705c:	681e      	ldr	r6, [r3, #0]
 800705e:	2006      	movs	r0, #6
 8007060:	f7ff fc64 	bl	800692c <_dwt_otpread>
 8007064:	6030      	str	r0, [r6, #0]
 8007066:	e003      	b.n	8007070 <dwt_initialise+0xd4>
 8007068:	4b36      	ldr	r3, [pc, #216]	; (8007144 <dwt_initialise+0x1a8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	f014 0f20 	tst.w	r4, #32
 8007074:	d006      	beq.n	8007084 <dwt_initialise+0xe8>
 8007076:	4b33      	ldr	r3, [pc, #204]	; (8007144 <dwt_initialise+0x1a8>)
 8007078:	681e      	ldr	r6, [r3, #0]
 800707a:	2007      	movs	r0, #7
 800707c:	f7ff fc56 	bl	800692c <_dwt_otpread>
 8007080:	6070      	str	r0, [r6, #4]
 8007082:	e003      	b.n	800708c <dwt_initialise+0xf0>
 8007084:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <dwt_initialise+0x1a8>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2200      	movs	r2, #0
 800708a:	605a      	str	r2, [r3, #4]
 800708c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8007090:	d006      	beq.n	80070a0 <dwt_initialise+0x104>
 8007092:	4b2c      	ldr	r3, [pc, #176]	; (8007144 <dwt_initialise+0x1a8>)
 8007094:	681e      	ldr	r6, [r3, #0]
 8007096:	2008      	movs	r0, #8
 8007098:	f7ff fc48 	bl	800692c <_dwt_otpread>
 800709c:	7230      	strb	r0, [r6, #8]
 800709e:	e003      	b.n	80070a8 <dwt_initialise+0x10c>
 80070a0:	4b28      	ldr	r3, [pc, #160]	; (8007144 <dwt_initialise+0x1a8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2200      	movs	r2, #0
 80070a6:	721a      	strb	r2, [r3, #8]
 80070a8:	f014 0f80 	tst.w	r4, #128	; 0x80
 80070ac:	d006      	beq.n	80070bc <dwt_initialise+0x120>
 80070ae:	4b25      	ldr	r3, [pc, #148]	; (8007144 <dwt_initialise+0x1a8>)
 80070b0:	681e      	ldr	r6, [r3, #0]
 80070b2:	2009      	movs	r0, #9
 80070b4:	f7ff fc3a 	bl	800692c <_dwt_otpread>
 80070b8:	7270      	strb	r0, [r6, #9]
 80070ba:	e003      	b.n	80070c4 <dwt_initialise+0x128>
 80070bc:	4b21      	ldr	r3, [pc, #132]	; (8007144 <dwt_initialise+0x1a8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2200      	movs	r2, #0
 80070c2:	725a      	strb	r2, [r3, #9]
 80070c4:	b9bd      	cbnz	r5, 80070f6 <dwt_initialise+0x15a>
 80070c6:	f014 0f01 	tst.w	r4, #1
 80070ca:	d008      	beq.n	80070de <dwt_initialise+0x142>
 80070cc:	f7ff fe3a 	bl	8006d44 <_dwt_loaducodefromrom>
 80070d0:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <dwt_initialise+0x1a8>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	8ad3      	ldrh	r3, [r2, #22]
 80070d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80070da:	82d3      	strh	r3, [r2, #22]
 80070dc:	e014      	b.n	8007108 <dwt_initialise+0x16c>
 80070de:	2105      	movs	r1, #5
 80070e0:	2036      	movs	r0, #54	; 0x36
 80070e2:	f7ff fbb1 	bl	8006848 <dwt_read16bitoffsetreg>
 80070e6:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 80070ea:	b282      	uxth	r2, r0
 80070ec:	2105      	movs	r1, #5
 80070ee:	2036      	movs	r0, #54	; 0x36
 80070f0:	f7ff fbd8 	bl	80068a4 <dwt_write16bitoffsetreg>
 80070f4:	e008      	b.n	8007108 <dwt_initialise+0x16c>
 80070f6:	f014 0f04 	tst.w	r4, #4
 80070fa:	d105      	bne.n	8007108 <dwt_initialise+0x16c>
 80070fc:	4b11      	ldr	r3, [pc, #68]	; (8007144 <dwt_initialise+0x1a8>)
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	8ad3      	ldrh	r3, [r2, #22]
 8007102:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007106:	82d3      	strh	r3, [r2, #22]
 8007108:	2001      	movs	r0, #1
 800710a:	f7ff fda1 	bl	8006c50 <_dwt_enableclocks>
 800710e:	2200      	movs	r2, #0
 8007110:	210a      	movs	r1, #10
 8007112:	202c      	movs	r0, #44	; 0x2c
 8007114:	f7ff fbb8 	bl	8006888 <dwt_write8bitoffsetreg>
 8007118:	4c0a      	ldr	r4, [pc, #40]	; (8007144 <dwt_initialise+0x1a8>)
 800711a:	6825      	ldr	r5, [r4, #0]
 800711c:	2100      	movs	r1, #0
 800711e:	2004      	movs	r0, #4
 8007120:	f7ff fb74 	bl	800680c <dwt_read32bitoffsetreg>
 8007124:	6128      	str	r0, [r5, #16]
 8007126:	6824      	ldr	r4, [r4, #0]
 8007128:	8a63      	ldrh	r3, [r4, #18]
 800712a:	f003 0303 	and.w	r3, r3, #3
 800712e:	72a3      	strb	r3, [r4, #10]
 8007130:	2100      	movs	r1, #0
 8007132:	2008      	movs	r0, #8
 8007134:	f7ff fb6a 	bl	800680c <dwt_read32bitoffsetreg>
 8007138:	60e0      	str	r0, [r4, #12]
 800713a:	2000      	movs	r0, #0
 800713c:	bd70      	pop	{r4, r5, r6, pc}
 800713e:	f04f 30ff 	mov.w	r0, #4294967295
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	20000180 	.word	0x20000180
 8007148:	deca0130 	.word	0xdeca0130

0800714c <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 800714c:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 800714e:	f000 f9a7 	bl	80074a0 <port_GetEXT_IRQStatus>

	if(s) {
 8007152:	4604      	mov	r4, r0
 8007154:	b908      	cbnz	r0, 800715a <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 8007156:	4620      	mov	r0, r4
 8007158:	bd10      	pop	{r4, pc}
		port_DisableEXT_IRQ(); //disable the external interrupt line
 800715a:	f000 f993 	bl	8007484 <port_DisableEXT_IRQ>
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 800715e:	e7fa      	b.n	8007156 <decamutexon+0xa>

08007160 <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 8007160:	b900      	cbnz	r0, 8007164 <decamutexoff+0x4>
 8007162:	4770      	bx	lr
{
 8007164:	b508      	push	{r3, lr}
		port_EnableEXT_IRQ();
 8007166:	f000 f994 	bl	8007492 <port_EnableEXT_IRQ>
	}
}
 800716a:	bd08      	pop	{r3, pc}

0800716c <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 800716c:	b508      	push	{r3, lr}
	Sleep(time_ms);
 800716e:	f000 f8c0 	bl	80072f2 <Sleep>
}
 8007172:	bd08      	pop	{r3, pc}

08007174 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8007174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007178:	4682      	mov	sl, r0
 800717a:	4689      	mov	r9, r1
 800717c:	4690      	mov	r8, r2
 800717e:	461f      	mov	r7, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8007180:	f7ff ffe4 	bl	800714c <decamutexon>
 8007184:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&dwhspi) != HAL_SPI_STATE_READY);
 8007186:	4d14      	ldr	r5, [pc, #80]	; (80071d8 <writetospi+0x64>)
 8007188:	4628      	mov	r0, r5
 800718a:	f7fc fd7f 	bl	8003c8c <HAL_SPI_GetState>
 800718e:	2801      	cmp	r0, #1
 8007190:	4604      	mov	r4, r0
 8007192:	d1f9      	bne.n	8007188 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8007194:	2200      	movs	r2, #0
 8007196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800719a:	4810      	ldr	r0, [pc, #64]	; (80071dc <writetospi+0x68>)
 800719c:	f7fa f964 	bl	8001468 <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&dwhspi, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 80071a0:	4652      	mov	r2, sl
 80071a2:	4649      	mov	r1, r9
 80071a4:	f04f 33ff 	mov.w	r3, #4294967295
 80071a8:	480b      	ldr	r0, [pc, #44]	; (80071d8 <writetospi+0x64>)
 80071aa:	f7fc fc17 	bl	80039dc <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&dwhspi, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 80071ae:	f04f 33ff 	mov.w	r3, #4294967295
 80071b2:	fa1f f288 	uxth.w	r2, r8
 80071b6:	4639      	mov	r1, r7
 80071b8:	4807      	ldr	r0, [pc, #28]	; (80071d8 <writetospi+0x64>)
 80071ba:	f7fc fc0f 	bl	80039dc <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80071be:	4622      	mov	r2, r4
 80071c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80071c4:	4805      	ldr	r0, [pc, #20]	; (80071dc <writetospi+0x68>)
 80071c6:	f7fa f94f 	bl	8001468 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80071ca:	4630      	mov	r0, r6
 80071cc:	f7ff ffc8 	bl	8007160 <decamutexoff>

    return 0;
} // end writetospi()
 80071d0:	2000      	movs	r0, #0
 80071d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d6:	bf00      	nop
 80071d8:	20000520 	.word	0x20000520
 80071dc:	40010800 	.word	0x40010800

080071e0 <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 80071e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e4:	4680      	mov	r8, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	4617      	mov	r7, r2
 80071ea:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 80071ec:	f7ff ffae 	bl	800714c <decamutexon>
 80071f0:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&dwhspi) != HAL_SPI_STATE_READY);
 80071f2:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800726c <readfromspi+0x8c>
 80071f6:	4648      	mov	r0, r9
 80071f8:	f7fc fd48 	bl	8003c8c <HAL_SPI_GetState>
 80071fc:	2801      	cmp	r0, #1
 80071fe:	d1fa      	bne.n	80071f6 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8007200:	2200      	movs	r2, #0
 8007202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007206:	4818      	ldr	r0, [pc, #96]	; (8007268 <readfromspi+0x88>)
 8007208:	f7fa f92e 	bl	8001468 <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 800720c:	f1b8 0f00 	cmp.w	r8, #0
 8007210:	d00c      	beq.n	800722c <readfromspi+0x4c>
    {
        HAL_SPI_Transmit(&dwhspi, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 8007212:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800726c <readfromspi+0x8c>
 8007216:	44a0      	add	r8, r4
 8007218:	2201      	movs	r2, #1
 800721a:	4621      	mov	r1, r4
 800721c:	f04f 33ff 	mov.w	r3, #4294967295
 8007220:	4414      	add	r4, r2
 8007222:	4648      	mov	r0, r9
 8007224:	f7fc fbda 	bl	80039dc <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 8007228:	4544      	cmp	r4, r8
 800722a:	d1f5      	bne.n	8007218 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 800722c:	b17f      	cbz	r7, 800724e <readfromspi+0x6e>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&dwhspi, SPI_FLAG_TXE) == RESET)
        {
        }

        dwhspi.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800722e:	2400      	movs	r4, #0
 8007230:	480e      	ldr	r0, [pc, #56]	; (800726c <readfromspi+0x8c>)
 8007232:	19e9      	adds	r1, r5, r7
        while(__HAL_SPI_GET_FLAG(&dwhspi, SPI_FLAG_TXE) == RESET)
 8007234:	6803      	ldr	r3, [r0, #0]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	0797      	lsls	r7, r2, #30
 800723a:	d5fc      	bpl.n	8007236 <readfromspi+0x56>
        dwhspi.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 800723c:	60dc      	str	r4, [r3, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&dwhspi, SPI_FLAG_RXNE) == RESET)
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	07d2      	lsls	r2, r2, #31
 8007242:	d5fc      	bpl.n	800723e <readfromspi+0x5e>
        {
        }

        (*readBuffer++) = dwhspi.Instance->DR;  //copy data read form (MISO)
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 800724a:	428d      	cmp	r5, r1
 800724c:	d1f2      	bne.n	8007234 <readfromspi+0x54>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800724e:	2201      	movs	r2, #1
 8007250:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007254:	4804      	ldr	r0, [pc, #16]	; (8007268 <readfromspi+0x88>)
 8007256:	f7fa f907 	bl	8001468 <HAL_GPIO_WritePin>

    decamutexoff(stat);
 800725a:	4630      	mov	r0, r6
 800725c:	f7ff ff80 	bl	8007160 <decamutexoff>

    return 0;
} // end readfromspi()
 8007260:	2000      	movs	r0, #0
 8007262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007266:	bf00      	nop
 8007268:	40010800 	.word	0x40010800
 800726c:	20000520 	.word	0x20000520

08007270 <NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007270:	f000 021f 	and.w	r2, r0, #31
 8007274:	0940      	lsrs	r0, r0, #5
 8007276:	2301      	movs	r3, #1
 8007278:	4093      	lsls	r3, r2
 800727a:	4a02      	ldr	r2, [pc, #8]	; (8007284 <NVIC_EnableIRQ+0x14>)
 800727c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	e000e100 	.word	0xe000e100

08007288 <NVIC_DisableIRQ>:
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8007288:	f000 021f 	and.w	r2, r0, #31
 800728c:	0940      	lsrs	r0, r0, #5
 800728e:	2301      	movs	r3, #1
 8007290:	4093      	lsls	r3, r2
 8007292:	3020      	adds	r0, #32
 8007294:	4a01      	ldr	r2, [pc, #4]	; (800729c <NVIC_DisableIRQ+0x14>)
 8007296:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 800729a:	4770      	bx	lr
 800729c:	e000e100 	.word	0xe000e100

080072a0 <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	e012      	b.n	80072d4 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 80072ae:	2300      	movs	r3, #0
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	e004      	b.n	80072be <usleep+0x1e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80072b4:	bf00      	nop
 80072b6:	bf00      	nop
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3301      	adds	r3, #1
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	bfd4      	ite	le
 80072c4:	2301      	movle	r3, #1
 80072c6:	2300      	movgt	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f2      	bne.n	80072b4 <usleep+0x14>
    for(i=0;i<usec;i++)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3301      	adds	r3, #1
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	429a      	cmp	r2, r3
 80072da:	bf8c      	ite	hi
 80072dc:	2301      	movhi	r3, #1
 80072de:	2300      	movls	r3, #0
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e3      	bne.n	80072ae <usleep+0xe>
        {
            __NOP();
            __NOP();
        }
    }
    return 0;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bc80      	pop	{r7}
 80072f0:	4770      	bx	lr

080072f2 <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b082      	sub	sp, #8
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7f9 fda2 	bl	8000e44 <HAL_Delay>
}
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8007310:	4a0a      	ldr	r2, [pc, #40]	; (800733c <EXTI_GetITEnStatus+0x34>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	095b      	lsrs	r3, r3, #5
 8007316:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f003 031f 	and.w	r3, r3, #31
 8007320:	fa22 f303 	lsr.w	r3, r2, r3
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	bf14      	ite	ne
 800732c:	2301      	movne	r3, #1
 800732e:	2300      	moveq	r3, #0
 8007330:	b2db      	uxtb	r3, r3
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	bc80      	pop	{r7}
 800733a:	4770      	bx	lr
 800733c:	e000e100 	.word	0xe000e100

08007340 <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8007346:	f44f 7380 	mov.w	r3, #256	; 0x100
 800734a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800734c:	2311      	movs	r3, #17
 800734e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007350:	2302      	movs	r3, #2
 8007352:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8007354:	463b      	mov	r3, r7
 8007356:	4619      	mov	r1, r3
 8007358:	480a      	ldr	r0, [pc, #40]	; (8007384 <reset_DW1000+0x44>)
 800735a:	f7f9 ff91 	bl	8001280 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 800735e:	2200      	movs	r2, #0
 8007360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007364:	4807      	ldr	r0, [pc, #28]	; (8007384 <reset_DW1000+0x44>)
 8007366:	f7fa f87f 	bl	8001468 <HAL_GPIO_WritePin>

    usleep(1);
 800736a:	2001      	movs	r0, #1
 800736c:	f7ff ff98 	bl	80072a0 <usleep>

    //put the pin back to output open-drain (not active)
    //TODO obczaj przerwania IRQ
    setup_DW1000RSTnIRQ(0);
 8007370:	2000      	movs	r0, #0
 8007372:	f000 f809 	bl	8007388 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8007376:	2002      	movs	r0, #2
 8007378:	f7ff ffbb 	bl	80072f2 <Sleep>
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40010800 	.word	0x40010800

08007388 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d015      	beq.n	80073c2 <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8007396:	f44f 7380 	mov.w	r3, #256	; 0x100
 800739a:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800739c:	4b17      	ldr	r3, [pc, #92]	; (80073fc <setup_DW1000RSTnIRQ+0x74>)
 800739e:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80073a4:	f107 0308 	add.w	r3, r7, #8
 80073a8:	4619      	mov	r1, r3
 80073aa:	4815      	ldr	r0, [pc, #84]	; (8007400 <setup_DW1000RSTnIRQ+0x78>)
 80073ac:	f7f9 ff68 	bl	8001280 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 80073b0:	2006      	movs	r0, #6
 80073b2:	f7f9 fee9 	bl	8001188 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80073b6:	2200      	movs	r2, #0
 80073b8:	2105      	movs	r1, #5
 80073ba:	2006      	movs	r0, #6
 80073bc:	f7f9 feb2 	bl	8001124 <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 80073c0:	e017      	b.n	80073f2 <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 80073c2:	2006      	movs	r0, #6
 80073c4:	f7f9 feec 	bl	80011a0 <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 80073c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073cc:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80073ce:	2311      	movs	r3, #17
 80073d0:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80073d6:	2303      	movs	r3, #3
 80073d8:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 80073da:	f107 0308 	add.w	r3, r7, #8
 80073de:	4619      	mov	r1, r3
 80073e0:	4807      	ldr	r0, [pc, #28]	; (8007400 <setup_DW1000RSTnIRQ+0x78>)
 80073e2:	f7f9 ff4d 	bl	8001280 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 80073e6:	2201      	movs	r2, #1
 80073e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80073ec:	4804      	ldr	r0, [pc, #16]	; (8007400 <setup_DW1000RSTnIRQ+0x78>)
 80073ee:	f7fa f83b 	bl	8001468 <HAL_GPIO_WritePin>
}
 80073f2:	bf00      	nop
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	10110000 	.word	0x10110000
 8007400:	40010800 	.word	0x40010800

08007404 <port_set_dw1000_slowrate>:
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 *          //MG: NIE MOJE
 * */
void port_set_dw1000_slowrate(void)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	af00      	add	r7, sp, #0
    dwhspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8007408:	4b03      	ldr	r3, [pc, #12]	; (8007418 <port_set_dw1000_slowrate+0x14>)
 800740a:	2220      	movs	r2, #32
 800740c:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&dwhspi);
 800740e:	4802      	ldr	r0, [pc, #8]	; (8007418 <port_set_dw1000_slowrate+0x14>)
 8007410:	f7fc fc40 	bl	8003c94 <HAL_SPI_Init>
}
 8007414:	bf00      	nop
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000520 	.word	0x20000520

0800741c <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
    dwhspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007420:	4b03      	ldr	r3, [pc, #12]	; (8007430 <port_set_dw1000_fastrate+0x14>)
 8007422:	2208      	movs	r2, #8
 8007424:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&dwhspi);
 8007426:	4802      	ldr	r0, [pc, #8]	; (8007430 <port_set_dw1000_fastrate+0x14>)
 8007428:	f7fc fc34 	bl	8003c94 <HAL_SPI_Init>
}
 800742c:	bf00      	nop
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000520 	.word	0x20000520

08007434 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RESET_Pin)
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007444:	d103      	bne.n	800744e <HAL_GPIO_EXTI_Callback+0x1a>
    {
        signalResetDone = 1;
 8007446:	4b06      	ldr	r3, [pc, #24]	; (8007460 <HAL_GPIO_EXTI_Callback+0x2c>)
 8007448:	2201      	movs	r2, #1
 800744a:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 800744c:	e004      	b.n	8007458 <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQn_Pin)
 800744e:	88fb      	ldrh	r3, [r7, #6]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 8007454:	f000 f806 	bl	8007464 <process_deca_irq>
}
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	200004d4 	.word	0x200004d4

08007464 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8007468:	e002      	b.n	8007470 <process_deca_irq+0xc>
    {

        port_deca_isr();
 800746a:	4b05      	ldr	r3, [pc, #20]	; (8007480 <process_deca_irq+0x1c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8007470:	f000 f81e 	bl	80074b0 <port_CheckEXT_IRQ>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1f7      	bne.n	800746a <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 800747a:	bf00      	nop
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200004d0 	.word	0x200004d0

08007484 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8007488:	2017      	movs	r0, #23
 800748a:	f7ff fefd 	bl	8007288 <NVIC_DisableIRQ>
}
 800748e:	bf00      	nop
 8007490:	bd80      	pop	{r7, pc}

08007492 <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8007496:	2017      	movs	r0, #23
 8007498:	f7ff feea 	bl	8007270 <NVIC_EnableIRQ>
}
 800749c:	bf00      	nop
 800749e:	bd80      	pop	{r7, pc}

080074a0 <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 80074a4:	2017      	movs	r0, #23
 80074a6:	f7ff ff2f 	bl	8007308 <EXTI_GetITEnStatus>
 80074aa:	4603      	mov	r3, r0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 80074b4:	2101      	movs	r1, #1
 80074b6:	4803      	ldr	r0, [pc, #12]	; (80074c4 <port_CheckEXT_IRQ+0x14>)
 80074b8:	f7f9 ffce 	bl	8001458 <HAL_GPIO_ReadPin>
 80074bc:	4603      	mov	r3, r0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40010c00 	.word	0x40010c00

080074c8 <final_msg_get_ts>:
}

static void final_msg_get_ts(const uint8 *ts_field, uint32 *ts)
{
    int i;
    *ts = 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	600b      	str	r3, [r1, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	dc0c      	bgt.n	80074ea <final_msg_get_ts+0x22>
{
 80074d0:	b410      	push	{r4}
    {
        *ts += ts_field[i] << (i * 8);
 80074d2:	5cc2      	ldrb	r2, [r0, r3]
 80074d4:	00dc      	lsls	r4, r3, #3
 80074d6:	fa02 f404 	lsl.w	r4, r2, r4
 80074da:	680a      	ldr	r2, [r1, #0]
 80074dc:	4422      	add	r2, r4
 80074de:	600a      	str	r2, [r1, #0]
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 80074e0:	3301      	adds	r3, #1
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	ddf5      	ble.n	80074d2 <final_msg_get_ts+0xa>
    }
}
 80074e6:	bc10      	pop	{r4}
 80074e8:	4770      	bx	lr
 80074ea:	4770      	bx	lr

080074ec <get_tx_timestamp_u64>:
{
 80074ec:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 80074f0:	b083      	sub	sp, #12
    dwt_readtxtimestamp(ts_tab);
 80074f2:	4668      	mov	r0, sp
 80074f4:	f7ff f97a 	bl	80067ec <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 80074f8:	2404      	movs	r4, #4
    uint64 ts = 0;
 80074fa:	f04f 0b00 	mov.w	fp, #0
 80074fe:	f04f 0c00 	mov.w	ip, #0
    for (i = 4; i >= 0; i--)
 8007502:	e00f      	b.n	8007524 <get_tx_timestamp_u64+0x38>
        ts <<= 8;
 8007504:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8007508:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 800750c:	ea4f 220b 	mov.w	r2, fp, lsl #8
        ts |= ts_tab[i];
 8007510:	a902      	add	r1, sp, #8
 8007512:	4421      	add	r1, r4
 8007514:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8007518:	2100      	movs	r1, #0
 800751a:	ea40 0b02 	orr.w	fp, r0, r2
 800751e:	ea41 0c03 	orr.w	ip, r1, r3
    for (i = 4; i >= 0; i--)
 8007522:	3c01      	subs	r4, #1
 8007524:	2c00      	cmp	r4, #0
 8007526:	daed      	bge.n	8007504 <get_tx_timestamp_u64+0x18>
}
 8007528:	4658      	mov	r0, fp
 800752a:	4661      	mov	r1, ip
 800752c:	b003      	add	sp, #12
 800752e:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}

08007532 <get_rx_timestamp_u64>:
{
 8007532:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8007536:	b083      	sub	sp, #12
    dwt_readrxtimestamp(ts_tab);
 8007538:	4668      	mov	r0, sp
 800753a:	f7ff f95f 	bl	80067fc <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 800753e:	2404      	movs	r4, #4
    uint64 ts = 0;
 8007540:	f04f 0b00 	mov.w	fp, #0
 8007544:	f04f 0c00 	mov.w	ip, #0
    for (i = 4; i >= 0; i--)
 8007548:	e00f      	b.n	800756a <get_rx_timestamp_u64+0x38>
        ts <<= 8;
 800754a:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800754e:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8007552:	ea4f 220b 	mov.w	r2, fp, lsl #8
        ts |= ts_tab[i];
 8007556:	a902      	add	r1, sp, #8
 8007558:	4421      	add	r1, r4
 800755a:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 800755e:	2100      	movs	r1, #0
 8007560:	ea40 0b02 	orr.w	fp, r0, r2
 8007564:	ea41 0c03 	orr.w	ip, r1, r3
    for (i = 4; i >= 0; i--)
 8007568:	3c01      	subs	r4, #1
 800756a:	2c00      	cmp	r4, #0
 800756c:	daed      	bge.n	800754a <get_rx_timestamp_u64+0x18>
}
 800756e:	4658      	mov	r0, fp
 8007570:	4661      	mov	r1, ip
 8007572:	b003      	add	sp, #12
 8007574:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}

08007578 <UWB_Tag_Init>:

void UWB_Tag_Init()
{
 8007578:	b508      	push	{r3, lr}
    reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 800757a:	f7ff fee1 	bl	8007340 <reset_DW1000>
    port_set_dw1000_slowrate();
 800757e:	f7ff ff41 	bl	8007404 <port_set_dw1000_slowrate>
    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8007582:	2001      	movs	r0, #1
 8007584:	f7ff fd0a 	bl	8006f9c <dwt_initialise>
 8007588:	f1b0 3fff 	cmp.w	r0, #4294967295
 800758c:	d109      	bne.n	80075a2 <UWB_Tag_Init+0x2a>
    {

        while (1)
        {
        	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800758e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007592:	480e      	ldr	r0, [pc, #56]	; (80075cc <UWB_Tag_Init+0x54>)
 8007594:	f7f9 ff6e 	bl	8001474 <HAL_GPIO_TogglePin>
        	HAL_Delay(300);
 8007598:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800759c:	f7f9 fc52 	bl	8000e44 <HAL_Delay>
 80075a0:	e7f5      	b.n	800758e <UWB_Tag_Init+0x16>
        };
    }
    port_set_dw1000_fastrate();
 80075a2:	f7ff ff3b 	bl	800741c <port_set_dw1000_fastrate>
   // dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
    dwt_setleds(DWT_LEDS_ENABLE);
 80075a6:	2001      	movs	r0, #1
 80075a8:	f7ff fb14 	bl	8006bd4 <dwt_setleds>
    /* Configure DW1000. See NOTE 7 below. */
    dwt_configure(&config);
 80075ac:	4808      	ldr	r0, [pc, #32]	; (80075d0 <UWB_Tag_Init+0x58>)
 80075ae:	f7ff f9f9 	bl	80069a4 <dwt_configure>

    /* Apply default antenna delay value. See NOTE 1 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
 80075b2:	f244 0060 	movw	r0, #16480	; 0x4060
 80075b6:	f7ff f985 	bl	80068c4 <dwt_setrxantennadelay>
    dwt_settxantennadelay(TX_ANT_DLY);
 80075ba:	f244 0060 	movw	r0, #16480	; 0x4060
 80075be:	f7ff f989 	bl	80068d4 <dwt_settxantennadelay>

    /* Set preamble timeout for expected frames. See NOTE 6 below. */
    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 80075c2:	2008      	movs	r0, #8
 80075c4:	f7ff fca8 	bl	8006f18 <dwt_setpreambledetecttimeout>
}
 80075c8:	bd08      	pop	{r3, pc}
 80075ca:	bf00      	nop
 80075cc:	40011000 	.word	0x40011000
 80075d0:	20000184 	.word	0x20000184
 80075d4:	00000000 	.word	0x00000000

080075d8 <UWB_Tag_Get_Distance>:

uint8_t UWB_Tag_Get_Distance(uwb_data_t *dataPtr, uint8_t anchor)
{
 80075d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075dc:	b093      	sub	sp, #76	; 0x4c
 80075de:	4604      	mov	r4, r0
 80075e0:	460d      	mov	r5, r1
	uint8_t rx_expected_poll[sizeof(rx_poll_msg)];
    /* Clear reception timeout to start next ranging process. */
    dwt_setrxtimeout(0);
 80075e2:	2000      	movs	r0, #0
 80075e4:	f7ff fc6e 	bl	8006ec4 <dwt_setrxtimeout>

    /* Activate reception immediately. */
    dwt_rxenable(DWT_START_RX_IMMEDIATE);
 80075e8:	2000      	movs	r0, #0
 80075ea:	f7ff fc3b 	bl	8006e64 <dwt_rxenable>
    dataPtr->debugMsg = 0x10;
 80075ee:	2310      	movs	r3, #16
 80075f0:	7423      	strb	r3, [r4, #16]
    /* Poll for reception of a frame or error/timeout. See NOTE 8 below. */
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80075f2:	e001      	b.n	80075f8 <UWB_Tag_Get_Distance+0x20>
    {
    	dataPtr->debugMsg = 0x11;
 80075f4:	2311      	movs	r3, #17
 80075f6:	7423      	strb	r3, [r4, #16]
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 80075f8:	2100      	movs	r1, #0
 80075fa:	200f      	movs	r0, #15
 80075fc:	f7ff f906 	bl	800680c <dwt_read32bitoffsetreg>
 8007600:	4bbd      	ldr	r3, [pc, #756]	; (80078f8 <UWB_Tag_Get_Distance+0x320>)
 8007602:	4003      	ands	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0f5      	beq.n	80075f4 <UWB_Tag_Get_Distance+0x1c>
    };

    if (status_reg & SYS_STATUS_RXFCG)
 8007608:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 800760c:	f000 81b6 	beq.w	800797c <UWB_Tag_Get_Distance+0x3a4>
    {
        uint32 frame_len;
        dataPtr->debugMsg = 0x70;
 8007610:	2370      	movs	r3, #112	; 0x70
 8007612:	7423      	strb	r3, [r4, #16]
       // HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
        /* Clear good RX frame event in the DW1000 status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG);
 8007614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007618:	2100      	movs	r1, #0
 800761a:	200f      	movs	r0, #15
 800761c:	f7ff f962 	bl	80068e4 <dwt_write32bitoffsetreg>

        /* A frame has been received, read it into the local buffer. */
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFL_MASK_1023;
 8007620:	2100      	movs	r1, #0
 8007622:	2010      	movs	r0, #16
 8007624:	f7ff f8f2 	bl	800680c <dwt_read32bitoffsetreg>
 8007628:	f3c0 0109 	ubfx	r1, r0, #0, #10
        if (frame_len <= RX_BUFFER_LEN)
        {
            dwt_readrxdata(rx_buffer, frame_len, 0);
 800762c:	2200      	movs	r2, #0
 800762e:	48b3      	ldr	r0, [pc, #716]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 8007630:	f7ff f8d2 	bl	80067d8 <dwt_readrxdata>

        /* Check that the frame is a poll sent by "DS TWR initiator" example.
         * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */

        //Check if message contains data from sensors
        if(rx_buffer[0] == 'd') return 2;
 8007634:	4bb1      	ldr	r3, [pc, #708]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b64      	cmp	r3, #100	; 0x64
 800763a:	f000 81aa 	beq.w	8007992 <UWB_Tag_Get_Distance+0x3ba>

        switch(anchor)
 800763e:	3d01      	subs	r5, #1
 8007640:	2d03      	cmp	r5, #3
 8007642:	d809      	bhi.n	8007658 <UWB_Tag_Get_Distance+0x80>
 8007644:	e8df f005 	tbb	[pc, r5]
 8007648:	20191202 	.word	0x20191202
        {
    		case 1:
    		{
    			memcpy(rx_expected_poll, rx_poll_msg_1, sizeof(rx_poll_msg_1));
 800764c:	4bac      	ldr	r3, [pc, #688]	; (8007900 <UWB_Tag_Get_Distance+0x328>)
 800764e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007652:	ab12      	add	r3, sp, #72	; 0x48
 8007654:	e903 0007 	stmdb	r3, {r0, r1, r2}
    			break;
    		}
        }

        //rx_expected_poll[ALL_MSG_SN_IDX] = 0;
        rx_buffer[ALL_MSG_SN_IDX] = 0;
 8007658:	48a8      	ldr	r0, [pc, #672]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 800765a:	2300      	movs	r3, #0
 800765c:	7083      	strb	r3, [r0, #2]


        //if (memcmp(rx_buffer, rx_poll_msg, ALL_MSG_COMMON_LEN) == 0)
        if (memcmp(rx_buffer, rx_expected_poll, ALL_MSG_COMMON_LEN) == 0)
 800765e:	220a      	movs	r2, #10
 8007660:	a90f      	add	r1, sp, #60	; 0x3c
 8007662:	f000 f9ed 	bl	8007a40 <memcmp>
 8007666:	b1b0      	cbz	r0, 8007696 <UWB_Tag_Get_Distance+0xbe>

        /* Reset RX to properly reinitialise LDE operation. */
        dwt_rxreset();
        return 1;
    }
    return 1;
 8007668:	2001      	movs	r0, #1
 800766a:	e18f      	b.n	800798c <UWB_Tag_Get_Distance+0x3b4>
    			memcpy(rx_expected_poll, rx_poll_msg_2, sizeof(rx_poll_msg_2));
 800766c:	4ba5      	ldr	r3, [pc, #660]	; (8007904 <UWB_Tag_Get_Distance+0x32c>)
 800766e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007672:	ab12      	add	r3, sp, #72	; 0x48
 8007674:	e903 0007 	stmdb	r3, {r0, r1, r2}
    			break;
 8007678:	e7ee      	b.n	8007658 <UWB_Tag_Get_Distance+0x80>
    			memcpy(rx_expected_poll, rx_poll_msg_3, sizeof(rx_poll_msg_3));
 800767a:	4ba3      	ldr	r3, [pc, #652]	; (8007908 <UWB_Tag_Get_Distance+0x330>)
 800767c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007680:	ab12      	add	r3, sp, #72	; 0x48
 8007682:	e903 0007 	stmdb	r3, {r0, r1, r2}
    			break;
 8007686:	e7e7      	b.n	8007658 <UWB_Tag_Get_Distance+0x80>
    			memcpy(rx_expected_poll, rx_poll_msg_4, sizeof(rx_poll_msg_4));
 8007688:	4ba0      	ldr	r3, [pc, #640]	; (800790c <UWB_Tag_Get_Distance+0x334>)
 800768a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800768e:	ab12      	add	r3, sp, #72	; 0x48
 8007690:	e903 0007 	stmdb	r3, {r0, r1, r2}
    			break;
 8007694:	e7e0      	b.n	8007658 <UWB_Tag_Get_Distance+0x80>
            poll_rx_ts = get_rx_timestamp_u64();
 8007696:	f7ff ff4c 	bl	8007532 <get_rx_timestamp_u64>
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	4d97      	ldr	r5, [pc, #604]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 80076a0:	e9c5 6706 	strd	r6, r7, [r5, #24]
            resp_tx_time = ((poll_rx_ts) + (dataPtr->timeout* UUS_TO_DWT_TIME)) >> 8;
 80076a4:	8a63      	ldrh	r3, [r4, #18]
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	18c0      	adds	r0, r0, r3
 80076aa:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80076ae:	0a03      	lsrs	r3, r0, #8
 80076b0:	ea43 6601 	orr.w	r6, r3, r1, lsl #24
            dwt_setdelayedtrxtime((resp_tx_time));
 80076b4:	4630      	mov	r0, r6
 80076b6:	f7ff fb61 	bl	8006d7c <dwt_setdelayedtrxtime>
            dwt_setrxaftertxdelay(RESP_TX_TO_FINAL_RX_DLY_UUS);
 80076ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076be:	f7ff fa79 	bl	8006bb4 <dwt_setrxaftertxdelay>
            dwt_setrxtimeout(FINAL_RX_TIMEOUT_UUS);
 80076c2:	f640 40e4 	movw	r0, #3300	; 0xce4
 80076c6:	f7ff fbfd 	bl	8006ec4 <dwt_setrxtimeout>
            tx_resp_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 80076ca:	4991      	ldr	r1, [pc, #580]	; (8007910 <UWB_Tag_Get_Distance+0x338>)
 80076cc:	f895 3020 	ldrb.w	r3, [r5, #32]
 80076d0:	738b      	strb	r3, [r1, #14]
            dwt_writetxdata(sizeof(tx_resp_msg), tx_resp_msg, 0); /* Zero offset in TX buffer. */
 80076d2:	2200      	movs	r2, #0
 80076d4:	310c      	adds	r1, #12
 80076d6:	200f      	movs	r0, #15
 80076d8:	f7ff f84c 	bl	8006774 <dwt_writetxdata>
            dwt_writetxfctrl(sizeof(tx_resp_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 80076dc:	2201      	movs	r2, #1
 80076de:	2100      	movs	r1, #0
 80076e0:	200f      	movs	r0, #15
 80076e2:	f7ff f913 	bl	800690c <dwt_writetxfctrl>
            dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, PMSC_CTRL0_TXCLKS_125M);
 80076e6:	2220      	movs	r2, #32
 80076e8:	2100      	movs	r1, #0
 80076ea:	2036      	movs	r0, #54	; 0x36
 80076ec:	f7ff f8cc 	bl	8006888 <dwt_write8bitoffsetreg>
            ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
 80076f0:	2003      	movs	r0, #3
 80076f2:	f7ff fb4b 	bl	8006d8c <dwt_starttx>
            dataPtr->debugError = ret;
 80076f6:	7460      	strb	r0, [r4, #17]
            if(ret == DWT_ERROR)
 80076f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80076fc:	d109      	bne.n	8007712 <UWB_Tag_Get_Distance+0x13a>
            	dataPtr->debugMsg = 0x09;
 80076fe:	2309      	movs	r3, #9
 8007700:	7423      	strb	r3, [r4, #16]
                return 1;
 8007702:	2001      	movs	r0, #1
 8007704:	e142      	b.n	800798c <UWB_Tag_Get_Distance+0x3b4>
          	  status_reg = dwt_read32bitreg(SYS_STATUS_ID);
 8007706:	2100      	movs	r1, #0
 8007708:	200f      	movs	r0, #15
 800770a:	f7ff f87f 	bl	800680c <dwt_read32bitoffsetreg>
          	  dataPtr->debugMsg = 0x07;
 800770e:	2307      	movs	r3, #7
 8007710:	7423      	strb	r3, [r4, #16]
            while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8007712:	2100      	movs	r1, #0
 8007714:	200f      	movs	r0, #15
 8007716:	f7ff f879 	bl	800680c <dwt_read32bitoffsetreg>
 800771a:	4b77      	ldr	r3, [pc, #476]	; (80078f8 <UWB_Tag_Get_Distance+0x320>)
 800771c:	4003      	ands	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f1      	beq.n	8007706 <UWB_Tag_Get_Distance+0x12e>
            frame_seq_nb++;
 8007722:	4a76      	ldr	r2, [pc, #472]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 8007724:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007728:	3301      	adds	r3, #1
 800772a:	f882 3020 	strb.w	r3, [r2, #32]
            dataPtr->debugMsg = 0x28;
 800772e:	2328      	movs	r3, #40	; 0x28
 8007730:	7423      	strb	r3, [r4, #16]
            if (status_reg & SYS_STATUS_RXFCG)
 8007732:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007736:	f000 80f7 	beq.w	8007928 <UWB_Tag_Get_Distance+0x350>
                dataPtr->debugMsg = 0x15;
 800773a:	2315      	movs	r3, #21
 800773c:	7423      	strb	r3, [r4, #16]
                dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 800773e:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8007742:	2100      	movs	r1, #0
 8007744:	200f      	movs	r0, #15
 8007746:	f7ff f8cd 	bl	80068e4 <dwt_write32bitoffsetreg>
                frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 800774a:	2100      	movs	r1, #0
 800774c:	2010      	movs	r0, #16
 800774e:	f7ff f85d 	bl	800680c <dwt_read32bitoffsetreg>
 8007752:	f000 017f 	and.w	r1, r0, #127	; 0x7f
                if (frame_len <= RX_BUF_LEN)
 8007756:	2918      	cmp	r1, #24
 8007758:	d909      	bls.n	800776e <UWB_Tag_Get_Distance+0x196>
                rx_buffer[ALL_MSG_SN_IDX] = 0;
 800775a:	4868      	ldr	r0, [pc, #416]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 800775c:	2300      	movs	r3, #0
 800775e:	7083      	strb	r3, [r0, #2]
                if (memcmp(rx_buffer, rx_final_msg, ALL_MSG_COMMON_LEN) == 0)
 8007760:	220a      	movs	r2, #10
 8007762:	496c      	ldr	r1, [pc, #432]	; (8007914 <UWB_Tag_Get_Distance+0x33c>)
 8007764:	f000 f96c 	bl	8007a40 <memcmp>
 8007768:	b130      	cbz	r0, 8007778 <UWB_Tag_Get_Distance+0x1a0>
    return 1;
 800776a:	2001      	movs	r0, #1
 800776c:	e10e      	b.n	800798c <UWB_Tag_Get_Distance+0x3b4>
                    dwt_readrxdata(rx_buffer, frame_len, 0);
 800776e:	2200      	movs	r2, #0
 8007770:	4862      	ldr	r0, [pc, #392]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 8007772:	f7ff f831 	bl	80067d8 <dwt_readrxdata>
 8007776:	e7f0      	b.n	800775a <UWB_Tag_Get_Distance+0x182>
                    dataPtr->debugMsg = 0x80;
 8007778:	2380      	movs	r3, #128	; 0x80
 800777a:	7423      	strb	r3, [r4, #16]
                    resp_tx_ts = get_tx_timestamp_u64();
 800777c:	f7ff feb6 	bl	80074ec <get_tx_timestamp_u64>
 8007780:	4e5e      	ldr	r6, [pc, #376]	; (80078fc <UWB_Tag_Get_Distance+0x324>)
 8007782:	e9c6 010a 	strd	r0, r1, [r6, #40]	; 0x28
                    final_rx_ts = get_rx_timestamp_u64();
 8007786:	f7ff fed4 	bl	8007532 <get_rx_timestamp_u64>
 800778a:	e9c6 010c 	strd	r0, r1, [r6, #48]	; 0x30
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_POLL_TX_TS_IDX], &poll_tx_ts);
 800778e:	a905      	add	r1, sp, #20
 8007790:	f106 000a 	add.w	r0, r6, #10
 8007794:	f7ff fe98 	bl	80074c8 <final_msg_get_ts>
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_RESP_RX_TS_IDX], &resp_rx_ts);
 8007798:	a906      	add	r1, sp, #24
 800779a:	f106 000e 	add.w	r0, r6, #14
 800779e:	f7ff fe93 	bl	80074c8 <final_msg_get_ts>
                    final_msg_get_ts(&rx_buffer[FINAL_MSG_FINAL_TX_TS_IDX], &final_tx_ts);
 80077a2:	a907      	add	r1, sp, #28
 80077a4:	f106 0012 	add.w	r0, r6, #18
 80077a8:	f7ff fe8e 	bl	80074c8 <final_msg_get_ts>
                    poll_rx_ts_32 = (uint32)poll_rx_ts;
 80077ac:	f8d6 8018 	ldr.w	r8, [r6, #24]
                    resp_tx_ts_32 = (uint32)resp_tx_ts;
 80077b0:	6ab5      	ldr	r5, [r6, #40]	; 0x28
                    final_rx_ts_32 = (uint32)final_rx_ts;
 80077b2:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
                    Ra = (double)(resp_rx_ts - poll_tx_ts);
 80077b6:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80077ba:	9805      	ldr	r0, [sp, #20]
 80077bc:	eba9 0000 	sub.w	r0, r9, r0
 80077c0:	f7f8 fe08 	bl	80003d4 <__aeabi_ui2d>
 80077c4:	4606      	mov	r6, r0
 80077c6:	460f      	mov	r7, r1
                    Rb = (double)(final_rx_ts_32 - resp_tx_ts_32);
 80077c8:	ebaa 0005 	sub.w	r0, sl, r5
 80077cc:	f7f8 fe02 	bl	80003d4 <__aeabi_ui2d>
 80077d0:	4682      	mov	sl, r0
 80077d2:	468b      	mov	fp, r1
                    Da = (double)(final_tx_ts - resp_rx_ts);
 80077d4:	9807      	ldr	r0, [sp, #28]
 80077d6:	eba0 0009 	sub.w	r0, r0, r9
 80077da:	f7f8 fdfb 	bl	80003d4 <__aeabi_ui2d>
 80077de:	e9cd 0100 	strd	r0, r1, [sp]
                    Db = (double)(resp_tx_ts_32 - poll_rx_ts_32);
 80077e2:	eba5 0008 	sub.w	r0, r5, r8
 80077e6:	f7f8 fdf5 	bl	80003d4 <__aeabi_ui2d>
 80077ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
                    tof_dtu = (int64)((Ra * Rb - Da * Db) / (Ra + Rb + Da + Db));
 80077ee:	4652      	mov	r2, sl
 80077f0:	465b      	mov	r3, fp
 80077f2:	4630      	mov	r0, r6
 80077f4:	4639      	mov	r1, r7
 80077f6:	f7f8 fe67 	bl	80004c8 <__aeabi_dmul>
 80077fa:	4680      	mov	r8, r0
 80077fc:	4689      	mov	r9, r1
 80077fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007802:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007806:	f7f8 fe5f 	bl	80004c8 <__aeabi_dmul>
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4640      	mov	r0, r8
 8007810:	4649      	mov	r1, r9
 8007812:	f7f8 fca1 	bl	8000158 <__aeabi_dsub>
 8007816:	4680      	mov	r8, r0
 8007818:	4689      	mov	r9, r1
 800781a:	4652      	mov	r2, sl
 800781c:	465b      	mov	r3, fp
 800781e:	4630      	mov	r0, r6
 8007820:	4639      	mov	r1, r7
 8007822:	f7f8 fc9b 	bl	800015c <__adddf3>
 8007826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800782a:	f7f8 fc97 	bl	800015c <__adddf3>
 800782e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007832:	f7f8 fc93 	bl	800015c <__adddf3>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4640      	mov	r0, r8
 800783c:	4649      	mov	r1, r9
 800783e:	f7f8 ff6d 	bl	800071c <__aeabi_ddiv>
 8007842:	f7f9 f88b 	bl	800095c <__aeabi_d2lz>
 8007846:	4606      	mov	r6, r0
 8007848:	460f      	mov	r7, r1
                    tof64 = (uint64_t)tof_dtu*1565;
 800784a:	1802      	adds	r2, r0, r0
 800784c:	eb41 0301 	adc.w	r3, r1, r1
 8007850:	eb12 0800 	adds.w	r8, r2, r0
 8007854:	eb43 0901 	adc.w	r9, r3, r1
 8007858:	ea4f 1109 	mov.w	r1, r9, lsl #4
 800785c:	ea41 7118 	orr.w	r1, r1, r8, lsr #28
 8007860:	ea4f 1008 	mov.w	r0, r8, lsl #4
 8007864:	1982      	adds	r2, r0, r6
 8007866:	eb41 0307 	adc.w	r3, r1, r7
 800786a:	00d9      	lsls	r1, r3, #3
 800786c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007870:	00d0      	lsls	r0, r2, #3
 8007872:	1b82      	subs	r2, r0, r6
 8007874:	eb61 0307 	sbc.w	r3, r1, r7
 8007878:	0099      	lsls	r1, r3, #2
 800787a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800787e:	0090      	lsls	r0, r2, #2
 8007880:	1982      	adds	r2, r0, r6
 8007882:	eb41 0307 	adc.w	r3, r1, r7
                    dist64 = (uint64_t)(tof64*299702547)/1000000;
 8007886:	4d24      	ldr	r5, [pc, #144]	; (8007918 <UWB_Tag_Get_Distance+0x340>)
 8007888:	fba2 0105 	umull	r0, r1, r2, r5
 800788c:	fb05 1103 	mla	r1, r5, r3, r1
 8007890:	4a22      	ldr	r2, [pc, #136]	; (800791c <UWB_Tag_Get_Distance+0x344>)
 8007892:	2300      	movs	r3, #0
 8007894:	f7f9 f84a 	bl	800092c <__aeabi_uldivmod>
 8007898:	4680      	mov	r8, r0
 800789a:	4689      	mov	r9, r1
                    tof = tof_dtu * DWT_TIME_UNITS;
 800789c:	4630      	mov	r0, r6
 800789e:	4639      	mov	r1, r7
 80078a0:	f7f8 fde4 	bl	800046c <__aeabi_l2d>
 80078a4:	a310      	add	r3, pc, #64	; (adr r3, 80078e8 <UWB_Tag_Get_Distance+0x310>)
 80078a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078aa:	f7f8 fe0d 	bl	80004c8 <__aeabi_dmul>
 80078ae:	4606      	mov	r6, r0
 80078b0:	460f      	mov	r7, r1
                    distance = tof * SPEED_OF_LIGHT;
 80078b2:	a30f      	add	r3, pc, #60	; (adr r3, 80078f0 <UWB_Tag_Get_Distance+0x318>)
 80078b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b8:	f7f8 fe06 	bl	80004c8 <__aeabi_dmul>
                    dataPtr->debugMsg = 0x90;
 80078bc:	2390      	movs	r3, #144	; 0x90
 80078be:	7423      	strb	r3, [r4, #16]
                    dataPtr->uwbTof = tof;
 80078c0:	e9c4 6700 	strd	r6, r7, [r4]
                    dataPtr->uwbDistance = distance;
 80078c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
                    dataPtr->uwbDistance64 = dist64;
 80078c8:	e9c4 8906 	strd	r8, r9, [r4, #24]
                    HAL_UART_Transmit(&huart3, intBuf, sprintf(intBuf, "%ldE-6 \r \n", dist64), 10U);
 80078cc:	4642      	mov	r2, r8
 80078ce:	464b      	mov	r3, r9
 80078d0:	4913      	ldr	r1, [pc, #76]	; (8007920 <UWB_Tag_Get_Distance+0x348>)
 80078d2:	a808      	add	r0, sp, #32
 80078d4:	f000 f8c4 	bl	8007a60 <siprintf>
 80078d8:	230a      	movs	r3, #10
 80078da:	b282      	uxth	r2, r0
 80078dc:	a908      	add	r1, sp, #32
 80078de:	4811      	ldr	r0, [pc, #68]	; (8007924 <UWB_Tag_Get_Distance+0x34c>)
 80078e0:	f7fc fd0a 	bl	80042f8 <HAL_UART_Transmit>
                    return 0;
 80078e4:	2000      	movs	r0, #0
 80078e6:	e051      	b.n	800798c <UWB_Tag_Get_Distance+0x3b4>
 80078e8:	3bce48fa 	.word	0x3bce48fa
 80078ec:	3db13518 	.word	0x3db13518
 80078f0:	13000000 	.word	0x13000000
 80078f4:	41b1dd19 	.word	0x41b1dd19
 80078f8:	2427d000 	.word	0x2427d000
 80078fc:	200004d8 	.word	0x200004d8
 8007900:	080083d8 	.word	0x080083d8
 8007904:	080083e4 	.word	0x080083e4
 8007908:	080083f0 	.word	0x080083f0
 800790c:	080083fc 	.word	0x080083fc
 8007910:	20000184 	.word	0x20000184
 8007914:	200001a0 	.word	0x200001a0
 8007918:	11dd1913 	.word	0x11dd1913
 800791c:	000f4240 	.word	0x000f4240
 8007920:	080084b0 	.word	0x080084b0
 8007924:	20000578 	.word	0x20000578
                dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8007928:	4a1b      	ldr	r2, [pc, #108]	; (8007998 <UWB_Tag_Get_Distance+0x3c0>)
 800792a:	2100      	movs	r1, #0
 800792c:	200f      	movs	r0, #15
 800792e:	f7fe ffd9 	bl	80068e4 <dwt_write32bitoffsetreg>
                dataPtr->debugMsg = 0x10;
 8007932:	2310      	movs	r3, #16
 8007934:	7423      	strb	r3, [r4, #16]
                HAL_UART_Transmit(&huart3, intBuf, sprintf(intBuf, "RESP \r \n"), 100U);
 8007936:	4a19      	ldr	r2, [pc, #100]	; (800799c <UWB_Tag_Get_Distance+0x3c4>)
 8007938:	ab08      	add	r3, sp, #32
 800793a:	ca07      	ldmia	r2, {r0, r1, r2}
 800793c:	c303      	stmia	r3!, {r0, r1}
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	4c17      	ldr	r4, [pc, #92]	; (80079a0 <UWB_Tag_Get_Distance+0x3c8>)
 8007942:	2364      	movs	r3, #100	; 0x64
 8007944:	2208      	movs	r2, #8
 8007946:	a908      	add	r1, sp, #32
 8007948:	4620      	mov	r0, r4
 800794a:	f7fc fcd5 	bl	80042f8 <HAL_UART_Transmit>
                Send_Timestamp(resp_tx_time);
 800794e:	4630      	mov	r0, r6
 8007950:	f7fe f9f4 	bl	8005d3c <Send_Timestamp>
                HAL_UART_Transmit(&huart3, intBuf, sprintf(intBuf, "POLL \r \n"), 100U);
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <UWB_Tag_Get_Distance+0x3cc>)
 8007956:	ab08      	add	r3, sp, #32
 8007958:	ca07      	ldmia	r2, {r0, r1, r2}
 800795a:	c303      	stmia	r3!, {r0, r1}
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	2364      	movs	r3, #100	; 0x64
 8007960:	2208      	movs	r2, #8
 8007962:	a908      	add	r1, sp, #32
 8007964:	4620      	mov	r0, r4
 8007966:	f7fc fcc7 	bl	80042f8 <HAL_UART_Transmit>
                Send_Timestamp(poll_rx_ts);
 800796a:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <UWB_Tag_Get_Distance+0x3d0>)
 800796c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007970:	f7fe f9e4 	bl	8005d3c <Send_Timestamp>
                dwt_rxreset();
 8007974:	f7ff fad8 	bl	8006f28 <dwt_rxreset>
                return 1;
 8007978:	2001      	movs	r0, #1
 800797a:	e007      	b.n	800798c <UWB_Tag_Get_Distance+0x3b4>
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 800797c:	4a06      	ldr	r2, [pc, #24]	; (8007998 <UWB_Tag_Get_Distance+0x3c0>)
 800797e:	2100      	movs	r1, #0
 8007980:	200f      	movs	r0, #15
 8007982:	f7fe ffaf 	bl	80068e4 <dwt_write32bitoffsetreg>
        dwt_rxreset();
 8007986:	f7ff facf 	bl	8006f28 <dwt_rxreset>
        return 1;
 800798a:	2001      	movs	r0, #1

}
 800798c:	b013      	add	sp, #76	; 0x4c
 800798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(rx_buffer[0] == 'd') return 2;
 8007992:	2002      	movs	r0, #2
 8007994:	e7fa      	b.n	800798c <UWB_Tag_Get_Distance+0x3b4>
 8007996:	bf00      	nop
 8007998:	24279000 	.word	0x24279000
 800799c:	080084bc 	.word	0x080084bc
 80079a0:	20000578 	.word	0x20000578
 80079a4:	080084c8 	.word	0x080084c8
 80079a8:	200004d8 	.word	0x200004d8

080079ac <Reset_Handler>:
 80079ac:	2100      	movs	r1, #0
 80079ae:	e003      	b.n	80079b8 <LoopCopyDataInit>

080079b0 <CopyDataInit>:
 80079b0:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <LoopFillZerobss+0x14>)
 80079b2:	585b      	ldr	r3, [r3, r1]
 80079b4:	5043      	str	r3, [r0, r1]
 80079b6:	3104      	adds	r1, #4

080079b8 <LoopCopyDataInit>:
 80079b8:	480a      	ldr	r0, [pc, #40]	; (80079e4 <LoopFillZerobss+0x18>)
 80079ba:	4b0b      	ldr	r3, [pc, #44]	; (80079e8 <LoopFillZerobss+0x1c>)
 80079bc:	1842      	adds	r2, r0, r1
 80079be:	429a      	cmp	r2, r3
 80079c0:	d3f6      	bcc.n	80079b0 <CopyDataInit>
 80079c2:	4a0a      	ldr	r2, [pc, #40]	; (80079ec <LoopFillZerobss+0x20>)
 80079c4:	e002      	b.n	80079cc <LoopFillZerobss>

080079c6 <FillZerobss>:
 80079c6:	2300      	movs	r3, #0
 80079c8:	f842 3b04 	str.w	r3, [r2], #4

080079cc <LoopFillZerobss>:
 80079cc:	4b08      	ldr	r3, [pc, #32]	; (80079f0 <LoopFillZerobss+0x24>)
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d3f9      	bcc.n	80079c6 <FillZerobss>
 80079d2:	f7fe fc7b 	bl	80062cc <SystemInit>
 80079d6:	f000 f80f 	bl	80079f8 <__libc_init_array>
 80079da:	f7fe f9c5 	bl	8005d68 <main>
 80079de:	4770      	bx	lr
 80079e0:	08008518 	.word	0x08008518
 80079e4:	20000000 	.word	0x20000000
 80079e8:	2000021c 	.word	0x2000021c
 80079ec:	20000220 	.word	0x20000220
 80079f0:	2000188c 	.word	0x2000188c

080079f4 <ADC1_2_IRQHandler>:
 80079f4:	e7fe      	b.n	80079f4 <ADC1_2_IRQHandler>
	...

080079f8 <__libc_init_array>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	2500      	movs	r5, #0
 80079fc:	4e0c      	ldr	r6, [pc, #48]	; (8007a30 <__libc_init_array+0x38>)
 80079fe:	4c0d      	ldr	r4, [pc, #52]	; (8007a34 <__libc_init_array+0x3c>)
 8007a00:	1ba4      	subs	r4, r4, r6
 8007a02:	10a4      	asrs	r4, r4, #2
 8007a04:	42a5      	cmp	r5, r4
 8007a06:	d109      	bne.n	8007a1c <__libc_init_array+0x24>
 8007a08:	f000 fc60 	bl	80082cc <_init>
 8007a0c:	2500      	movs	r5, #0
 8007a0e:	4e0a      	ldr	r6, [pc, #40]	; (8007a38 <__libc_init_array+0x40>)
 8007a10:	4c0a      	ldr	r4, [pc, #40]	; (8007a3c <__libc_init_array+0x44>)
 8007a12:	1ba4      	subs	r4, r4, r6
 8007a14:	10a4      	asrs	r4, r4, #2
 8007a16:	42a5      	cmp	r5, r4
 8007a18:	d105      	bne.n	8007a26 <__libc_init_array+0x2e>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a20:	4798      	blx	r3
 8007a22:	3501      	adds	r5, #1
 8007a24:	e7ee      	b.n	8007a04 <__libc_init_array+0xc>
 8007a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a2a:	4798      	blx	r3
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	e7f2      	b.n	8007a16 <__libc_init_array+0x1e>
 8007a30:	08008510 	.word	0x08008510
 8007a34:	08008510 	.word	0x08008510
 8007a38:	08008510 	.word	0x08008510
 8007a3c:	08008514 	.word	0x08008514

08007a40 <memcmp>:
 8007a40:	b530      	push	{r4, r5, lr}
 8007a42:	2400      	movs	r4, #0
 8007a44:	42a2      	cmp	r2, r4
 8007a46:	d101      	bne.n	8007a4c <memcmp+0xc>
 8007a48:	2000      	movs	r0, #0
 8007a4a:	e007      	b.n	8007a5c <memcmp+0x1c>
 8007a4c:	5d03      	ldrb	r3, [r0, r4]
 8007a4e:	3401      	adds	r4, #1
 8007a50:	190d      	adds	r5, r1, r4
 8007a52:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8007a56:	42ab      	cmp	r3, r5
 8007a58:	d0f4      	beq.n	8007a44 <memcmp+0x4>
 8007a5a:	1b58      	subs	r0, r3, r5
 8007a5c:	bd30      	pop	{r4, r5, pc}
	...

08007a60 <siprintf>:
 8007a60:	b40e      	push	{r1, r2, r3}
 8007a62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a66:	b500      	push	{lr}
 8007a68:	b09c      	sub	sp, #112	; 0x70
 8007a6a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a6c:	9002      	str	r0, [sp, #8]
 8007a6e:	9006      	str	r0, [sp, #24]
 8007a70:	9107      	str	r1, [sp, #28]
 8007a72:	9104      	str	r1, [sp, #16]
 8007a74:	4808      	ldr	r0, [pc, #32]	; (8007a98 <siprintf+0x38>)
 8007a76:	4909      	ldr	r1, [pc, #36]	; (8007a9c <siprintf+0x3c>)
 8007a78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a7c:	9105      	str	r1, [sp, #20]
 8007a7e:	6800      	ldr	r0, [r0, #0]
 8007a80:	a902      	add	r1, sp, #8
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	f000 f87c 	bl	8007b80 <_svfiprintf_r>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	9b02      	ldr	r3, [sp, #8]
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	b01c      	add	sp, #112	; 0x70
 8007a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a94:	b003      	add	sp, #12
 8007a96:	4770      	bx	lr
 8007a98:	200001b8 	.word	0x200001b8
 8007a9c:	ffff0208 	.word	0xffff0208

08007aa0 <strlcpy>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	b162      	cbz	r2, 8007ac0 <strlcpy+0x20>
 8007aa6:	3a01      	subs	r2, #1
 8007aa8:	d008      	beq.n	8007abc <strlcpy+0x1c>
 8007aaa:	f813 4b01 	ldrb.w	r4, [r3], #1
 8007aae:	f800 4b01 	strb.w	r4, [r0], #1
 8007ab2:	2c00      	cmp	r4, #0
 8007ab4:	d1f7      	bne.n	8007aa6 <strlcpy+0x6>
 8007ab6:	1a58      	subs	r0, r3, r1
 8007ab8:	3801      	subs	r0, #1
 8007aba:	bd10      	pop	{r4, pc}
 8007abc:	2200      	movs	r2, #0
 8007abe:	7002      	strb	r2, [r0, #0]
 8007ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	d1fb      	bne.n	8007ac0 <strlcpy+0x20>
 8007ac8:	e7f5      	b.n	8007ab6 <strlcpy+0x16>

08007aca <__ssputs_r>:
 8007aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ace:	688e      	ldr	r6, [r1, #8]
 8007ad0:	4682      	mov	sl, r0
 8007ad2:	429e      	cmp	r6, r3
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	4690      	mov	r8, r2
 8007ad8:	4699      	mov	r9, r3
 8007ada:	d837      	bhi.n	8007b4c <__ssputs_r+0x82>
 8007adc:	898a      	ldrh	r2, [r1, #12]
 8007ade:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ae2:	d031      	beq.n	8007b48 <__ssputs_r+0x7e>
 8007ae4:	2302      	movs	r3, #2
 8007ae6:	6825      	ldr	r5, [r4, #0]
 8007ae8:	6909      	ldr	r1, [r1, #16]
 8007aea:	1a6f      	subs	r7, r5, r1
 8007aec:	6965      	ldr	r5, [r4, #20]
 8007aee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af2:	fb95 f5f3 	sdiv	r5, r5, r3
 8007af6:	f109 0301 	add.w	r3, r9, #1
 8007afa:	443b      	add	r3, r7
 8007afc:	429d      	cmp	r5, r3
 8007afe:	bf38      	it	cc
 8007b00:	461d      	movcc	r5, r3
 8007b02:	0553      	lsls	r3, r2, #21
 8007b04:	d530      	bpl.n	8007b68 <__ssputs_r+0x9e>
 8007b06:	4629      	mov	r1, r5
 8007b08:	f000 fb38 	bl	800817c <_malloc_r>
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	b950      	cbnz	r0, 8007b26 <__ssputs_r+0x5c>
 8007b10:	230c      	movs	r3, #12
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	f8ca 3000 	str.w	r3, [sl]
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b26:	463a      	mov	r2, r7
 8007b28:	6921      	ldr	r1, [r4, #16]
 8007b2a:	f000 fab7 	bl	800809c <memcpy>
 8007b2e:	89a3      	ldrh	r3, [r4, #12]
 8007b30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b38:	81a3      	strh	r3, [r4, #12]
 8007b3a:	6126      	str	r6, [r4, #16]
 8007b3c:	443e      	add	r6, r7
 8007b3e:	6026      	str	r6, [r4, #0]
 8007b40:	464e      	mov	r6, r9
 8007b42:	6165      	str	r5, [r4, #20]
 8007b44:	1bed      	subs	r5, r5, r7
 8007b46:	60a5      	str	r5, [r4, #8]
 8007b48:	454e      	cmp	r6, r9
 8007b4a:	d900      	bls.n	8007b4e <__ssputs_r+0x84>
 8007b4c:	464e      	mov	r6, r9
 8007b4e:	4632      	mov	r2, r6
 8007b50:	4641      	mov	r1, r8
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	f000 faad 	bl	80080b2 <memmove>
 8007b58:	68a3      	ldr	r3, [r4, #8]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	1b9b      	subs	r3, r3, r6
 8007b5e:	60a3      	str	r3, [r4, #8]
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	441e      	add	r6, r3
 8007b64:	6026      	str	r6, [r4, #0]
 8007b66:	e7dc      	b.n	8007b22 <__ssputs_r+0x58>
 8007b68:	462a      	mov	r2, r5
 8007b6a:	f000 fb61 	bl	8008230 <_realloc_r>
 8007b6e:	4606      	mov	r6, r0
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d1e2      	bne.n	8007b3a <__ssputs_r+0x70>
 8007b74:	6921      	ldr	r1, [r4, #16]
 8007b76:	4650      	mov	r0, sl
 8007b78:	f000 fab4 	bl	80080e4 <_free_r>
 8007b7c:	e7c8      	b.n	8007b10 <__ssputs_r+0x46>
	...

08007b80 <_svfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	461d      	mov	r5, r3
 8007b86:	898b      	ldrh	r3, [r1, #12]
 8007b88:	b09d      	sub	sp, #116	; 0x74
 8007b8a:	061f      	lsls	r7, r3, #24
 8007b8c:	4680      	mov	r8, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	4616      	mov	r6, r2
 8007b92:	d50f      	bpl.n	8007bb4 <_svfiprintf_r+0x34>
 8007b94:	690b      	ldr	r3, [r1, #16]
 8007b96:	b96b      	cbnz	r3, 8007bb4 <_svfiprintf_r+0x34>
 8007b98:	2140      	movs	r1, #64	; 0x40
 8007b9a:	f000 faef 	bl	800817c <_malloc_r>
 8007b9e:	6020      	str	r0, [r4, #0]
 8007ba0:	6120      	str	r0, [r4, #16]
 8007ba2:	b928      	cbnz	r0, 8007bb0 <_svfiprintf_r+0x30>
 8007ba4:	230c      	movs	r3, #12
 8007ba6:	f8c8 3000 	str.w	r3, [r8]
 8007baa:	f04f 30ff 	mov.w	r0, #4294967295
 8007bae:	e0c8      	b.n	8007d42 <_svfiprintf_r+0x1c2>
 8007bb0:	2340      	movs	r3, #64	; 0x40
 8007bb2:	6163      	str	r3, [r4, #20]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8007bb8:	2320      	movs	r3, #32
 8007bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bbe:	2330      	movs	r3, #48	; 0x30
 8007bc0:	f04f 0b01 	mov.w	fp, #1
 8007bc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bc8:	9503      	str	r5, [sp, #12]
 8007bca:	4637      	mov	r7, r6
 8007bcc:	463d      	mov	r5, r7
 8007bce:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007bd2:	b10b      	cbz	r3, 8007bd8 <_svfiprintf_r+0x58>
 8007bd4:	2b25      	cmp	r3, #37	; 0x25
 8007bd6:	d13e      	bne.n	8007c56 <_svfiprintf_r+0xd6>
 8007bd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007bdc:	d00b      	beq.n	8007bf6 <_svfiprintf_r+0x76>
 8007bde:	4653      	mov	r3, sl
 8007be0:	4632      	mov	r2, r6
 8007be2:	4621      	mov	r1, r4
 8007be4:	4640      	mov	r0, r8
 8007be6:	f7ff ff70 	bl	8007aca <__ssputs_r>
 8007bea:	3001      	adds	r0, #1
 8007bec:	f000 80a4 	beq.w	8007d38 <_svfiprintf_r+0x1b8>
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	4453      	add	r3, sl
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	783b      	ldrb	r3, [r7, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 809d 	beq.w	8007d38 <_svfiprintf_r+0x1b8>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f04f 32ff 	mov.w	r2, #4294967295
 8007c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c08:	9304      	str	r3, [sp, #16]
 8007c0a:	9307      	str	r3, [sp, #28]
 8007c0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c10:	931a      	str	r3, [sp, #104]	; 0x68
 8007c12:	462f      	mov	r7, r5
 8007c14:	2205      	movs	r2, #5
 8007c16:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007c1a:	4850      	ldr	r0, [pc, #320]	; (8007d5c <_svfiprintf_r+0x1dc>)
 8007c1c:	f000 fa30 	bl	8008080 <memchr>
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	b9d0      	cbnz	r0, 8007c5a <_svfiprintf_r+0xda>
 8007c24:	06d9      	lsls	r1, r3, #27
 8007c26:	bf44      	itt	mi
 8007c28:	2220      	movmi	r2, #32
 8007c2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c2e:	071a      	lsls	r2, r3, #28
 8007c30:	bf44      	itt	mi
 8007c32:	222b      	movmi	r2, #43	; 0x2b
 8007c34:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007c38:	782a      	ldrb	r2, [r5, #0]
 8007c3a:	2a2a      	cmp	r2, #42	; 0x2a
 8007c3c:	d015      	beq.n	8007c6a <_svfiprintf_r+0xea>
 8007c3e:	462f      	mov	r7, r5
 8007c40:	2000      	movs	r0, #0
 8007c42:	250a      	movs	r5, #10
 8007c44:	9a07      	ldr	r2, [sp, #28]
 8007c46:	4639      	mov	r1, r7
 8007c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c4c:	3b30      	subs	r3, #48	; 0x30
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d94d      	bls.n	8007cee <_svfiprintf_r+0x16e>
 8007c52:	b1b8      	cbz	r0, 8007c84 <_svfiprintf_r+0x104>
 8007c54:	e00f      	b.n	8007c76 <_svfiprintf_r+0xf6>
 8007c56:	462f      	mov	r7, r5
 8007c58:	e7b8      	b.n	8007bcc <_svfiprintf_r+0x4c>
 8007c5a:	4a40      	ldr	r2, [pc, #256]	; (8007d5c <_svfiprintf_r+0x1dc>)
 8007c5c:	463d      	mov	r5, r7
 8007c5e:	1a80      	subs	r0, r0, r2
 8007c60:	fa0b f000 	lsl.w	r0, fp, r0
 8007c64:	4318      	orrs	r0, r3
 8007c66:	9004      	str	r0, [sp, #16]
 8007c68:	e7d3      	b.n	8007c12 <_svfiprintf_r+0x92>
 8007c6a:	9a03      	ldr	r2, [sp, #12]
 8007c6c:	1d11      	adds	r1, r2, #4
 8007c6e:	6812      	ldr	r2, [r2, #0]
 8007c70:	9103      	str	r1, [sp, #12]
 8007c72:	2a00      	cmp	r2, #0
 8007c74:	db01      	blt.n	8007c7a <_svfiprintf_r+0xfa>
 8007c76:	9207      	str	r2, [sp, #28]
 8007c78:	e004      	b.n	8007c84 <_svfiprintf_r+0x104>
 8007c7a:	4252      	negs	r2, r2
 8007c7c:	f043 0302 	orr.w	r3, r3, #2
 8007c80:	9207      	str	r2, [sp, #28]
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	783b      	ldrb	r3, [r7, #0]
 8007c86:	2b2e      	cmp	r3, #46	; 0x2e
 8007c88:	d10c      	bne.n	8007ca4 <_svfiprintf_r+0x124>
 8007c8a:	787b      	ldrb	r3, [r7, #1]
 8007c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8e:	d133      	bne.n	8007cf8 <_svfiprintf_r+0x178>
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	3702      	adds	r7, #2
 8007c94:	1d1a      	adds	r2, r3, #4
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	9203      	str	r2, [sp, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bfb8      	it	lt
 8007c9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ca2:	9305      	str	r3, [sp, #20]
 8007ca4:	4d2e      	ldr	r5, [pc, #184]	; (8007d60 <_svfiprintf_r+0x1e0>)
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	7839      	ldrb	r1, [r7, #0]
 8007caa:	4628      	mov	r0, r5
 8007cac:	f000 f9e8 	bl	8008080 <memchr>
 8007cb0:	b138      	cbz	r0, 8007cc2 <_svfiprintf_r+0x142>
 8007cb2:	2340      	movs	r3, #64	; 0x40
 8007cb4:	1b40      	subs	r0, r0, r5
 8007cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	3701      	adds	r7, #1
 8007cbe:	4303      	orrs	r3, r0
 8007cc0:	9304      	str	r3, [sp, #16]
 8007cc2:	7839      	ldrb	r1, [r7, #0]
 8007cc4:	2206      	movs	r2, #6
 8007cc6:	4827      	ldr	r0, [pc, #156]	; (8007d64 <_svfiprintf_r+0x1e4>)
 8007cc8:	1c7e      	adds	r6, r7, #1
 8007cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cce:	f000 f9d7 	bl	8008080 <memchr>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	d038      	beq.n	8007d48 <_svfiprintf_r+0x1c8>
 8007cd6:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <_svfiprintf_r+0x1e8>)
 8007cd8:	bb13      	cbnz	r3, 8007d20 <_svfiprintf_r+0x1a0>
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	3307      	adds	r3, #7
 8007cde:	f023 0307 	bic.w	r3, r3, #7
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce8:	444b      	add	r3, r9
 8007cea:	9309      	str	r3, [sp, #36]	; 0x24
 8007cec:	e76d      	b.n	8007bca <_svfiprintf_r+0x4a>
 8007cee:	fb05 3202 	mla	r2, r5, r2, r3
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	e7a6      	b.n	8007c46 <_svfiprintf_r+0xc6>
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	250a      	movs	r5, #10
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	3701      	adds	r7, #1
 8007d00:	9305      	str	r3, [sp, #20]
 8007d02:	4638      	mov	r0, r7
 8007d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d08:	3a30      	subs	r2, #48	; 0x30
 8007d0a:	2a09      	cmp	r2, #9
 8007d0c:	d903      	bls.n	8007d16 <_svfiprintf_r+0x196>
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0c8      	beq.n	8007ca4 <_svfiprintf_r+0x124>
 8007d12:	9105      	str	r1, [sp, #20]
 8007d14:	e7c6      	b.n	8007ca4 <_svfiprintf_r+0x124>
 8007d16:	fb05 2101 	mla	r1, r5, r1, r2
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	4607      	mov	r7, r0
 8007d1e:	e7f0      	b.n	8007d02 <_svfiprintf_r+0x182>
 8007d20:	ab03      	add	r3, sp, #12
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	4622      	mov	r2, r4
 8007d26:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <_svfiprintf_r+0x1ec>)
 8007d28:	a904      	add	r1, sp, #16
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	f3af 8000 	nop.w
 8007d30:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007d34:	4681      	mov	r9, r0
 8007d36:	d1d6      	bne.n	8007ce6 <_svfiprintf_r+0x166>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	065b      	lsls	r3, r3, #25
 8007d3c:	f53f af35 	bmi.w	8007baa <_svfiprintf_r+0x2a>
 8007d40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d42:	b01d      	add	sp, #116	; 0x74
 8007d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d48:	ab03      	add	r3, sp, #12
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4b07      	ldr	r3, [pc, #28]	; (8007d6c <_svfiprintf_r+0x1ec>)
 8007d50:	a904      	add	r1, sp, #16
 8007d52:	4640      	mov	r0, r8
 8007d54:	f000 f882 	bl	8007e5c <_printf_i>
 8007d58:	e7ea      	b.n	8007d30 <_svfiprintf_r+0x1b0>
 8007d5a:	bf00      	nop
 8007d5c:	080084d4 	.word	0x080084d4
 8007d60:	080084da 	.word	0x080084da
 8007d64:	080084de 	.word	0x080084de
 8007d68:	00000000 	.word	0x00000000
 8007d6c:	08007acb 	.word	0x08007acb

08007d70 <_printf_common>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	4691      	mov	r9, r2
 8007d76:	461f      	mov	r7, r3
 8007d78:	688a      	ldr	r2, [r1, #8]
 8007d7a:	690b      	ldr	r3, [r1, #16]
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	bfb8      	it	lt
 8007d82:	4613      	movlt	r3, r2
 8007d84:	f8c9 3000 	str.w	r3, [r9]
 8007d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d92:	b112      	cbz	r2, 8007d9a <_printf_common+0x2a>
 8007d94:	3301      	adds	r3, #1
 8007d96:	f8c9 3000 	str.w	r3, [r9]
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	0699      	lsls	r1, r3, #26
 8007d9e:	bf42      	ittt	mi
 8007da0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007da4:	3302      	addmi	r3, #2
 8007da6:	f8c9 3000 	strmi.w	r3, [r9]
 8007daa:	6825      	ldr	r5, [r4, #0]
 8007dac:	f015 0506 	ands.w	r5, r5, #6
 8007db0:	d107      	bne.n	8007dc2 <_printf_common+0x52>
 8007db2:	f104 0a19 	add.w	sl, r4, #25
 8007db6:	68e3      	ldr	r3, [r4, #12]
 8007db8:	f8d9 2000 	ldr.w	r2, [r9]
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	42ab      	cmp	r3, r5
 8007dc0:	dc29      	bgt.n	8007e16 <_printf_common+0xa6>
 8007dc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	3300      	adds	r3, #0
 8007dca:	bf18      	it	ne
 8007dcc:	2301      	movne	r3, #1
 8007dce:	0692      	lsls	r2, r2, #26
 8007dd0:	d42e      	bmi.n	8007e30 <_printf_common+0xc0>
 8007dd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	4630      	mov	r0, r6
 8007dda:	47c0      	blx	r8
 8007ddc:	3001      	adds	r0, #1
 8007dde:	d021      	beq.n	8007e24 <_printf_common+0xb4>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	68e5      	ldr	r5, [r4, #12]
 8007de4:	f003 0306 	and.w	r3, r3, #6
 8007de8:	2b04      	cmp	r3, #4
 8007dea:	bf18      	it	ne
 8007dec:	2500      	movne	r5, #0
 8007dee:	f8d9 2000 	ldr.w	r2, [r9]
 8007df2:	f04f 0900 	mov.w	r9, #0
 8007df6:	bf08      	it	eq
 8007df8:	1aad      	subeq	r5, r5, r2
 8007dfa:	68a3      	ldr	r3, [r4, #8]
 8007dfc:	6922      	ldr	r2, [r4, #16]
 8007dfe:	bf08      	it	eq
 8007e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e04:	4293      	cmp	r3, r2
 8007e06:	bfc4      	itt	gt
 8007e08:	1a9b      	subgt	r3, r3, r2
 8007e0a:	18ed      	addgt	r5, r5, r3
 8007e0c:	341a      	adds	r4, #26
 8007e0e:	454d      	cmp	r5, r9
 8007e10:	d11a      	bne.n	8007e48 <_printf_common+0xd8>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e008      	b.n	8007e28 <_printf_common+0xb8>
 8007e16:	2301      	movs	r3, #1
 8007e18:	4652      	mov	r2, sl
 8007e1a:	4639      	mov	r1, r7
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	47c0      	blx	r8
 8007e20:	3001      	adds	r0, #1
 8007e22:	d103      	bne.n	8007e2c <_printf_common+0xbc>
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	e7c2      	b.n	8007db6 <_printf_common+0x46>
 8007e30:	2030      	movs	r0, #48	; 0x30
 8007e32:	18e1      	adds	r1, r4, r3
 8007e34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e38:	1c5a      	adds	r2, r3, #1
 8007e3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e3e:	4422      	add	r2, r4
 8007e40:	3302      	adds	r3, #2
 8007e42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e46:	e7c4      	b.n	8007dd2 <_printf_common+0x62>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	4639      	mov	r1, r7
 8007e4e:	4630      	mov	r0, r6
 8007e50:	47c0      	blx	r8
 8007e52:	3001      	adds	r0, #1
 8007e54:	d0e6      	beq.n	8007e24 <_printf_common+0xb4>
 8007e56:	f109 0901 	add.w	r9, r9, #1
 8007e5a:	e7d8      	b.n	8007e0e <_printf_common+0x9e>

08007e5c <_printf_i>:
 8007e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007e64:	460c      	mov	r4, r1
 8007e66:	7e09      	ldrb	r1, [r1, #24]
 8007e68:	b085      	sub	sp, #20
 8007e6a:	296e      	cmp	r1, #110	; 0x6e
 8007e6c:	4617      	mov	r7, r2
 8007e6e:	4606      	mov	r6, r0
 8007e70:	4698      	mov	r8, r3
 8007e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e74:	f000 80b3 	beq.w	8007fde <_printf_i+0x182>
 8007e78:	d822      	bhi.n	8007ec0 <_printf_i+0x64>
 8007e7a:	2963      	cmp	r1, #99	; 0x63
 8007e7c:	d036      	beq.n	8007eec <_printf_i+0x90>
 8007e7e:	d80a      	bhi.n	8007e96 <_printf_i+0x3a>
 8007e80:	2900      	cmp	r1, #0
 8007e82:	f000 80b9 	beq.w	8007ff8 <_printf_i+0x19c>
 8007e86:	2958      	cmp	r1, #88	; 0x58
 8007e88:	f000 8083 	beq.w	8007f92 <_printf_i+0x136>
 8007e8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007e94:	e032      	b.n	8007efc <_printf_i+0xa0>
 8007e96:	2964      	cmp	r1, #100	; 0x64
 8007e98:	d001      	beq.n	8007e9e <_printf_i+0x42>
 8007e9a:	2969      	cmp	r1, #105	; 0x69
 8007e9c:	d1f6      	bne.n	8007e8c <_printf_i+0x30>
 8007e9e:	6820      	ldr	r0, [r4, #0]
 8007ea0:	6813      	ldr	r3, [r2, #0]
 8007ea2:	0605      	lsls	r5, r0, #24
 8007ea4:	f103 0104 	add.w	r1, r3, #4
 8007ea8:	d52a      	bpl.n	8007f00 <_printf_i+0xa4>
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6011      	str	r1, [r2, #0]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	da03      	bge.n	8007eba <_printf_i+0x5e>
 8007eb2:	222d      	movs	r2, #45	; 0x2d
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007eba:	486f      	ldr	r0, [pc, #444]	; (8008078 <_printf_i+0x21c>)
 8007ebc:	220a      	movs	r2, #10
 8007ebe:	e039      	b.n	8007f34 <_printf_i+0xd8>
 8007ec0:	2973      	cmp	r1, #115	; 0x73
 8007ec2:	f000 809d 	beq.w	8008000 <_printf_i+0x1a4>
 8007ec6:	d808      	bhi.n	8007eda <_printf_i+0x7e>
 8007ec8:	296f      	cmp	r1, #111	; 0x6f
 8007eca:	d020      	beq.n	8007f0e <_printf_i+0xb2>
 8007ecc:	2970      	cmp	r1, #112	; 0x70
 8007ece:	d1dd      	bne.n	8007e8c <_printf_i+0x30>
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	f043 0320 	orr.w	r3, r3, #32
 8007ed6:	6023      	str	r3, [r4, #0]
 8007ed8:	e003      	b.n	8007ee2 <_printf_i+0x86>
 8007eda:	2975      	cmp	r1, #117	; 0x75
 8007edc:	d017      	beq.n	8007f0e <_printf_i+0xb2>
 8007ede:	2978      	cmp	r1, #120	; 0x78
 8007ee0:	d1d4      	bne.n	8007e8c <_printf_i+0x30>
 8007ee2:	2378      	movs	r3, #120	; 0x78
 8007ee4:	4865      	ldr	r0, [pc, #404]	; (800807c <_printf_i+0x220>)
 8007ee6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eea:	e055      	b.n	8007f98 <_printf_i+0x13c>
 8007eec:	6813      	ldr	r3, [r2, #0]
 8007eee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ef2:	1d19      	adds	r1, r3, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6011      	str	r1, [r2, #0]
 8007ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007efc:	2301      	movs	r3, #1
 8007efe:	e08c      	b.n	800801a <_printf_i+0x1be>
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007f06:	6011      	str	r1, [r2, #0]
 8007f08:	bf18      	it	ne
 8007f0a:	b21b      	sxthne	r3, r3
 8007f0c:	e7cf      	b.n	8007eae <_printf_i+0x52>
 8007f0e:	6813      	ldr	r3, [r2, #0]
 8007f10:	6825      	ldr	r5, [r4, #0]
 8007f12:	1d18      	adds	r0, r3, #4
 8007f14:	6010      	str	r0, [r2, #0]
 8007f16:	0628      	lsls	r0, r5, #24
 8007f18:	d501      	bpl.n	8007f1e <_printf_i+0xc2>
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	e002      	b.n	8007f24 <_printf_i+0xc8>
 8007f1e:	0668      	lsls	r0, r5, #25
 8007f20:	d5fb      	bpl.n	8007f1a <_printf_i+0xbe>
 8007f22:	881b      	ldrh	r3, [r3, #0]
 8007f24:	296f      	cmp	r1, #111	; 0x6f
 8007f26:	bf14      	ite	ne
 8007f28:	220a      	movne	r2, #10
 8007f2a:	2208      	moveq	r2, #8
 8007f2c:	4852      	ldr	r0, [pc, #328]	; (8008078 <_printf_i+0x21c>)
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f34:	6865      	ldr	r5, [r4, #4]
 8007f36:	2d00      	cmp	r5, #0
 8007f38:	60a5      	str	r5, [r4, #8]
 8007f3a:	f2c0 8095 	blt.w	8008068 <_printf_i+0x20c>
 8007f3e:	6821      	ldr	r1, [r4, #0]
 8007f40:	f021 0104 	bic.w	r1, r1, #4
 8007f44:	6021      	str	r1, [r4, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d13d      	bne.n	8007fc6 <_printf_i+0x16a>
 8007f4a:	2d00      	cmp	r5, #0
 8007f4c:	f040 808e 	bne.w	800806c <_printf_i+0x210>
 8007f50:	4665      	mov	r5, ip
 8007f52:	2a08      	cmp	r2, #8
 8007f54:	d10b      	bne.n	8007f6e <_printf_i+0x112>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	07db      	lsls	r3, r3, #31
 8007f5a:	d508      	bpl.n	8007f6e <_printf_i+0x112>
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	6862      	ldr	r2, [r4, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	bfde      	ittt	le
 8007f64:	2330      	movle	r3, #48	; 0x30
 8007f66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007f6e:	ebac 0305 	sub.w	r3, ip, r5
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	f8cd 8000 	str.w	r8, [sp]
 8007f78:	463b      	mov	r3, r7
 8007f7a:	aa03      	add	r2, sp, #12
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f7ff fef6 	bl	8007d70 <_printf_common>
 8007f84:	3001      	adds	r0, #1
 8007f86:	d14d      	bne.n	8008024 <_printf_i+0x1c8>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8c:	b005      	add	sp, #20
 8007f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f92:	4839      	ldr	r0, [pc, #228]	; (8008078 <_printf_i+0x21c>)
 8007f94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007f98:	6813      	ldr	r3, [r2, #0]
 8007f9a:	6821      	ldr	r1, [r4, #0]
 8007f9c:	1d1d      	adds	r5, r3, #4
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6015      	str	r5, [r2, #0]
 8007fa2:	060a      	lsls	r2, r1, #24
 8007fa4:	d50b      	bpl.n	8007fbe <_printf_i+0x162>
 8007fa6:	07ca      	lsls	r2, r1, #31
 8007fa8:	bf44      	itt	mi
 8007faa:	f041 0120 	orrmi.w	r1, r1, #32
 8007fae:	6021      	strmi	r1, [r4, #0]
 8007fb0:	b91b      	cbnz	r3, 8007fba <_printf_i+0x15e>
 8007fb2:	6822      	ldr	r2, [r4, #0]
 8007fb4:	f022 0220 	bic.w	r2, r2, #32
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	2210      	movs	r2, #16
 8007fbc:	e7b7      	b.n	8007f2e <_printf_i+0xd2>
 8007fbe:	064d      	lsls	r5, r1, #25
 8007fc0:	bf48      	it	mi
 8007fc2:	b29b      	uxthmi	r3, r3
 8007fc4:	e7ef      	b.n	8007fa6 <_printf_i+0x14a>
 8007fc6:	4665      	mov	r5, ip
 8007fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fcc:	fb02 3311 	mls	r3, r2, r1, r3
 8007fd0:	5cc3      	ldrb	r3, [r0, r3]
 8007fd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	d1f5      	bne.n	8007fc8 <_printf_i+0x16c>
 8007fdc:	e7b9      	b.n	8007f52 <_printf_i+0xf6>
 8007fde:	6813      	ldr	r3, [r2, #0]
 8007fe0:	6825      	ldr	r5, [r4, #0]
 8007fe2:	1d18      	adds	r0, r3, #4
 8007fe4:	6961      	ldr	r1, [r4, #20]
 8007fe6:	6010      	str	r0, [r2, #0]
 8007fe8:	0628      	lsls	r0, r5, #24
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	d501      	bpl.n	8007ff2 <_printf_i+0x196>
 8007fee:	6019      	str	r1, [r3, #0]
 8007ff0:	e002      	b.n	8007ff8 <_printf_i+0x19c>
 8007ff2:	066a      	lsls	r2, r5, #25
 8007ff4:	d5fb      	bpl.n	8007fee <_printf_i+0x192>
 8007ff6:	8019      	strh	r1, [r3, #0]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4665      	mov	r5, ip
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	e7b9      	b.n	8007f74 <_printf_i+0x118>
 8008000:	6813      	ldr	r3, [r2, #0]
 8008002:	1d19      	adds	r1, r3, #4
 8008004:	6011      	str	r1, [r2, #0]
 8008006:	681d      	ldr	r5, [r3, #0]
 8008008:	6862      	ldr	r2, [r4, #4]
 800800a:	2100      	movs	r1, #0
 800800c:	4628      	mov	r0, r5
 800800e:	f000 f837 	bl	8008080 <memchr>
 8008012:	b108      	cbz	r0, 8008018 <_printf_i+0x1bc>
 8008014:	1b40      	subs	r0, r0, r5
 8008016:	6060      	str	r0, [r4, #4]
 8008018:	6863      	ldr	r3, [r4, #4]
 800801a:	6123      	str	r3, [r4, #16]
 800801c:	2300      	movs	r3, #0
 800801e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008022:	e7a7      	b.n	8007f74 <_printf_i+0x118>
 8008024:	6923      	ldr	r3, [r4, #16]
 8008026:	462a      	mov	r2, r5
 8008028:	4639      	mov	r1, r7
 800802a:	4630      	mov	r0, r6
 800802c:	47c0      	blx	r8
 800802e:	3001      	adds	r0, #1
 8008030:	d0aa      	beq.n	8007f88 <_printf_i+0x12c>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	079b      	lsls	r3, r3, #30
 8008036:	d413      	bmi.n	8008060 <_printf_i+0x204>
 8008038:	68e0      	ldr	r0, [r4, #12]
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	4298      	cmp	r0, r3
 800803e:	bfb8      	it	lt
 8008040:	4618      	movlt	r0, r3
 8008042:	e7a3      	b.n	8007f8c <_printf_i+0x130>
 8008044:	2301      	movs	r3, #1
 8008046:	464a      	mov	r2, r9
 8008048:	4639      	mov	r1, r7
 800804a:	4630      	mov	r0, r6
 800804c:	47c0      	blx	r8
 800804e:	3001      	adds	r0, #1
 8008050:	d09a      	beq.n	8007f88 <_printf_i+0x12c>
 8008052:	3501      	adds	r5, #1
 8008054:	68e3      	ldr	r3, [r4, #12]
 8008056:	9a03      	ldr	r2, [sp, #12]
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	42ab      	cmp	r3, r5
 800805c:	dcf2      	bgt.n	8008044 <_printf_i+0x1e8>
 800805e:	e7eb      	b.n	8008038 <_printf_i+0x1dc>
 8008060:	2500      	movs	r5, #0
 8008062:	f104 0919 	add.w	r9, r4, #25
 8008066:	e7f5      	b.n	8008054 <_printf_i+0x1f8>
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1ac      	bne.n	8007fc6 <_printf_i+0x16a>
 800806c:	7803      	ldrb	r3, [r0, #0]
 800806e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008076:	e76c      	b.n	8007f52 <_printf_i+0xf6>
 8008078:	080084e5 	.word	0x080084e5
 800807c:	080084f6 	.word	0x080084f6

08008080 <memchr>:
 8008080:	b510      	push	{r4, lr}
 8008082:	b2c9      	uxtb	r1, r1
 8008084:	4402      	add	r2, r0
 8008086:	4290      	cmp	r0, r2
 8008088:	4603      	mov	r3, r0
 800808a:	d101      	bne.n	8008090 <memchr+0x10>
 800808c:	2300      	movs	r3, #0
 800808e:	e003      	b.n	8008098 <memchr+0x18>
 8008090:	781c      	ldrb	r4, [r3, #0]
 8008092:	3001      	adds	r0, #1
 8008094:	428c      	cmp	r4, r1
 8008096:	d1f6      	bne.n	8008086 <memchr+0x6>
 8008098:	4618      	mov	r0, r3
 800809a:	bd10      	pop	{r4, pc}

0800809c <memcpy>:
 800809c:	b510      	push	{r4, lr}
 800809e:	1e43      	subs	r3, r0, #1
 80080a0:	440a      	add	r2, r1
 80080a2:	4291      	cmp	r1, r2
 80080a4:	d100      	bne.n	80080a8 <memcpy+0xc>
 80080a6:	bd10      	pop	{r4, pc}
 80080a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b0:	e7f7      	b.n	80080a2 <memcpy+0x6>

080080b2 <memmove>:
 80080b2:	4288      	cmp	r0, r1
 80080b4:	b510      	push	{r4, lr}
 80080b6:	eb01 0302 	add.w	r3, r1, r2
 80080ba:	d807      	bhi.n	80080cc <memmove+0x1a>
 80080bc:	1e42      	subs	r2, r0, #1
 80080be:	4299      	cmp	r1, r3
 80080c0:	d00a      	beq.n	80080d8 <memmove+0x26>
 80080c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080c6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80080ca:	e7f8      	b.n	80080be <memmove+0xc>
 80080cc:	4283      	cmp	r3, r0
 80080ce:	d9f5      	bls.n	80080bc <memmove+0xa>
 80080d0:	1881      	adds	r1, r0, r2
 80080d2:	1ad2      	subs	r2, r2, r3
 80080d4:	42d3      	cmn	r3, r2
 80080d6:	d100      	bne.n	80080da <memmove+0x28>
 80080d8:	bd10      	pop	{r4, pc}
 80080da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80080e2:	e7f7      	b.n	80080d4 <memmove+0x22>

080080e4 <_free_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4605      	mov	r5, r0
 80080e8:	2900      	cmp	r1, #0
 80080ea:	d043      	beq.n	8008174 <_free_r+0x90>
 80080ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080f0:	1f0c      	subs	r4, r1, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfb8      	it	lt
 80080f6:	18e4      	addlt	r4, r4, r3
 80080f8:	f000 f8d0 	bl	800829c <__malloc_lock>
 80080fc:	4a1e      	ldr	r2, [pc, #120]	; (8008178 <_free_r+0x94>)
 80080fe:	6813      	ldr	r3, [r2, #0]
 8008100:	4610      	mov	r0, r2
 8008102:	b933      	cbnz	r3, 8008112 <_free_r+0x2e>
 8008104:	6063      	str	r3, [r4, #4]
 8008106:	6014      	str	r4, [r2, #0]
 8008108:	4628      	mov	r0, r5
 800810a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800810e:	f000 b8c6 	b.w	800829e <__malloc_unlock>
 8008112:	42a3      	cmp	r3, r4
 8008114:	d90b      	bls.n	800812e <_free_r+0x4a>
 8008116:	6821      	ldr	r1, [r4, #0]
 8008118:	1862      	adds	r2, r4, r1
 800811a:	4293      	cmp	r3, r2
 800811c:	bf01      	itttt	eq
 800811e:	681a      	ldreq	r2, [r3, #0]
 8008120:	685b      	ldreq	r3, [r3, #4]
 8008122:	1852      	addeq	r2, r2, r1
 8008124:	6022      	streq	r2, [r4, #0]
 8008126:	6063      	str	r3, [r4, #4]
 8008128:	6004      	str	r4, [r0, #0]
 800812a:	e7ed      	b.n	8008108 <_free_r+0x24>
 800812c:	4613      	mov	r3, r2
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	b10a      	cbz	r2, 8008136 <_free_r+0x52>
 8008132:	42a2      	cmp	r2, r4
 8008134:	d9fa      	bls.n	800812c <_free_r+0x48>
 8008136:	6819      	ldr	r1, [r3, #0]
 8008138:	1858      	adds	r0, r3, r1
 800813a:	42a0      	cmp	r0, r4
 800813c:	d10b      	bne.n	8008156 <_free_r+0x72>
 800813e:	6820      	ldr	r0, [r4, #0]
 8008140:	4401      	add	r1, r0
 8008142:	1858      	adds	r0, r3, r1
 8008144:	4282      	cmp	r2, r0
 8008146:	6019      	str	r1, [r3, #0]
 8008148:	d1de      	bne.n	8008108 <_free_r+0x24>
 800814a:	6810      	ldr	r0, [r2, #0]
 800814c:	6852      	ldr	r2, [r2, #4]
 800814e:	4401      	add	r1, r0
 8008150:	6019      	str	r1, [r3, #0]
 8008152:	605a      	str	r2, [r3, #4]
 8008154:	e7d8      	b.n	8008108 <_free_r+0x24>
 8008156:	d902      	bls.n	800815e <_free_r+0x7a>
 8008158:	230c      	movs	r3, #12
 800815a:	602b      	str	r3, [r5, #0]
 800815c:	e7d4      	b.n	8008108 <_free_r+0x24>
 800815e:	6820      	ldr	r0, [r4, #0]
 8008160:	1821      	adds	r1, r4, r0
 8008162:	428a      	cmp	r2, r1
 8008164:	bf01      	itttt	eq
 8008166:	6811      	ldreq	r1, [r2, #0]
 8008168:	6852      	ldreq	r2, [r2, #4]
 800816a:	1809      	addeq	r1, r1, r0
 800816c:	6021      	streq	r1, [r4, #0]
 800816e:	6062      	str	r2, [r4, #4]
 8008170:	605c      	str	r4, [r3, #4]
 8008172:	e7c9      	b.n	8008108 <_free_r+0x24>
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	bf00      	nop
 8008178:	20000510 	.word	0x20000510

0800817c <_malloc_r>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	1ccd      	adds	r5, r1, #3
 8008180:	f025 0503 	bic.w	r5, r5, #3
 8008184:	3508      	adds	r5, #8
 8008186:	2d0c      	cmp	r5, #12
 8008188:	bf38      	it	cc
 800818a:	250c      	movcc	r5, #12
 800818c:	2d00      	cmp	r5, #0
 800818e:	4606      	mov	r6, r0
 8008190:	db01      	blt.n	8008196 <_malloc_r+0x1a>
 8008192:	42a9      	cmp	r1, r5
 8008194:	d903      	bls.n	800819e <_malloc_r+0x22>
 8008196:	230c      	movs	r3, #12
 8008198:	6033      	str	r3, [r6, #0]
 800819a:	2000      	movs	r0, #0
 800819c:	bd70      	pop	{r4, r5, r6, pc}
 800819e:	f000 f87d 	bl	800829c <__malloc_lock>
 80081a2:	4a21      	ldr	r2, [pc, #132]	; (8008228 <_malloc_r+0xac>)
 80081a4:	6814      	ldr	r4, [r2, #0]
 80081a6:	4621      	mov	r1, r4
 80081a8:	b991      	cbnz	r1, 80081d0 <_malloc_r+0x54>
 80081aa:	4c20      	ldr	r4, [pc, #128]	; (800822c <_malloc_r+0xb0>)
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	b91b      	cbnz	r3, 80081b8 <_malloc_r+0x3c>
 80081b0:	4630      	mov	r0, r6
 80081b2:	f000 f863 	bl	800827c <_sbrk_r>
 80081b6:	6020      	str	r0, [r4, #0]
 80081b8:	4629      	mov	r1, r5
 80081ba:	4630      	mov	r0, r6
 80081bc:	f000 f85e 	bl	800827c <_sbrk_r>
 80081c0:	1c43      	adds	r3, r0, #1
 80081c2:	d124      	bne.n	800820e <_malloc_r+0x92>
 80081c4:	230c      	movs	r3, #12
 80081c6:	4630      	mov	r0, r6
 80081c8:	6033      	str	r3, [r6, #0]
 80081ca:	f000 f868 	bl	800829e <__malloc_unlock>
 80081ce:	e7e4      	b.n	800819a <_malloc_r+0x1e>
 80081d0:	680b      	ldr	r3, [r1, #0]
 80081d2:	1b5b      	subs	r3, r3, r5
 80081d4:	d418      	bmi.n	8008208 <_malloc_r+0x8c>
 80081d6:	2b0b      	cmp	r3, #11
 80081d8:	d90f      	bls.n	80081fa <_malloc_r+0x7e>
 80081da:	600b      	str	r3, [r1, #0]
 80081dc:	18cc      	adds	r4, r1, r3
 80081de:	50cd      	str	r5, [r1, r3]
 80081e0:	4630      	mov	r0, r6
 80081e2:	f000 f85c 	bl	800829e <__malloc_unlock>
 80081e6:	f104 000b 	add.w	r0, r4, #11
 80081ea:	1d23      	adds	r3, r4, #4
 80081ec:	f020 0007 	bic.w	r0, r0, #7
 80081f0:	1ac3      	subs	r3, r0, r3
 80081f2:	d0d3      	beq.n	800819c <_malloc_r+0x20>
 80081f4:	425a      	negs	r2, r3
 80081f6:	50e2      	str	r2, [r4, r3]
 80081f8:	e7d0      	b.n	800819c <_malloc_r+0x20>
 80081fa:	684b      	ldr	r3, [r1, #4]
 80081fc:	428c      	cmp	r4, r1
 80081fe:	bf16      	itet	ne
 8008200:	6063      	strne	r3, [r4, #4]
 8008202:	6013      	streq	r3, [r2, #0]
 8008204:	460c      	movne	r4, r1
 8008206:	e7eb      	b.n	80081e0 <_malloc_r+0x64>
 8008208:	460c      	mov	r4, r1
 800820a:	6849      	ldr	r1, [r1, #4]
 800820c:	e7cc      	b.n	80081a8 <_malloc_r+0x2c>
 800820e:	1cc4      	adds	r4, r0, #3
 8008210:	f024 0403 	bic.w	r4, r4, #3
 8008214:	42a0      	cmp	r0, r4
 8008216:	d005      	beq.n	8008224 <_malloc_r+0xa8>
 8008218:	1a21      	subs	r1, r4, r0
 800821a:	4630      	mov	r0, r6
 800821c:	f000 f82e 	bl	800827c <_sbrk_r>
 8008220:	3001      	adds	r0, #1
 8008222:	d0cf      	beq.n	80081c4 <_malloc_r+0x48>
 8008224:	6025      	str	r5, [r4, #0]
 8008226:	e7db      	b.n	80081e0 <_malloc_r+0x64>
 8008228:	20000510 	.word	0x20000510
 800822c:	20000514 	.word	0x20000514

08008230 <_realloc_r>:
 8008230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008232:	4607      	mov	r7, r0
 8008234:	4614      	mov	r4, r2
 8008236:	460e      	mov	r6, r1
 8008238:	b921      	cbnz	r1, 8008244 <_realloc_r+0x14>
 800823a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800823e:	4611      	mov	r1, r2
 8008240:	f7ff bf9c 	b.w	800817c <_malloc_r>
 8008244:	b922      	cbnz	r2, 8008250 <_realloc_r+0x20>
 8008246:	f7ff ff4d 	bl	80080e4 <_free_r>
 800824a:	4625      	mov	r5, r4
 800824c:	4628      	mov	r0, r5
 800824e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008250:	f000 f826 	bl	80082a0 <_malloc_usable_size_r>
 8008254:	42a0      	cmp	r0, r4
 8008256:	d20f      	bcs.n	8008278 <_realloc_r+0x48>
 8008258:	4621      	mov	r1, r4
 800825a:	4638      	mov	r0, r7
 800825c:	f7ff ff8e 	bl	800817c <_malloc_r>
 8008260:	4605      	mov	r5, r0
 8008262:	2800      	cmp	r0, #0
 8008264:	d0f2      	beq.n	800824c <_realloc_r+0x1c>
 8008266:	4631      	mov	r1, r6
 8008268:	4622      	mov	r2, r4
 800826a:	f7ff ff17 	bl	800809c <memcpy>
 800826e:	4631      	mov	r1, r6
 8008270:	4638      	mov	r0, r7
 8008272:	f7ff ff37 	bl	80080e4 <_free_r>
 8008276:	e7e9      	b.n	800824c <_realloc_r+0x1c>
 8008278:	4635      	mov	r5, r6
 800827a:	e7e7      	b.n	800824c <_realloc_r+0x1c>

0800827c <_sbrk_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	2300      	movs	r3, #0
 8008280:	4c05      	ldr	r4, [pc, #20]	; (8008298 <_sbrk_r+0x1c>)
 8008282:	4605      	mov	r5, r0
 8008284:	4608      	mov	r0, r1
 8008286:	6023      	str	r3, [r4, #0]
 8008288:	f000 f812 	bl	80082b0 <_sbrk>
 800828c:	1c43      	adds	r3, r0, #1
 800828e:	d102      	bne.n	8008296 <_sbrk_r+0x1a>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	b103      	cbz	r3, 8008296 <_sbrk_r+0x1a>
 8008294:	602b      	str	r3, [r5, #0]
 8008296:	bd38      	pop	{r3, r4, r5, pc}
 8008298:	20001888 	.word	0x20001888

0800829c <__malloc_lock>:
 800829c:	4770      	bx	lr

0800829e <__malloc_unlock>:
 800829e:	4770      	bx	lr

080082a0 <_malloc_usable_size_r>:
 80082a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a4:	1f18      	subs	r0, r3, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfbc      	itt	lt
 80082aa:	580b      	ldrlt	r3, [r1, r0]
 80082ac:	18c0      	addlt	r0, r0, r3
 80082ae:	4770      	bx	lr

080082b0 <_sbrk>:
 80082b0:	4b04      	ldr	r3, [pc, #16]	; (80082c4 <_sbrk+0x14>)
 80082b2:	4602      	mov	r2, r0
 80082b4:	6819      	ldr	r1, [r3, #0]
 80082b6:	b909      	cbnz	r1, 80082bc <_sbrk+0xc>
 80082b8:	4903      	ldr	r1, [pc, #12]	; (80082c8 <_sbrk+0x18>)
 80082ba:	6019      	str	r1, [r3, #0]
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	4402      	add	r2, r0
 80082c0:	601a      	str	r2, [r3, #0]
 80082c2:	4770      	bx	lr
 80082c4:	20000518 	.word	0x20000518
 80082c8:	20001890 	.word	0x20001890

080082cc <_init>:
 80082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ce:	bf00      	nop
 80082d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d2:	bc08      	pop	{r3}
 80082d4:	469e      	mov	lr, r3
 80082d6:	4770      	bx	lr

080082d8 <_fini>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	bf00      	nop
 80082dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082de:	bc08      	pop	{r3}
 80082e0:	469e      	mov	lr, r3
 80082e2:	4770      	bx	lr
