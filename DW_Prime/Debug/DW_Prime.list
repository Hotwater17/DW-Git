
DW_Prime.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000214  20000000  08006c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000a74  20000218  08006e9c  00020218  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  20000c8c  08006e9c  00020c8c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
  9 .debug_info   00041f9e  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000061a1  00000000  00000000  000621db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00019c5f  00000000  00000000  0006837c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002380  00000000  00000000  00081fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000022d8  00000000  00000000  00084360  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00012b2d  00000000  00000000  00086638  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000aab7  00000000  00000000  00099165  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  000a3c1c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006e14  00000000  00000000  000a3c98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000218 	.word	0x20000218
 8000128:	00000000 	.word	0x00000000
 800012c:	080069d0 	.word	0x080069d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000021c 	.word	0x2000021c
 8000148:	080069d0 	.word	0x080069d0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000150:	4b0e      	ldr	r3, [pc, #56]	; (800018c <HAL_InitTick+0x40>)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0c      	ldr	r2, [pc, #48]	; (8000190 <HAL_InitTick+0x44>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f9f6 	bl	8000554 <HAL_SYSTICK_Config>
 8000168:	b968      	cbnz	r0, 8000186 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016a:	2c0f      	cmp	r4, #15
 800016c:	d901      	bls.n	8000172 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800016e:	2001      	movs	r0, #1
 8000170:	e00a      	b.n	8000188 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000172:	2200      	movs	r2, #0
 8000174:	4621      	mov	r1, r4
 8000176:	f04f 30ff 	mov.w	r0, #4294967295
 800017a:	f000 f99f 	bl	80004bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017e:	4b03      	ldr	r3, [pc, #12]	; (800018c <HAL_InitTick+0x40>)
 8000180:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000182:	2000      	movs	r0, #0
 8000184:	e000      	b.n	8000188 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000186:	2001      	movs	r0, #1
}
 8000188:	bd10      	pop	{r4, pc}
 800018a:	bf00      	nop
 800018c:	20000000 	.word	0x20000000
 8000190:	20000008 	.word	0x20000008

08000194 <HAL_Init>:
{
 8000194:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000196:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
 8000198:	6813      	ldr	r3, [r2, #0]
 800019a:	f043 0310 	orr.w	r3, r3, #16
 800019e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a0:	2003      	movs	r0, #3
 80001a2:	f000 f979 	bl	8000498 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f004 fc5a 	bl	8004a64 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	6811      	ldr	r1, [r2, #0]
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <HAL_IncTick+0x14>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200002ec 	.word	0x200002ec
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200002ec 	.word	0x200002ec

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	f1b4 3fff 	cmp.w	r4, #4294967295
 80001ea:	d002      	beq.n	80001f2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <HAL_Delay+0x24>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f2:	f7ff ffed 	bl	80001d0 <HAL_GetTick>
 80001f6:	1b40      	subs	r0, r0, r5
 80001f8:	42a0      	cmp	r0, r4
 80001fa:	d3fa      	bcc.n	80001f2 <HAL_Delay+0x16>
  {
  }
}
 80001fc:	bd38      	pop	{r3, r4, r5, pc}
 80001fe:	bf00      	nop
 8000200:	20000000 	.word	0x20000000

08000204 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000204:	b430      	push	{r4, r5}
 8000206:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000208:	2300      	movs	r3, #0
 800020a:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800020c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000210:	2b01      	cmp	r3, #1
 8000212:	f000 808b 	beq.w	800032c <HAL_ADC_ConfigChannel+0x128>
 8000216:	4602      	mov	r2, r0
 8000218:	2301      	movs	r3, #1
 800021a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800021e:	684b      	ldr	r3, [r1, #4]
 8000220:	2b06      	cmp	r3, #6
 8000222:	d829      	bhi.n	8000278 <HAL_ADC_ConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000224:	6805      	ldr	r5, [r0, #0]
 8000226:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000228:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800022c:	3b05      	subs	r3, #5
 800022e:	241f      	movs	r4, #31
 8000230:	409c      	lsls	r4, r3
 8000232:	ea20 0004 	bic.w	r0, r0, r4
 8000236:	680c      	ldr	r4, [r1, #0]
 8000238:	fa04 f303 	lsl.w	r3, r4, r3
 800023c:	4303      	orrs	r3, r0
 800023e:	636b      	str	r3, [r5, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000240:	680b      	ldr	r3, [r1, #0]
 8000242:	2b09      	cmp	r3, #9
 8000244:	d938      	bls.n	80002b8 <HAL_ADC_ConfigChannel+0xb4>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000246:	6815      	ldr	r5, [r2, #0]
 8000248:	68e8      	ldr	r0, [r5, #12]
 800024a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800024e:	3b1e      	subs	r3, #30
 8000250:	2407      	movs	r4, #7
 8000252:	409c      	lsls	r4, r3
 8000254:	ea20 0004 	bic.w	r0, r0, r4
 8000258:	688c      	ldr	r4, [r1, #8]
 800025a:	fa04 f303 	lsl.w	r3, r4, r3
 800025e:	4303      	orrs	r3, r0
 8000260:	60eb      	str	r3, [r5, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000262:	680b      	ldr	r3, [r1, #0]
 8000264:	3b10      	subs	r3, #16
 8000266:	2b01      	cmp	r3, #1
 8000268:	d934      	bls.n	80002d4 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800026a:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800026c:	2300      	movs	r3, #0
 800026e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000272:	b002      	add	sp, #8
 8000274:	bc30      	pop	{r4, r5}
 8000276:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000278:	2b0c      	cmp	r3, #12
 800027a:	d80e      	bhi.n	800029a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800027c:	6805      	ldr	r5, [r0, #0]
 800027e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000280:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000284:	3b23      	subs	r3, #35	; 0x23
 8000286:	241f      	movs	r4, #31
 8000288:	409c      	lsls	r4, r3
 800028a:	ea20 0004 	bic.w	r0, r0, r4
 800028e:	680c      	ldr	r4, [r1, #0]
 8000290:	fa04 f303 	lsl.w	r3, r4, r3
 8000294:	4303      	orrs	r3, r0
 8000296:	632b      	str	r3, [r5, #48]	; 0x30
 8000298:	e7d2      	b.n	8000240 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800029a:	6805      	ldr	r5, [r0, #0]
 800029c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800029e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80002a2:	3b41      	subs	r3, #65	; 0x41
 80002a4:	241f      	movs	r4, #31
 80002a6:	409c      	lsls	r4, r3
 80002a8:	ea20 0004 	bic.w	r0, r0, r4
 80002ac:	680c      	ldr	r4, [r1, #0]
 80002ae:	fa04 f303 	lsl.w	r3, r4, r3
 80002b2:	4303      	orrs	r3, r0
 80002b4:	62eb      	str	r3, [r5, #44]	; 0x2c
 80002b6:	e7c3      	b.n	8000240 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002b8:	6815      	ldr	r5, [r2, #0]
 80002ba:	6928      	ldr	r0, [r5, #16]
 80002bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80002c0:	2407      	movs	r4, #7
 80002c2:	409c      	lsls	r4, r3
 80002c4:	ea20 0004 	bic.w	r0, r0, r4
 80002c8:	688c      	ldr	r4, [r1, #8]
 80002ca:	fa04 f303 	lsl.w	r3, r4, r3
 80002ce:	4303      	orrs	r3, r0
 80002d0:	612b      	str	r3, [r5, #16]
 80002d2:	e7c6      	b.n	8000262 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80002d4:	6813      	ldr	r3, [r2, #0]
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <HAL_ADC_ConfigChannel+0x12c>)
 80002d8:	4283      	cmp	r3, r0
 80002da:	d005      	beq.n	80002e8 <HAL_ADC_ConfigChannel+0xe4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002e4:	2001      	movs	r0, #1
 80002e6:	e7c1      	b.n	800026c <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002e8:	6898      	ldr	r0, [r3, #8]
 80002ea:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80002ee:	d11b      	bne.n	8000328 <HAL_ADC_ConfigChannel+0x124>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002f0:	6898      	ldr	r0, [r3, #8]
 80002f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002f6:	6098      	str	r0, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002f8:	680b      	ldr	r3, [r1, #0]
 80002fa:	2b10      	cmp	r3, #16
 80002fc:	d001      	beq.n	8000302 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002fe:	2000      	movs	r0, #0
 8000300:	e7b4      	b.n	800026c <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <HAL_ADC_ConfigChannel+0x130>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	490c      	ldr	r1, [pc, #48]	; (8000338 <HAL_ADC_ConfigChannel+0x134>)
 8000308:	fba1 1303 	umull	r1, r3, r1, r3
 800030c:	0c9b      	lsrs	r3, r3, #18
 800030e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000312:	0059      	lsls	r1, r3, #1
 8000314:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8000316:	e002      	b.n	800031e <HAL_ADC_ConfigChannel+0x11a>
            wait_loop_index--;
 8000318:	9b01      	ldr	r3, [sp, #4]
 800031a:	3b01      	subs	r3, #1
 800031c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d1f9      	bne.n	8000318 <HAL_ADC_ConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000324:	2000      	movs	r0, #0
 8000326:	e7a1      	b.n	800026c <HAL_ADC_ConfigChannel+0x68>
 8000328:	2000      	movs	r0, #0
 800032a:	e79f      	b.n	800026c <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 800032c:	2002      	movs	r0, #2
 800032e:	e7a0      	b.n	8000272 <HAL_ADC_ConfigChannel+0x6e>
 8000330:	40012400 	.word	0x40012400
 8000334:	20000008 	.word	0x20000008
 8000338:	431bde83 	.word	0x431bde83

0800033c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800033c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800033e:	6803      	ldr	r3, [r0, #0]
 8000340:	689a      	ldr	r2, [r3, #8]
 8000342:	f012 0f01 	tst.w	r2, #1
 8000346:	d101      	bne.n	800034c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000348:	2000      	movs	r0, #0
}
 800034a:	bd38      	pop	{r3, r4, r5, pc}
 800034c:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	f022 0201 	bic.w	r2, r2, #1
 8000354:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000356:	f7ff ff3b 	bl	80001d0 <HAL_GetTick>
 800035a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800035c:	6823      	ldr	r3, [r4, #0]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	f013 0f01 	tst.w	r3, #1
 8000364:	d00e      	beq.n	8000384 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000366:	f7ff ff33 	bl	80001d0 <HAL_GetTick>
 800036a:	1b40      	subs	r0, r0, r5
 800036c:	2802      	cmp	r0, #2
 800036e:	d9f5      	bls.n	800035c <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000370:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000378:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8000380:	2001      	movs	r0, #1
 8000382:	e7e2      	b.n	800034a <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8000384:	2000      	movs	r0, #0
 8000386:	e7e0      	b.n	800034a <ADC_ConversionStop_Disable+0xe>

08000388 <HAL_ADC_Init>:
  if(hadc == NULL)
 8000388:	2800      	cmp	r0, #0
 800038a:	d07f      	beq.n	800048c <HAL_ADC_Init+0x104>
{
 800038c:	b538      	push	{r3, r4, r5, lr}
 800038e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000390:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000392:	2b00      	cmp	r3, #0
 8000394:	d033      	beq.n	80003fe <HAL_ADC_Init+0x76>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000396:	4620      	mov	r0, r4
 8000398:	f7ff ffd0 	bl	800033c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800039c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800039e:	f013 0310 	ands.w	r3, r3, #16
 80003a2:	d16d      	bne.n	8000480 <HAL_ADC_Init+0xf8>
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d16b      	bne.n	8000480 <HAL_ADC_Init+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 80003a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003aa:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80003ae:	f022 0202 	bic.w	r2, r2, #2
 80003b2:	f042 0202 	orr.w	r2, r2, #2
 80003b6:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80003b8:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80003ba:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80003bc:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80003be:	68e5      	ldr	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80003c0:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003c4:	68a1      	ldr	r1, [r4, #8]
 80003c6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80003ca:	d021      	beq.n	8000410 <HAL_ADC_Init+0x88>
 80003cc:	2901      	cmp	r1, #1
 80003ce:	d01c      	beq.n	800040a <HAL_ADC_Init+0x82>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003d0:	6961      	ldr	r1, [r4, #20]
 80003d2:	2901      	cmp	r1, #1
 80003d4:	d01f      	beq.n	8000416 <HAL_ADC_Init+0x8e>
      MODIFY_REG(hadc->Instance->CR1,
 80003d6:	6825      	ldr	r5, [r4, #0]
 80003d8:	6869      	ldr	r1, [r5, #4]
 80003da:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 80003de:	430b      	orrs	r3, r1
 80003e0:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80003e2:	6821      	ldr	r1, [r4, #0]
 80003e4:	688d      	ldr	r5, [r1, #8]
 80003e6:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <HAL_ADC_Init+0x108>)
 80003e8:	402b      	ands	r3, r5
 80003ea:	4313      	orrs	r3, r2
 80003ec:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003ee:	68a3      	ldr	r3, [r4, #8]
 80003f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003f4:	d020      	beq.n	8000438 <HAL_ADC_Init+0xb0>
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d01e      	beq.n	8000438 <HAL_ADC_Init+0xb0>
  uint32_t tmp_sqr1 = 0U;
 80003fa:	2100      	movs	r1, #0
 80003fc:	e01f      	b.n	800043e <HAL_ADC_Init+0xb6>
    ADC_CLEAR_ERRORCODE(hadc);
 80003fe:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000400:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000404:	f004 fb4e 	bl	8004aa4 <HAL_ADC_MspInit>
 8000408:	e7c5      	b.n	8000396 <HAL_ADC_Init+0xe>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800040a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800040e:	e7df      	b.n	80003d0 <HAL_ADC_Init+0x48>
 8000410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000414:	e7dc      	b.n	80003d0 <HAL_ADC_Init+0x48>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000416:	b935      	cbnz	r5, 8000426 <HAL_ADC_Init+0x9e>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000418:	69a1      	ldr	r1, [r4, #24]
 800041a:	3901      	subs	r1, #1
 800041c:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8000420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000424:	e7d7      	b.n	80003d6 <HAL_ADC_Init+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000426:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000428:	f041 0120 	orr.w	r1, r1, #32
 800042c:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800042e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000430:	f041 0101 	orr.w	r1, r1, #1
 8000434:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000436:	e7ce      	b.n	80003d6 <HAL_ADC_Init+0x4e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000438:	6923      	ldr	r3, [r4, #16]
 800043a:	3b01      	subs	r3, #1
 800043c:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800043e:	6825      	ldr	r5, [r4, #0]
 8000440:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000442:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000446:	430b      	orrs	r3, r1
 8000448:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800044a:	6823      	ldr	r3, [r4, #0]
 800044c:	6899      	ldr	r1, [r3, #8]
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_ADC_Init+0x10c>)
 8000450:	400b      	ands	r3, r1
 8000452:	429a      	cmp	r2, r3
 8000454:	d00b      	beq.n	800046e <HAL_ADC_Init+0xe6>
      ADC_STATE_CLR_SET(hadc->State,
 8000456:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000458:	f023 0312 	bic.w	r3, r3, #18
 800045c:	f043 0310 	orr.w	r3, r3, #16
 8000460:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000462:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 800046a:	2001      	movs	r0, #1
 800046c:	e00d      	b.n	800048a <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 800046e:	2300      	movs	r3, #0
 8000470:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000472:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000474:	f023 0303 	bic.w	r3, r3, #3
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	62a3      	str	r3, [r4, #40]	; 0x28
 800047e:	e004      	b.n	800048a <HAL_ADC_Init+0x102>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000482:	f043 0310 	orr.w	r3, r3, #16
 8000486:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8000488:	2001      	movs	r0, #1
}
 800048a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800048c:	2001      	movs	r0, #1
}
 800048e:	4770      	bx	lr
 8000490:	ffe1f7fd 	.word	0xffe1f7fd
 8000494:	ff1f0efe 	.word	0xff1f0efe

08000498 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000498:	4a07      	ldr	r2, [pc, #28]	; (80004b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800049a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800049c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004a0:	041b      	lsls	r3, r3, #16
 80004a2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80004a4:	0200      	lsls	r0, r0, #8
 80004a6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80004aa:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80004ac:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80004b0:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80004b4:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80004b6:	4770      	bx	lr
 80004b8:	e000ed00 	.word	0xe000ed00

080004bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004bc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <HAL_NVIC_SetPriority+0x60>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004c6:	f1c3 0407 	rsb	r4, r3, #7
 80004ca:	2c04      	cmp	r4, #4
 80004cc:	bf28      	it	cs
 80004ce:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004d0:	1d1d      	adds	r5, r3, #4
 80004d2:	2d06      	cmp	r5, #6
 80004d4:	d918      	bls.n	8000508 <HAL_NVIC_SetPriority+0x4c>
 80004d6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d8:	f04f 35ff 	mov.w	r5, #4294967295
 80004dc:	fa05 f404 	lsl.w	r4, r5, r4
 80004e0:	ea21 0104 	bic.w	r1, r1, r4
 80004e4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004e6:	fa05 f303 	lsl.w	r3, r5, r3
 80004ea:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004ee:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 80004f0:	2800      	cmp	r0, #0
 80004f2:	db0b      	blt.n	800050c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004f4:	0109      	lsls	r1, r1, #4
 80004f6:	b2c9      	uxtb	r1, r1
 80004f8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80004fc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000500:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000504:	bc30      	pop	{r4, r5}
 8000506:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000508:	2300      	movs	r3, #0
 800050a:	e7e5      	b.n	80004d8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800050c:	f000 000f 	and.w	r0, r0, #15
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	b2c9      	uxtb	r1, r1
 8000514:	4b02      	ldr	r3, [pc, #8]	; (8000520 <HAL_NVIC_SetPriority+0x64>)
 8000516:	5419      	strb	r1, [r3, r0]
 8000518:	e7f4      	b.n	8000504 <HAL_NVIC_SetPriority+0x48>
 800051a:	bf00      	nop
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	e000ed14 	.word	0xe000ed14

08000524 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000524:	f000 021f 	and.w	r2, r0, #31
 8000528:	0940      	lsrs	r0, r0, #5
 800052a:	2301      	movs	r3, #1
 800052c:	4093      	lsls	r3, r2
 800052e:	4a02      	ldr	r2, [pc, #8]	; (8000538 <HAL_NVIC_EnableIRQ+0x14>)
 8000530:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e000e100 	.word	0xe000e100

0800053c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800053c:	f000 021f 	and.w	r2, r0, #31
 8000540:	0940      	lsrs	r0, r0, #5
 8000542:	2301      	movs	r3, #1
 8000544:	4093      	lsls	r3, r2
 8000546:	3020      	adds	r0, #32
 8000548:	4a01      	ldr	r2, [pc, #4]	; (8000550 <HAL_NVIC_DisableIRQ+0x14>)
 800054a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000554:	3801      	subs	r0, #1
 8000556:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800055a:	d20a      	bcs.n	8000572 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <HAL_SYSTICK_Config+0x24>)
 800055e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <HAL_SYSTICK_Config+0x28>)
 8000562:	21f0      	movs	r1, #240	; 0xf0
 8000564:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000568:	2000      	movs	r0, #0
 800056a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000572:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000e010 	.word	0xe000e010
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000580:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000582:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000586:	2b02      	cmp	r3, #2
 8000588:	d003      	beq.n	8000592 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800058a:	2304      	movs	r3, #4
 800058c:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 800058e:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000590:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000592:	6802      	ldr	r2, [r0, #0]
 8000594:	6813      	ldr	r3, [r2, #0]
 8000596:	f023 030e 	bic.w	r3, r3, #14
 800059a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800059c:	6802      	ldr	r2, [r0, #0]
 800059e:	6813      	ldr	r3, [r2, #0]
 80005a0:	f023 0301 	bic.w	r3, r3, #1
 80005a4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80005a6:	6803      	ldr	r3, [r0, #0]
 80005a8:	4a19      	ldr	r2, [pc, #100]	; (8000610 <HAL_DMA_Abort_IT+0x90>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d014      	beq.n	80005d8 <HAL_DMA_Abort_IT+0x58>
 80005ae:	3214      	adds	r2, #20
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d01f      	beq.n	80005f4 <HAL_DMA_Abort_IT+0x74>
 80005b4:	3214      	adds	r2, #20
 80005b6:	4293      	cmp	r3, r2
 80005b8:	d01e      	beq.n	80005f8 <HAL_DMA_Abort_IT+0x78>
 80005ba:	3214      	adds	r2, #20
 80005bc:	4293      	cmp	r3, r2
 80005be:	d01e      	beq.n	80005fe <HAL_DMA_Abort_IT+0x7e>
 80005c0:	3214      	adds	r2, #20
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d01e      	beq.n	8000604 <HAL_DMA_Abort_IT+0x84>
 80005c6:	3214      	adds	r2, #20
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d002      	beq.n	80005d2 <HAL_DMA_Abort_IT+0x52>
 80005cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005d0:	e003      	b.n	80005da <HAL_DMA_Abort_IT+0x5a>
 80005d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005d6:	e000      	b.n	80005da <HAL_DMA_Abort_IT+0x5a>
 80005d8:	2201      	movs	r2, #1
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <HAL_DMA_Abort_IT+0x94>)
 80005dc:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80005de:	2301      	movs	r3, #1
 80005e0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80005e4:	2300      	movs	r3, #0
 80005e6:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 80005ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80005ec:	b16b      	cbz	r3, 800060a <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 80005ee:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80005f0:	2000      	movs	r0, #0
 80005f2:	e7cd      	b.n	8000590 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80005f4:	2210      	movs	r2, #16
 80005f6:	e7f0      	b.n	80005da <HAL_DMA_Abort_IT+0x5a>
 80005f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005fc:	e7ed      	b.n	80005da <HAL_DMA_Abort_IT+0x5a>
 80005fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000602:	e7ea      	b.n	80005da <HAL_DMA_Abort_IT+0x5a>
 8000604:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000608:	e7e7      	b.n	80005da <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 800060a:	2000      	movs	r0, #0
 800060c:	e7c0      	b.n	8000590 <HAL_DMA_Abort_IT+0x10>
 800060e:	bf00      	nop
 8000610:	40020008 	.word	0x40020008
 8000614:	40020000 	.word	0x40020000

08000618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000618:	b4f0      	push	{r4, r5, r6, r7}
 800061a:	b082      	sub	sp, #8
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800061c:	2600      	movs	r6, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800061e:	4635      	mov	r5, r6
 8000620:	e0a1      	b.n	8000766 <HAL_GPIO_Init+0x14e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000622:	2c00      	cmp	r4, #0
 8000624:	d059      	beq.n	80006da <HAL_GPIO_Init+0xc2>
 8000626:	2c01      	cmp	r4, #1
 8000628:	d100      	bne.n	800062c <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800062a:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	d868      	bhi.n	8000702 <HAL_GPIO_Init+0xea>
 8000630:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000632:	2bff      	cmp	r3, #255	; 0xff
 8000634:	d868      	bhi.n	8000708 <HAL_GPIO_Init+0xf0>
 8000636:	00ac      	lsls	r4, r5, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000638:	f8dc 2000 	ldr.w	r2, [ip]
 800063c:	270f      	movs	r7, #15
 800063e:	40a7      	lsls	r7, r4
 8000640:	ea22 0207 	bic.w	r2, r2, r7
 8000644:	fa06 f404 	lsl.w	r4, r6, r4
 8000648:	4322      	orrs	r2, r4
 800064a:	f8cc 2000 	str.w	r2, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800064e:	684a      	ldr	r2, [r1, #4]
 8000650:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000654:	f000 8086 	beq.w	8000764 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000658:	4a5e      	ldr	r2, [pc, #376]	; (80007d4 <HAL_GPIO_Init+0x1bc>)
 800065a:	6994      	ldr	r4, [r2, #24]
 800065c:	f044 0401 	orr.w	r4, r4, #1
 8000660:	6194      	str	r4, [r2, #24]
 8000662:	6992      	ldr	r2, [r2, #24]
 8000664:	f002 0201 	and.w	r2, r2, #1
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	9a01      	ldr	r2, [sp, #4]
        temp = AFIO->EXTICR[position >> 2U];
 800066c:	08ac      	lsrs	r4, r5, #2
 800066e:	1ca7      	adds	r7, r4, #2
 8000670:	4a59      	ldr	r2, [pc, #356]	; (80007d8 <HAL_GPIO_Init+0x1c0>)
 8000672:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000676:	f005 0703 	and.w	r7, r5, #3
 800067a:	00bf      	lsls	r7, r7, #2
 800067c:	f04f 0c0f 	mov.w	ip, #15
 8000680:	fa0c fc07 	lsl.w	ip, ip, r7
 8000684:	ea22 0c0c 	bic.w	ip, r2, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000688:	4a54      	ldr	r2, [pc, #336]	; (80007dc <HAL_GPIO_Init+0x1c4>)
 800068a:	4290      	cmp	r0, r2
 800068c:	d042      	beq.n	8000714 <HAL_GPIO_Init+0xfc>
 800068e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000692:	4290      	cmp	r0, r2
 8000694:	d07f      	beq.n	8000796 <HAL_GPIO_Init+0x17e>
 8000696:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800069a:	4290      	cmp	r0, r2
 800069c:	d07d      	beq.n	800079a <HAL_GPIO_Init+0x182>
 800069e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80006a2:	4290      	cmp	r0, r2
 80006a4:	d034      	beq.n	8000710 <HAL_GPIO_Init+0xf8>
 80006a6:	2204      	movs	r2, #4
 80006a8:	e035      	b.n	8000716 <HAL_GPIO_Init+0xfe>
      switch (GPIO_Init->Mode)
 80006aa:	4f4d      	ldr	r7, [pc, #308]	; (80007e0 <HAL_GPIO_Init+0x1c8>)
 80006ac:	42bc      	cmp	r4, r7
 80006ae:	d014      	beq.n	80006da <HAL_GPIO_Init+0xc2>
 80006b0:	d90b      	bls.n	80006ca <HAL_GPIO_Init+0xb2>
 80006b2:	4f4c      	ldr	r7, [pc, #304]	; (80007e4 <HAL_GPIO_Init+0x1cc>)
 80006b4:	42bc      	cmp	r4, r7
 80006b6:	d010      	beq.n	80006da <HAL_GPIO_Init+0xc2>
 80006b8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80006bc:	42bc      	cmp	r4, r7
 80006be:	d00c      	beq.n	80006da <HAL_GPIO_Init+0xc2>
 80006c0:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80006c4:	42bc      	cmp	r4, r7
 80006c6:	d1b1      	bne.n	800062c <HAL_GPIO_Init+0x14>
 80006c8:	e007      	b.n	80006da <HAL_GPIO_Init+0xc2>
 80006ca:	f5a7 1780 	sub.w	r7, r7, #1048576	; 0x100000
 80006ce:	42bc      	cmp	r4, r7
 80006d0:	d003      	beq.n	80006da <HAL_GPIO_Init+0xc2>
 80006d2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80006d6:	42bc      	cmp	r4, r7
 80006d8:	d1a8      	bne.n	800062c <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80006da:	688c      	ldr	r4, [r1, #8]
 80006dc:	b17c      	cbz	r4, 80006fe <HAL_GPIO_Init+0xe6>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80006de:	2c01      	cmp	r4, #1
 80006e0:	d008      	beq.n	80006f4 <HAL_GPIO_Init+0xdc>
            GPIOx->BRR = ioposition;
 80006e2:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006e4:	2608      	movs	r6, #8
 80006e6:	e7a1      	b.n	800062c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80006e8:	68ce      	ldr	r6, [r1, #12]
 80006ea:	3608      	adds	r6, #8
          break;
 80006ec:	e79e      	b.n	800062c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80006ee:	68ce      	ldr	r6, [r1, #12]
 80006f0:	360c      	adds	r6, #12
          break;
 80006f2:	e79b      	b.n	800062c <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 80006f4:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80006f6:	2608      	movs	r6, #8
 80006f8:	e798      	b.n	800062c <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80006fa:	2600      	movs	r6, #0
 80006fc:	e796      	b.n	800062c <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80006fe:	2604      	movs	r6, #4
 8000700:	e794      	b.n	800062c <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000702:	f100 0c04 	add.w	ip, r0, #4
 8000706:	e794      	b.n	8000632 <HAL_GPIO_Init+0x1a>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000708:	f1a5 0408 	sub.w	r4, r5, #8
 800070c:	00a4      	lsls	r4, r4, #2
 800070e:	e793      	b.n	8000638 <HAL_GPIO_Init+0x20>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000710:	2203      	movs	r2, #3
 8000712:	e000      	b.n	8000716 <HAL_GPIO_Init+0xfe>
 8000714:	2200      	movs	r2, #0
 8000716:	40ba      	lsls	r2, r7
 8000718:	ea42 020c 	orr.w	r2, r2, ip
        AFIO->EXTICR[position >> 2U] = temp;
 800071c:	3402      	adds	r4, #2
 800071e:	4f2e      	ldr	r7, [pc, #184]	; (80007d8 <HAL_GPIO_Init+0x1c0>)
 8000720:	f847 2024 	str.w	r2, [r7, r4, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000724:	684a      	ldr	r2, [r1, #4]
 8000726:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800072a:	d038      	beq.n	800079e <HAL_GPIO_Init+0x186>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800072c:	4c2e      	ldr	r4, [pc, #184]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 800072e:	6822      	ldr	r2, [r4, #0]
 8000730:	431a      	orrs	r2, r3
 8000732:	6022      	str	r2, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000734:	684a      	ldr	r2, [r1, #4]
 8000736:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800073a:	d036      	beq.n	80007aa <HAL_GPIO_Init+0x192>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800073c:	4c2a      	ldr	r4, [pc, #168]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 800073e:	6862      	ldr	r2, [r4, #4]
 8000740:	431a      	orrs	r2, r3
 8000742:	6062      	str	r2, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000744:	684a      	ldr	r2, [r1, #4]
 8000746:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 800074a:	d034      	beq.n	80007b6 <HAL_GPIO_Init+0x19e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800074c:	4c26      	ldr	r4, [pc, #152]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 800074e:	68a2      	ldr	r2, [r4, #8]
 8000750:	431a      	orrs	r2, r3
 8000752:	60a2      	str	r2, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000754:	684a      	ldr	r2, [r1, #4]
 8000756:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 800075a:	d032      	beq.n	80007c2 <HAL_GPIO_Init+0x1aa>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800075c:	4c22      	ldr	r4, [pc, #136]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 800075e:	68e2      	ldr	r2, [r4, #12]
 8000760:	4313      	orrs	r3, r2
 8000762:	60e3      	str	r3, [r4, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000764:	3501      	adds	r5, #1
 8000766:	2d0f      	cmp	r5, #15
 8000768:	d831      	bhi.n	80007ce <HAL_GPIO_Init+0x1b6>
    ioposition = (0x01U << position);
 800076a:	2201      	movs	r2, #1
 800076c:	40aa      	lsls	r2, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800076e:	680b      	ldr	r3, [r1, #0]
 8000770:	4013      	ands	r3, r2
    if (iocurrent == ioposition)
 8000772:	429a      	cmp	r2, r3
 8000774:	d1f6      	bne.n	8000764 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8000776:	684c      	ldr	r4, [r1, #4]
 8000778:	2c12      	cmp	r4, #18
 800077a:	d0b8      	beq.n	80006ee <HAL_GPIO_Init+0xd6>
 800077c:	d895      	bhi.n	80006aa <HAL_GPIO_Init+0x92>
 800077e:	2c02      	cmp	r4, #2
 8000780:	d0b2      	beq.n	80006e8 <HAL_GPIO_Init+0xd0>
 8000782:	f67f af4e 	bls.w	8000622 <HAL_GPIO_Init+0xa>
 8000786:	2c03      	cmp	r4, #3
 8000788:	d0b7      	beq.n	80006fa <HAL_GPIO_Init+0xe2>
 800078a:	2c11      	cmp	r4, #17
 800078c:	f47f af4e 	bne.w	800062c <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000790:	68ce      	ldr	r6, [r1, #12]
 8000792:	3604      	adds	r6, #4
          break;
 8000794:	e74a      	b.n	800062c <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000796:	2201      	movs	r2, #1
 8000798:	e7bd      	b.n	8000716 <HAL_GPIO_Init+0xfe>
 800079a:	2202      	movs	r2, #2
 800079c:	e7bb      	b.n	8000716 <HAL_GPIO_Init+0xfe>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800079e:	4c12      	ldr	r4, [pc, #72]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	ea22 0203 	bic.w	r2, r2, r3
 80007a6:	6022      	str	r2, [r4, #0]
 80007a8:	e7c4      	b.n	8000734 <HAL_GPIO_Init+0x11c>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80007aa:	4c0f      	ldr	r4, [pc, #60]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 80007ac:	6862      	ldr	r2, [r4, #4]
 80007ae:	ea22 0203 	bic.w	r2, r2, r3
 80007b2:	6062      	str	r2, [r4, #4]
 80007b4:	e7c6      	b.n	8000744 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80007b6:	4c0c      	ldr	r4, [pc, #48]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 80007b8:	68a2      	ldr	r2, [r4, #8]
 80007ba:	ea22 0203 	bic.w	r2, r2, r3
 80007be:	60a2      	str	r2, [r4, #8]
 80007c0:	e7c8      	b.n	8000754 <HAL_GPIO_Init+0x13c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80007c2:	4c09      	ldr	r4, [pc, #36]	; (80007e8 <HAL_GPIO_Init+0x1d0>)
 80007c4:	68e2      	ldr	r2, [r4, #12]
 80007c6:	ea22 0303 	bic.w	r3, r2, r3
 80007ca:	60e3      	str	r3, [r4, #12]
 80007cc:	e7ca      	b.n	8000764 <HAL_GPIO_Init+0x14c>
        }
      }
    }
  }
}
 80007ce:	b002      	add	sp, #8
 80007d0:	bcf0      	pop	{r4, r5, r6, r7}
 80007d2:	4770      	bx	lr
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40010000 	.word	0x40010000
 80007dc:	40010800 	.word	0x40010800
 80007e0:	10210000 	.word	0x10210000
 80007e4:	10310000 	.word	0x10310000
 80007e8:	40010400 	.word	0x40010400

080007ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007ec:	6883      	ldr	r3, [r0, #8]
 80007ee:	4219      	tst	r1, r3
 80007f0:	d101      	bne.n	80007f6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80007f2:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80007f4:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 80007f6:	2001      	movs	r0, #1
 80007f8:	4770      	bx	lr

080007fa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007fa:	b912      	cbnz	r2, 8000802 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007fc:	0409      	lsls	r1, r1, #16
 80007fe:	6101      	str	r1, [r0, #16]
  }
}
 8000800:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8000802:	6101      	str	r1, [r0, #16]
 8000804:	4770      	bx	lr

08000806 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000806:	68c3      	ldr	r3, [r0, #12]
 8000808:	4059      	eors	r1, r3
 800080a:	60c1      	str	r1, [r0, #12]
}
 800080c:	4770      	bx	lr
	...

08000810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000810:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4203      	tst	r3, r0
 8000818:	d100      	bne.n	800081c <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800081a:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800081e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000820:	f005 f9d6 	bl	8005bd0 <HAL_GPIO_EXTI_Callback>
}
 8000824:	e7f9      	b.n	800081a <HAL_GPIO_EXTI_IRQHandler+0xa>
 8000826:	bf00      	nop
 8000828:	40010400 	.word	0x40010400

0800082c <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800082c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000830:	b2db      	uxtb	r3, r3
 8000832:	2b40      	cmp	r3, #64	; 0x40
 8000834:	d013      	beq.n	800085e <I2C_Master_SB+0x32>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000836:	6903      	ldr	r3, [r0, #16]
 8000838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800083c:	d01e      	beq.n	800087c <I2C_Master_SB+0x50>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
      }
    }
    else
    {
      if(hi2c->EventCount == 0U)
 800083e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000840:	2b00      	cmp	r3, #0
 8000842:	d02d      	beq.n	80008a0 <I2C_Master_SB+0x74>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
      }
      else if(hi2c->EventCount == 1U)
 8000844:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000846:	2b01      	cmp	r3, #1
 8000848:	d133      	bne.n	80008b2 <I2C_Master_SB+0x86>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800084a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800084c:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8000850:	6802      	ldr	r2, [r0, #0]
 8000852:	f003 0306 	and.w	r3, r3, #6
 8000856:	f043 03f1 	orr.w	r3, r3, #241	; 0xf1
 800085a:	6113      	str	r3, [r2, #16]
 800085c:	e029      	b.n	80008b2 <I2C_Master_SB+0x86>
    if(hi2c->EventCount == 0U)
 800085e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000860:	b92b      	cbnz	r3, 800086e <I2C_Master_SB+0x42>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000862:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000864:	6802      	ldr	r2, [r0, #0]
 8000866:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800086a:	6113      	str	r3, [r2, #16]
 800086c:	e021      	b.n	80008b2 <I2C_Master_SB+0x86>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800086e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000870:	6802      	ldr	r2, [r0, #0]
 8000872:	f043 0301 	orr.w	r3, r3, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	6113      	str	r3, [r2, #16]
 800087a:	e01a      	b.n	80008b2 <I2C_Master_SB+0x86>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 800087c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b21      	cmp	r3, #33	; 0x21
 8000884:	d006      	beq.n	8000894 <I2C_Master_SB+0x68>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000886:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000888:	6802      	ldr	r2, [r0, #0]
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	6113      	str	r3, [r2, #16]
 8000892:	e00e      	b.n	80008b2 <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000894:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000896:	6802      	ldr	r2, [r0, #0]
 8000898:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800089c:	6113      	str	r3, [r2, #16]
 800089e:	e008      	b.n	80008b2 <I2C_Master_SB+0x86>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80008a0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008a2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80008a6:	6802      	ldr	r2, [r0, #0]
 80008a8:	f003 0306 	and.w	r3, r3, #6
 80008ac:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80008b0:	6113      	str	r3, [r2, #16]
      }
    }
  }

  return HAL_OK;
}
 80008b2:	2000      	movs	r0, #0
 80008b4:	4770      	bx	lr

080008b6 <I2C_Master_ADD10>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80008b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80008b8:	6802      	ldr	r2, [r0, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
}
 80008be:	2000      	movs	r0, #0
 80008c0:	4770      	bx	lr

080008c2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80008c2:	b410      	push	{r4}
 80008c4:	b08d      	sub	sp, #52	; 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentMode        = hi2c->Mode;
 80008c6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80008ca:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80008cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 80008ce:	6b04      	ldr	r4, [r0, #48]	; 0x30

  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80008d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b22      	cmp	r3, #34	; 0x22
 80008d8:	d00b      	beq.n	80008f2 <I2C_Master_ADDR+0x30>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80008da:	2300      	movs	r3, #0
 80008dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80008de:	6803      	ldr	r3, [r0, #0]
 80008e0:	695a      	ldr	r2, [r3, #20]
 80008e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80008e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  }

  return HAL_OK;
}
 80008ea:	2000      	movs	r0, #0
 80008ec:	b00d      	add	sp, #52	; 0x34
 80008ee:	bc10      	pop	{r4}
 80008f0:	4770      	bx	lr
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80008f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80008f4:	b90b      	cbnz	r3, 80008fa <I2C_Master_ADDR+0x38>
 80008f6:	2a40      	cmp	r2, #64	; 0x40
 80008f8:	d017      	beq.n	800092a <I2C_Master_ADDR+0x68>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80008fa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80008fc:	b91b      	cbnz	r3, 8000906 <I2C_Master_ADDR+0x44>
 80008fe:	6903      	ldr	r3, [r0, #16]
 8000900:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000904:	d019      	beq.n	800093a <I2C_Master_ADDR+0x78>
      if(hi2c->XferCount == 0U)
 8000906:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000908:	b29b      	uxth	r3, r3
 800090a:	2b00      	cmp	r3, #0
 800090c:	d125      	bne.n	800095a <I2C_Master_ADDR+0x98>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800090e:	9303      	str	r3, [sp, #12]
 8000910:	6803      	ldr	r3, [r0, #0]
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	9203      	str	r2, [sp, #12]
 8000916:	699a      	ldr	r2, [r3, #24]
 8000918:	9203      	str	r2, [sp, #12]
 800091a:	9a03      	ldr	r2, [sp, #12]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000922:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8000924:	2300      	movs	r3, #0
 8000926:	6503      	str	r3, [r0, #80]	; 0x50
 8000928:	e7df      	b.n	80008ea <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800092a:	9301      	str	r3, [sp, #4]
 800092c:	6803      	ldr	r3, [r0, #0]
 800092e:	695a      	ldr	r2, [r3, #20]
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	9b01      	ldr	r3, [sp, #4]
 8000938:	e7d7      	b.n	80008ea <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800093a:	2300      	movs	r3, #0
 800093c:	9302      	str	r3, [sp, #8]
 800093e:	6803      	ldr	r3, [r0, #0]
 8000940:	695a      	ldr	r2, [r3, #20]
 8000942:	9202      	str	r2, [sp, #8]
 8000944:	699a      	ldr	r2, [r3, #24]
 8000946:	9202      	str	r2, [sp, #8]
 8000948:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000950:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8000952:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000954:	3301      	adds	r3, #1
 8000956:	6503      	str	r3, [r0, #80]	; 0x50
 8000958:	e7c7      	b.n	80008ea <I2C_Master_ADDR+0x28>
      else if(hi2c->XferCount == 1U)   
 800095a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800095c:	b29b      	uxth	r3, r3
 800095e:	2b01      	cmp	r3, #1
 8000960:	d01a      	beq.n	8000998 <I2C_Master_ADDR+0xd6>
      else if(hi2c->XferCount == 2U)
 8000962:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000964:	b29b      	uxth	r3, r3
 8000966:	2b02      	cmp	r3, #2
 8000968:	d06b      	beq.n	8000a42 <I2C_Master_ADDR+0x180>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800096a:	6802      	ldr	r2, [r0, #0]
 800096c:	6813      	ldr	r3, [r2, #0]
 800096e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000972:	6013      	str	r3, [r2, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000974:	6803      	ldr	r3, [r0, #0]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800097c:	d003      	beq.n	8000986 <I2C_Master_ADDR+0xc4>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800097e:	685a      	ldr	r2, [r3, #4]
 8000980:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000984:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000986:	2300      	movs	r3, #0
 8000988:	930a      	str	r3, [sp, #40]	; 0x28
 800098a:	6803      	ldr	r3, [r0, #0]
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	920a      	str	r2, [sp, #40]	; 0x28
 8000990:	699b      	ldr	r3, [r3, #24]
 8000992:	930a      	str	r3, [sp, #40]	; 0x28
 8000994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000996:	e7c5      	b.n	8000924 <I2C_Master_ADDR+0x62>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8000998:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 800099c:	d016      	beq.n	80009cc <I2C_Master_ADDR+0x10a>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800099e:	2904      	cmp	r1, #4
 80009a0:	d03d      	beq.n	8000a1e <I2C_Master_ADDR+0x15c>
 80009a2:	2908      	cmp	r1, #8
 80009a4:	d03b      	beq.n	8000a1e <I2C_Master_ADDR+0x15c>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 80009a6:	2c12      	cmp	r4, #18
 80009a8:	d039      	beq.n	8000a1e <I2C_Master_ADDR+0x15c>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80009aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d030      	beq.n	8000a12 <I2C_Master_ADDR+0x150>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80009b0:	6802      	ldr	r2, [r0, #0]
 80009b2:	6813      	ldr	r3, [r2, #0]
 80009b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009b8:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009ba:	2300      	movs	r3, #0
 80009bc:	9306      	str	r3, [sp, #24]
 80009be:	6803      	ldr	r3, [r0, #0]
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	9206      	str	r2, [sp, #24]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	9306      	str	r3, [sp, #24]
 80009c8:	9b06      	ldr	r3, [sp, #24]
 80009ca:	e7ab      	b.n	8000924 <I2C_Master_ADDR+0x62>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80009cc:	6802      	ldr	r2, [r0, #0]
 80009ce:	6813      	ldr	r3, [r2, #0]
 80009d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009d4:	6013      	str	r3, [r2, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80009d6:	6803      	ldr	r3, [r0, #0]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80009de:	d00c      	beq.n	80009fa <I2C_Master_ADDR+0x138>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009e6:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009e8:	2300      	movs	r3, #0
 80009ea:	9304      	str	r3, [sp, #16]
 80009ec:	6803      	ldr	r3, [r0, #0]
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	9204      	str	r2, [sp, #16]
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	9304      	str	r3, [sp, #16]
 80009f6:	9b04      	ldr	r3, [sp, #16]
 80009f8:	e794      	b.n	8000924 <I2C_Master_ADDR+0x62>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009fa:	2200      	movs	r2, #0
 80009fc:	9205      	str	r2, [sp, #20]
 80009fe:	695a      	ldr	r2, [r3, #20]
 8000a00:	9205      	str	r2, [sp, #20]
 8000a02:	699a      	ldr	r2, [r3, #24]
 8000a04:	9205      	str	r2, [sp, #20]
 8000a06:	9a05      	ldr	r2, [sp, #20]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	e788      	b.n	8000924 <I2C_Master_ADDR+0x62>
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a12:	6802      	ldr	r2, [r0, #0]
 8000a14:	6813      	ldr	r3, [r2, #0]
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e7cd      	b.n	80009ba <I2C_Master_ADDR+0xf8>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000a1e:	6802      	ldr	r2, [r0, #0]
 8000a20:	6813      	ldr	r3, [r2, #0]
 8000a22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a26:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	9307      	str	r3, [sp, #28]
 8000a2c:	6803      	ldr	r3, [r0, #0]
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	9207      	str	r2, [sp, #28]
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	9207      	str	r2, [sp, #28]
 8000a36:	9a07      	ldr	r2, [sp, #28]
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e770      	b.n	8000924 <I2C_Master_ADDR+0x62>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000a42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d01b      	beq.n	8000a80 <I2C_Master_ADDR+0x1be>
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000a48:	6802      	ldr	r2, [r0, #0]
 8000a4a:	6813      	ldr	r3, [r2, #0]
 8000a4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a50:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a52:	2300      	movs	r3, #0
 8000a54:	9308      	str	r3, [sp, #32]
 8000a56:	6803      	ldr	r3, [r0, #0]
 8000a58:	695a      	ldr	r2, [r3, #20]
 8000a5a:	9208      	str	r2, [sp, #32]
 8000a5c:	699a      	ldr	r2, [r3, #24]
 8000a5e:	9208      	str	r2, [sp, #32]
 8000a60:	9a08      	ldr	r2, [sp, #32]
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a68:	601a      	str	r2, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000a6a:	6803      	ldr	r3, [r0, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8000a72:	f43f af57 	beq.w	8000924 <I2C_Master_ADDR+0x62>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8000a76:	685a      	ldr	r2, [r3, #4]
 8000a78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	e751      	b.n	8000924 <I2C_Master_ADDR+0x62>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a80:	6802      	ldr	r2, [r0, #0]
 8000a82:	6813      	ldr	r3, [r2, #0]
 8000a84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a88:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a8e:	6803      	ldr	r3, [r0, #0]
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	9209      	str	r2, [sp, #36]	; 0x24
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	9309      	str	r3, [sp, #36]	; 0x24
 8000a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000a9a:	e7e6      	b.n	8000a6a <I2C_Master_ADDR+0x1a8>

08000a9c <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8000a9c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b14b      	cbz	r3, 8000ab6 <I2C_SlaveTransmit_BTF+0x1a>
  {
    /* Write data to DR */
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000aa2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	6242      	str	r2, [r0, #36]	; 0x24
 8000aa8:	6802      	ldr	r2, [r0, #0]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	6113      	str	r3, [r2, #16]
    hi2c->XferCount--;
 8000aae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000ab0:	3b01      	subs	r3, #1
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	4770      	bx	lr

08000aba <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if(hi2c->XferCount != 0U)
 8000aba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	b14b      	cbz	r3, 8000ad4 <I2C_SlaveReceive_BTF+0x1a>
  {
    /* Read data from DR */
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ac0:	6803      	ldr	r3, [r0, #0]
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ac6:	1c59      	adds	r1, r3, #1
 8000ac8:	6241      	str	r1, [r0, #36]	; 0x24
 8000aca:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8000acc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	8543      	strh	r3, [r0, #42]	; 0x2a
  }
  return HAL_OK;
}
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	4770      	bx	lr

08000ad8 <HAL_I2C_Init>:
  if(hi2c == NULL)
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	f000 80a2 	beq.w	8000c22 <HAL_I2C_Init+0x14a>
{
 8000ade:	b538      	push	{r3, r4, r5, lr}
 8000ae0:	4604      	mov	r4, r0
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000ae2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d04f      	beq.n	8000b8a <HAL_I2C_Init+0xb2>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000aea:	2324      	movs	r3, #36	; 0x24
 8000aec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000af0:	6822      	ldr	r2, [r4, #0]
 8000af2:	6813      	ldr	r3, [r2, #0]
 8000af4:	f023 0301 	bic.w	r3, r3, #1
 8000af8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000afa:	f001 fc5f 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000afe:	6862      	ldr	r2, [r4, #4]
 8000b00:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <HAL_I2C_Init+0x154>)
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d846      	bhi.n	8000b94 <HAL_I2C_Init+0xbc>
 8000b06:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <HAL_I2C_Init+0x158>)
 8000b08:	4298      	cmp	r0, r3
 8000b0a:	bf8c      	ite	hi
 8000b0c:	2300      	movhi	r3, #0
 8000b0e:	2301      	movls	r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	f040 8088 	bne.w	8000c26 <HAL_I2C_Init+0x14e>
  freqrange = I2C_FREQRANGE(pclk1);
 8000b16:	4b47      	ldr	r3, [pc, #284]	; (8000c34 <HAL_I2C_Init+0x15c>)
 8000b18:	fba3 2300 	umull	r2, r3, r3, r0
 8000b1c:	0c9b      	lsrs	r3, r3, #18
  hi2c->Instance->CR2 = freqrange;
 8000b1e:	6822      	ldr	r2, [r4, #0]
 8000b20:	6053      	str	r3, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000b22:	6861      	ldr	r1, [r4, #4]
 8000b24:	4a41      	ldr	r2, [pc, #260]	; (8000c2c <HAL_I2C_Init+0x154>)
 8000b26:	4291      	cmp	r1, r2
 8000b28:	d83a      	bhi.n	8000ba0 <HAL_I2C_Init+0xc8>
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	6822      	ldr	r2, [r4, #0]
 8000b2e:	6213      	str	r3, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000b30:	6861      	ldr	r1, [r4, #4]
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <HAL_I2C_Init+0x154>)
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d83d      	bhi.n	8000bb4 <HAL_I2C_Init+0xdc>
 8000b38:	1e43      	subs	r3, r0, #1
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b40:	3301      	adds	r3, #1
 8000b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf38      	it	cc
 8000b4a:	2304      	movcc	r3, #4
 8000b4c:	6822      	ldr	r2, [r4, #0]
 8000b4e:	61d3      	str	r3, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000b50:	69e3      	ldr	r3, [r4, #28]
 8000b52:	6a21      	ldr	r1, [r4, #32]
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000b5a:	6923      	ldr	r3, [r4, #16]
 8000b5c:	68e1      	ldr	r1, [r4, #12]
 8000b5e:	6822      	ldr	r2, [r4, #0]
 8000b60:	430b      	orrs	r3, r1
 8000b62:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000b64:	6963      	ldr	r3, [r4, #20]
 8000b66:	69a1      	ldr	r1, [r4, #24]
 8000b68:	6822      	ldr	r2, [r4, #0]
 8000b6a:	430b      	orrs	r3, r1
 8000b6c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000b6e:	6822      	ldr	r2, [r4, #0]
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000b78:	2000      	movs	r0, #0
 8000b7a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000b82:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b84:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8000b88:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000b8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000b8e:	f003 ffb9 	bl	8004b04 <HAL_I2C_MspInit>
 8000b92:	e7aa      	b.n	8000aea <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b94:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_I2C_Init+0x160>)
 8000b96:	4298      	cmp	r0, r3
 8000b98:	bf8c      	ite	hi
 8000b9a:	2300      	movhi	r3, #0
 8000b9c:	2301      	movls	r3, #1
 8000b9e:	e7b7      	b.n	8000b10 <HAL_I2C_Init+0x38>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000ba0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ba4:	fb02 f303 	mul.w	r3, r2, r3
 8000ba8:	4a24      	ldr	r2, [pc, #144]	; (8000c3c <HAL_I2C_Init+0x164>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	099b      	lsrs	r3, r3, #6
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	e7bb      	b.n	8000b2c <HAL_I2C_Init+0x54>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000bb4:	68a3      	ldr	r3, [r4, #8]
 8000bb6:	b9bb      	cbnz	r3, 8000be8 <HAL_I2C_Init+0x110>
 8000bb8:	1e42      	subs	r2, r0, #1
 8000bba:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8000bbe:	fbb2 f2f5 	udiv	r2, r2, r5
 8000bc2:	3201      	adds	r2, #1
 8000bc4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	0952      	lsrs	r2, r2, #5
 8000bce:	bb32      	cbnz	r2, 8000c1e <HAL_I2C_Init+0x146>
 8000bd0:	b9c3      	cbnz	r3, 8000c04 <HAL_I2C_Init+0x12c>
 8000bd2:	3801      	subs	r0, #1
 8000bd4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8000bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bdc:	3301      	adds	r3, #1
 8000bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000be6:	e7b1      	b.n	8000b4c <HAL_I2C_Init+0x74>
 8000be8:	1e42      	subs	r2, r0, #1
 8000bea:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8000bee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8000bf2:	fbb2 f2f5 	udiv	r2, r2, r5
 8000bf6:	3201      	adds	r2, #1
 8000bf8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	0952      	lsrs	r2, r2, #5
 8000c02:	e7e4      	b.n	8000bce <HAL_I2C_Init+0xf6>
 8000c04:	3801      	subs	r0, #1
 8000c06:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8000c0a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c12:	3301      	adds	r3, #1
 8000c14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c1c:	e796      	b.n	8000b4c <HAL_I2C_Init+0x74>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e794      	b.n	8000b4c <HAL_I2C_Init+0x74>
    return HAL_ERROR;
 8000c22:	2001      	movs	r0, #1
}
 8000c24:	4770      	bx	lr
    return HAL_ERROR;
 8000c26:	2001      	movs	r0, #1
 8000c28:	e7ae      	b.n	8000b88 <HAL_I2C_Init+0xb0>
 8000c2a:	bf00      	nop
 8000c2c:	000186a0 	.word	0x000186a0
 8000c30:	001e847f 	.word	0x001e847f
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	003d08ff 	.word	0x003d08ff
 8000c3c:	10624dd3 	.word	0x10624dd3

08000c40 <HAL_I2C_MasterTxCpltCallback>:
}
 8000c40:	4770      	bx	lr

08000c42 <HAL_I2C_MasterRxCpltCallback>:
}
 8000c42:	4770      	bx	lr

08000c44 <HAL_I2C_SlaveTxCpltCallback>:
}
 8000c44:	4770      	bx	lr

08000c46 <I2C_SlaveTransmit_TXE>:
{
 8000c46:	b508      	push	{r3, lr}
  uint32_t CurrentState = hi2c->State;
 8000c48:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c4c:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8000c4e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b173      	cbz	r3, 8000c72 <I2C_SlaveTransmit_TXE+0x2c>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000c54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c56:	1c59      	adds	r1, r3, #1
 8000c58:	6241      	str	r1, [r0, #36]	; 0x24
 8000c5a:	6801      	ldr	r1, [r0, #0]
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	610b      	str	r3, [r1, #16]
    hi2c->XferCount--;
 8000c60:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000c62:	3b01      	subs	r3, #1
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000c68:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	b90b      	cbnz	r3, 8000c72 <I2C_SlaveTransmit_TXE+0x2c>
 8000c6e:	2a29      	cmp	r2, #41	; 0x29
 8000c70:	d001      	beq.n	8000c76 <I2C_SlaveTransmit_TXE+0x30>
}
 8000c72:	2000      	movs	r0, #0
 8000c74:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000c76:	6802      	ldr	r2, [r0, #0]
 8000c78:	6853      	ldr	r3, [r2, #4]
 8000c7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c7e:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000c80:	2321      	movs	r3, #33	; 0x21
 8000c82:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8000c84:	2328      	movs	r3, #40	; 0x28
 8000c86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000c8a:	f7ff ffdb 	bl	8000c44 <HAL_I2C_SlaveTxCpltCallback>
 8000c8e:	e7f0      	b.n	8000c72 <I2C_SlaveTransmit_TXE+0x2c>

08000c90 <HAL_I2C_SlaveRxCpltCallback>:
}
 8000c90:	4770      	bx	lr

08000c92 <I2C_SlaveReceive_RXNE>:
  uint32_t CurrentState = hi2c->State;
 8000c92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c96:	b2da      	uxtb	r2, r3
  if(hi2c->XferCount != 0U)
 8000c98:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	b1f3      	cbz	r3, 8000cdc <I2C_SlaveReceive_RXNE+0x4a>
{
 8000c9e:	b510      	push	{r4, lr}
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ca0:	6803      	ldr	r3, [r0, #0]
 8000ca2:	6919      	ldr	r1, [r3, #16]
 8000ca4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ca6:	1c5c      	adds	r4, r3, #1
 8000ca8:	6244      	str	r4, [r0, #36]	; 0x24
 8000caa:	7019      	strb	r1, [r3, #0]
    hi2c->XferCount--;
 8000cac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000cb4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	b90b      	cbnz	r3, 8000cbe <I2C_SlaveReceive_RXNE+0x2c>
 8000cba:	2a2a      	cmp	r2, #42	; 0x2a
 8000cbc:	d001      	beq.n	8000cc2 <I2C_SlaveReceive_RXNE+0x30>
}
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	bd10      	pop	{r4, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000cc2:	6802      	ldr	r2, [r0, #0]
 8000cc4:	6853      	ldr	r3, [r2, #4]
 8000cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cca:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8000ccc:	2322      	movs	r3, #34	; 0x22
 8000cce:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8000cd0:	2328      	movs	r3, #40	; 0x28
 8000cd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8000cd6:	f7ff ffdb 	bl	8000c90 <HAL_I2C_SlaveRxCpltCallback>
 8000cda:	e7f0      	b.n	8000cbe <I2C_SlaveReceive_RXNE+0x2c>
}
 8000cdc:	2000      	movs	r0, #0
 8000cde:	4770      	bx	lr

08000ce0 <HAL_I2C_AddrCallback>:
}
 8000ce0:	4770      	bx	lr

08000ce2 <I2C_Slave_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c)
{
 8000ce2:	b508      	push	{r3, lr}
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
  uint16_t SlaveAddrCode = 0U;

  /* Transfer Direction requested by Master */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8000ce4:	6803      	ldr	r3, [r0, #0]
 8000ce6:	699a      	ldr	r2, [r3, #24]
 8000ce8:	f012 0f04 	tst.w	r2, #4
 8000cec:	d009      	beq.n	8000d02 <I2C_Slave_ADDR+0x20>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8000cee:	2100      	movs	r1, #0
  {
    TransferDirection = I2C_DIRECTION_TRANSMIT;
  }
  
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000cf6:	d006      	beq.n	8000d06 <I2C_Slave_ADDR+0x24>
  {
    SlaveAddrCode = hi2c->Init.OwnAddress1;
  }
  else
  {
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8000cf8:	8b02      	ldrh	r2, [r0, #24]
  }

  /* Call Slave Addr callback */
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8000cfa:	f7ff fff1 	bl	8000ce0 <HAL_I2C_AddrCallback>

  return HAL_OK;
}
 8000cfe:	2000      	movs	r0, #0
 8000d00:	bd08      	pop	{r3, pc}
    TransferDirection = I2C_DIRECTION_TRANSMIT;
 8000d02:	2101      	movs	r1, #1
 8000d04:	e7f4      	b.n	8000cf0 <I2C_Slave_ADDR+0xe>
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8000d06:	8982      	ldrh	r2, [r0, #12]
 8000d08:	e7f7      	b.n	8000cfa <I2C_Slave_ADDR+0x18>

08000d0a <HAL_I2C_ListenCpltCallback>:
}
 8000d0a:	4770      	bx	lr

08000d0c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8000d0c:	b508      	push	{r3, lr}
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentState       = hi2c->State;
 8000d0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000d12:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000d14:	6ac2      	ldr	r2, [r0, #44]	; 0x2c

  if(((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8000d16:	2a04      	cmp	r2, #4
 8000d18:	d001      	beq.n	8000d1e <I2C_Slave_AF+0x12>
 8000d1a:	2a08      	cmp	r2, #8
 8000d1c:	d101      	bne.n	8000d22 <I2C_Slave_AF+0x16>
 8000d1e:	2b28      	cmp	r3, #40	; 0x28
 8000d20:	d007      	beq.n	8000d32 <I2C_Slave_AF+0x26>
    hi2c->Mode = HAL_I2C_MODE_NONE;
      
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
  else if(CurrentState == HAL_I2C_STATE_BUSY_TX)
 8000d22:	2b21      	cmp	r3, #33	; 0x21
 8000d24:	d01f      	beq.n	8000d66 <I2C_Slave_AF+0x5a>
  }
  else
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d26:	6803      	ldr	r3, [r0, #0]
 8000d28:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d2c:	615a      	str	r2, [r3, #20]
  }
  
  return HAL_OK;
}
 8000d2e:	2000      	movs	r0, #0
 8000d30:	bd08      	pop	{r3, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <I2C_Slave_AF+0x90>)
 8000d34:	62c3      	str	r3, [r0, #44]	; 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000d36:	6802      	ldr	r2, [r0, #0]
 8000d38:	6853      	ldr	r3, [r2, #4]
 8000d3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d3e:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d40:	6803      	ldr	r3, [r0, #0]
 8000d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d46:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000d48:	6802      	ldr	r2, [r0, #0]
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d50:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8000d56:	2220      	movs	r2, #32
 8000d58:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d5c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8000d60:	f7ff ffd3 	bl	8000d0a <HAL_I2C_ListenCpltCallback>
 8000d64:	e7e3      	b.n	8000d2e <I2C_Slave_AF+0x22>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <I2C_Slave_AF+0x90>)
 8000d68:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8000d6a:	2321      	movs	r3, #33	; 0x21
 8000d6c:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000d7a:	6802      	ldr	r2, [r0, #0]
 8000d7c:	6853      	ldr	r3, [r2, #4]
 8000d7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d82:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000d84:	6803      	ldr	r3, [r0, #0]
 8000d86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8000d8a:	615a      	str	r2, [r3, #20]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000d8c:	6802      	ldr	r2, [r0, #0]
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d94:	6013      	str	r3, [r2, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8000d96:	f7ff ff55 	bl	8000c44 <HAL_I2C_SlaveTxCpltCallback>
 8000d9a:	e7c8      	b.n	8000d2e <I2C_Slave_AF+0x22>
 8000d9c:	ffff0000 	.word	0xffff0000

08000da0 <HAL_I2C_MemTxCpltCallback>:
}
 8000da0:	4770      	bx	lr

08000da2 <I2C_MasterTransmit_TXE>:
{
 8000da2:	b510      	push	{r4, lr}
  uint32_t CurrentState       = hi2c->State;
 8000da4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000da8:	b2db      	uxtb	r3, r3
  uint32_t CurrentMode        = hi2c->Mode;
 8000daa:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000dae:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000db0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000db2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8000db4:	b909      	cbnz	r1, 8000dba <I2C_MasterTransmit_TXE+0x18>
 8000db6:	2b21      	cmp	r3, #33	; 0x21
 8000db8:	d005      	beq.n	8000dc6 <I2C_MasterTransmit_TXE+0x24>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8000dba:	2b21      	cmp	r3, #33	; 0x21
 8000dbc:	d03c      	beq.n	8000e38 <I2C_MasterTransmit_TXE+0x96>
 8000dbe:	2a40      	cmp	r2, #64	; 0x40
 8000dc0:	d038      	beq.n	8000e34 <I2C_MasterTransmit_TXE+0x92>
}
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	bd10      	pop	{r4, pc}
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000dc6:	2c04      	cmp	r4, #4
 8000dc8:	d004      	beq.n	8000dd4 <I2C_MasterTransmit_TXE+0x32>
 8000dca:	2c08      	cmp	r4, #8
 8000dcc:	d002      	beq.n	8000dd4 <I2C_MasterTransmit_TXE+0x32>
 8000dce:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8000dd2:	d119      	bne.n	8000e08 <I2C_MasterTransmit_TXE+0x66>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000dd4:	6802      	ldr	r2, [r0, #0]
 8000dd6:	6853      	ldr	r3, [r2, #4]
 8000dd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ddc:	6053      	str	r3, [r2, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000dde:	6802      	ldr	r2, [r0, #0]
 8000de0:	6813      	ldr	r3, [r2, #0]
 8000de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000de6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8000dec:	2320      	movs	r3, #32
 8000dee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000df2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2b40      	cmp	r3, #64	; 0x40
 8000dfa:	d015      	beq.n	8000e28 <I2C_MasterTransmit_TXE+0x86>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8000e02:	f7ff ff1d 	bl	8000c40 <HAL_I2C_MasterTxCpltCallback>
 8000e06:	e7dc      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000e08:	6802      	ldr	r2, [r0, #0]
 8000e0a:	6853      	ldr	r3, [r2, #4]
 8000e0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e10:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000e12:	2311      	movs	r3, #17
 8000e14:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8000e22:	f7ff ff0d 	bl	8000c40 <HAL_I2C_MasterTxCpltCallback>
 8000e26:	e7cc      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8000e2e:	f7ff ffb7 	bl	8000da0 <HAL_I2C_MemTxCpltCallback>
 8000e32:	e7c6      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8000e34:	2b22      	cmp	r3, #34	; 0x22
 8000e36:	d1c4      	bne.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
    if(hi2c->XferCount == 0U)
 8000e38:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	b17b      	cbz	r3, 8000e5e <I2C_MasterTransmit_TXE+0xbc>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000e3e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b40      	cmp	r3, #64	; 0x40
 8000e46:	d010      	beq.n	8000e6a <I2C_MasterTransmit_TXE+0xc8>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000e48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e4a:	1c5a      	adds	r2, r3, #1
 8000e4c:	6242      	str	r2, [r0, #36]	; 0x24
 8000e4e:	6802      	ldr	r2, [r0, #0]
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8000e54:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000e56:	3b01      	subs	r3, #1
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	8543      	strh	r3, [r0, #42]	; 0x2a
 8000e5c:	e7b1      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8000e5e:	6802      	ldr	r2, [r0, #0]
 8000e60:	6853      	ldr	r3, [r2, #4]
 8000e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e66:	6053      	str	r3, [r2, #4]
 8000e68:	e7ab      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
        if(hi2c->EventCount == 0)
 8000e6a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000e6c:	b99b      	cbnz	r3, 8000e96 <I2C_MasterTransmit_TXE+0xf4>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8000e6e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d008      	beq.n	8000e86 <I2C_MasterTransmit_TXE+0xe4>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8000e74:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000e76:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8000e7a:	6802      	ldr	r2, [r0, #0]
 8000e7c:	6113      	str	r3, [r2, #16]
            hi2c->EventCount++;
 8000e7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000e80:	3301      	adds	r3, #1
 8000e82:	6503      	str	r3, [r0, #80]	; 0x50
 8000e84:	e79d      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000e86:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000e88:	6802      	ldr	r2, [r0, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	6113      	str	r3, [r2, #16]
            hi2c->EventCount += 2;
 8000e8e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000e90:	3302      	adds	r3, #2
 8000e92:	6503      	str	r3, [r0, #80]	; 0x50
 8000e94:	e795      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
        else if(hi2c->EventCount == 1)
 8000e96:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d017      	beq.n	8000ecc <I2C_MasterTransmit_TXE+0x12a>
        else if(hi2c->EventCount == 2)
 8000e9c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d18f      	bne.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000ea2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b22      	cmp	r3, #34	; 0x22
 8000eaa:	d017      	beq.n	8000edc <I2C_MasterTransmit_TXE+0x13a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000eac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b21      	cmp	r3, #33	; 0x21
 8000eb4:	d185      	bne.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000eb6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	6242      	str	r2, [r0, #36]	; 0x24
 8000ebc:	6802      	ldr	r2, [r0, #0]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	6113      	str	r3, [r2, #16]
            hi2c->XferCount--;
 8000ec2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	8543      	strh	r3, [r0, #42]	; 0x2a
 8000eca:	e77a      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8000ecc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000ece:	6802      	ldr	r2, [r0, #0]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	6113      	str	r3, [r2, #16]
          hi2c->EventCount++;
 8000ed4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	6503      	str	r3, [r0, #80]	; 0x50
 8000eda:	e772      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8000edc:	6802      	ldr	r2, [r0, #0]
 8000ede:	6813      	ldr	r3, [r2, #0]
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e76c      	b.n	8000dc2 <I2C_MasterTransmit_TXE+0x20>

08000ee8 <I2C_MasterTransmit_BTF>:
{
 8000ee8:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000eea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8000eec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b21      	cmp	r3, #33	; 0x21
 8000ef4:	d001      	beq.n	8000efa <I2C_MasterTransmit_BTF+0x12>
}
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	bd08      	pop	{r3, pc}
    if(hi2c->XferCount != 0U)
 8000efa:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	bb03      	cbnz	r3, 8000f42 <I2C_MasterTransmit_BTF+0x5a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000f00:	2a04      	cmp	r2, #4
 8000f02:	d004      	beq.n	8000f0e <I2C_MasterTransmit_BTF+0x26>
 8000f04:	2a08      	cmp	r2, #8
 8000f06:	d002      	beq.n	8000f0e <I2C_MasterTransmit_BTF+0x26>
 8000f08:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000f0c:	d124      	bne.n	8000f58 <I2C_MasterTransmit_BTF+0x70>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000f0e:	6802      	ldr	r2, [r0, #0]
 8000f10:	6853      	ldr	r3, [r2, #4]
 8000f12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f16:	6053      	str	r3, [r2, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000f18:	6802      	ldr	r2, [r0, #0]
 8000f1a:	6813      	ldr	r3, [r2, #0]
 8000f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f20:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8000f26:	2320      	movs	r3, #32
 8000f28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000f2c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b40      	cmp	r3, #64	; 0x40
 8000f34:	d020      	beq.n	8000f78 <I2C_MasterTransmit_BTF+0x90>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8000f3c:	f7ff fe80 	bl	8000c40 <HAL_I2C_MasterTxCpltCallback>
 8000f40:	e7d9      	b.n	8000ef6 <I2C_MasterTransmit_BTF+0xe>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000f42:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	6242      	str	r2, [r0, #36]	; 0x24
 8000f48:	6802      	ldr	r2, [r0, #0]
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8000f4e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	8543      	strh	r3, [r0, #42]	; 0x2a
 8000f56:	e7ce      	b.n	8000ef6 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000f58:	6802      	ldr	r2, [r0, #0]
 8000f5a:	6853      	ldr	r3, [r2, #4]
 8000f5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f60:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000f62:	2311      	movs	r3, #17
 8000f64:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8000f72:	f7ff fe65 	bl	8000c40 <HAL_I2C_MasterTxCpltCallback>
 8000f76:	e7be      	b.n	8000ef6 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8000f7e:	f7ff ff0f 	bl	8000da0 <HAL_I2C_MemTxCpltCallback>
 8000f82:	e7b8      	b.n	8000ef6 <I2C_MasterTransmit_BTF+0xe>

08000f84 <HAL_I2C_MemRxCpltCallback>:
}
 8000f84:	4770      	bx	lr

08000f86 <I2C_MasterReceive_RXNE>:
{
 8000f86:	b508      	push	{r3, lr}
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8000f88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b22      	cmp	r3, #34	; 0x22
 8000f90:	d001      	beq.n	8000f96 <I2C_MasterReceive_RXNE+0x10>
}
 8000f92:	2000      	movs	r0, #0
 8000f94:	bd08      	pop	{r3, pc}
    tmp = hi2c->XferCount;
 8000f96:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000f98:	b29b      	uxth	r3, r3
    if(tmp > 3U)
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d829      	bhi.n	8000ff2 <I2C_MasterReceive_RXNE+0x6c>
    else if((tmp == 2U) || (tmp == 3U))
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d931      	bls.n	8001008 <I2C_MasterReceive_RXNE+0x82>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8000fa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d047      	beq.n	800103a <I2C_MasterReceive_RXNE+0xb4>
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000faa:	6802      	ldr	r2, [r0, #0]
 8000fac:	6813      	ldr	r3, [r2, #0]
 8000fae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000fb4:	6802      	ldr	r2, [r0, #0]
 8000fb6:	6853      	ldr	r3, [r2, #4]
 8000fb8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fbc:	6053      	str	r3, [r2, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000fbe:	6803      	ldr	r3, [r0, #0]
 8000fc0:	691a      	ldr	r2, [r3, #16]
 8000fc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000fc4:	1c59      	adds	r1, r3, #1
 8000fc6:	6241      	str	r1, [r0, #36]	; 0x24
 8000fc8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8000fca:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000fcc:	3b01      	subs	r3, #1
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	6303      	str	r3, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000fdc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b40      	cmp	r3, #64	; 0x40
 8000fe4:	d02f      	beq.n	8001046 <I2C_MasterReceive_RXNE+0xc0>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8000fec:	f7ff fe29 	bl	8000c42 <HAL_I2C_MasterRxCpltCallback>
 8000ff0:	e7cf      	b.n	8000f92 <I2C_MasterReceive_RXNE+0xc>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ff2:	6803      	ldr	r3, [r0, #0]
 8000ff4:	691a      	ldr	r2, [r3, #16]
 8000ff6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000ff8:	1c59      	adds	r1, r3, #1
 8000ffa:	6241      	str	r1, [r0, #36]	; 0x24
 8000ffc:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8000ffe:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001000:	3b01      	subs	r3, #1
 8001002:	b29b      	uxth	r3, r3
 8001004:	8543      	strh	r3, [r0, #42]	; 0x2a
 8001006:	e7c4      	b.n	8000f92 <I2C_MasterReceive_RXNE+0xc>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001008:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800100a:	2b02      	cmp	r3, #2
 800100c:	d00f      	beq.n	800102e <I2C_MasterReceive_RXNE+0xa8>
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800100e:	6802      	ldr	r2, [r0, #0]
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001016:	6013      	str	r3, [r2, #0]
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001018:	6802      	ldr	r2, [r0, #0]
 800101a:	6813      	ldr	r3, [r2, #0]
 800101c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001020:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001022:	6802      	ldr	r2, [r0, #0]
 8001024:	6853      	ldr	r3, [r2, #4]
 8001026:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800102a:	6053      	str	r3, [r2, #4]
 800102c:	e7b1      	b.n	8000f92 <I2C_MasterReceive_RXNE+0xc>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800102e:	6802      	ldr	r2, [r0, #0]
 8001030:	6813      	ldr	r3, [r2, #0]
 8001032:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e7f3      	b.n	8001022 <I2C_MasterReceive_RXNE+0x9c>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800103a:	6802      	ldr	r2, [r0, #0]
 800103c:	6813      	ldr	r3, [r2, #0]
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	e7b6      	b.n	8000fb4 <I2C_MasterReceive_RXNE+0x2e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001046:	2300      	movs	r3, #0
 8001048:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 800104c:	f7ff ff9a 	bl	8000f84 <HAL_I2C_MemRxCpltCallback>
 8001050:	e79f      	b.n	8000f92 <I2C_MasterReceive_RXNE+0xc>

08001052 <I2C_MasterReceive_BTF>:
{
 8001052:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001054:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 3U)
 8001056:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001058:	b29b      	uxth	r3, r3
 800105a:	2b03      	cmp	r3, #3
 800105c:	d00f      	beq.n	800107e <I2C_MasterReceive_BTF+0x2c>
  else if(hi2c->XferCount == 2U)
 800105e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001060:	b29b      	uxth	r3, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d022      	beq.n	80010ac <I2C_MasterReceive_BTF+0x5a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001066:	6803      	ldr	r3, [r0, #0]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800106c:	1c59      	adds	r1, r3, #1
 800106e:	6241      	str	r1, [r0, #36]	; 0x24
 8001070:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001072:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001074:	3b01      	subs	r3, #1
 8001076:	b29b      	uxth	r3, r3
 8001078:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800107a:	2000      	movs	r0, #0
 800107c:	bd08      	pop	{r3, pc}
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800107e:	2a04      	cmp	r2, #4
 8001080:	d004      	beq.n	800108c <I2C_MasterReceive_BTF+0x3a>
 8001082:	2a08      	cmp	r2, #8
 8001084:	d002      	beq.n	800108c <I2C_MasterReceive_BTF+0x3a>
 8001086:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800108a:	d104      	bne.n	8001096 <I2C_MasterReceive_BTF+0x44>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800108c:	6802      	ldr	r2, [r0, #0]
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001094:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001096:	6803      	ldr	r3, [r0, #0]
 8001098:	691a      	ldr	r2, [r3, #16]
 800109a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800109c:	1c59      	adds	r1, r3, #1
 800109e:	6241      	str	r1, [r0, #36]	; 0x24
 80010a0:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80010a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	8543      	strh	r3, [r0, #42]	; 0x2a
 80010aa:	e7e6      	b.n	800107a <I2C_MasterReceive_BTF+0x28>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80010ac:	2a04      	cmp	r2, #4
 80010ae:	d017      	beq.n	80010e0 <I2C_MasterReceive_BTF+0x8e>
 80010b0:	2a08      	cmp	r2, #8
 80010b2:	d015      	beq.n	80010e0 <I2C_MasterReceive_BTF+0x8e>
 80010b4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80010b8:	d012      	beq.n	80010e0 <I2C_MasterReceive_BTF+0x8e>
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 80010ba:	2a02      	cmp	r2, #2
 80010bc:	d00a      	beq.n	80010d4 <I2C_MasterReceive_BTF+0x82>
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010be:	6802      	ldr	r2, [r0, #0]
 80010c0:	6813      	ldr	r3, [r2, #0]
 80010c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80010c8:	6802      	ldr	r2, [r0, #0]
 80010ca:	6853      	ldr	r3, [r2, #4]
 80010cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010d0:	6053      	str	r3, [r2, #4]
 80010d2:	e00f      	b.n	80010f4 <I2C_MasterReceive_BTF+0xa2>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80010d4:	6802      	ldr	r2, [r0, #0]
 80010d6:	6813      	ldr	r3, [r2, #0]
 80010d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e7f3      	b.n	80010c8 <I2C_MasterReceive_BTF+0x76>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80010e0:	6802      	ldr	r2, [r0, #0]
 80010e2:	6853      	ldr	r3, [r2, #4]
 80010e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010e8:	6053      	str	r3, [r2, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010ea:	6802      	ldr	r2, [r0, #0]
 80010ec:	6813      	ldr	r3, [r2, #0]
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	691a      	ldr	r2, [r3, #16]
 80010f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010fa:	1c59      	adds	r1, r3, #1
 80010fc:	6241      	str	r1, [r0, #36]	; 0x24
 80010fe:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001100:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001102:	3b01      	subs	r3, #1
 8001104:	b29b      	uxth	r3, r3
 8001106:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001108:	6803      	ldr	r3, [r0, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800110e:	1c59      	adds	r1, r3, #1
 8001110:	6241      	str	r1, [r0, #36]	; 0x24
 8001112:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 8001114:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001116:	3b01      	subs	r3, #1
 8001118:	b29b      	uxth	r3, r3
 800111a:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 800111c:	2320      	movs	r3, #32
 800111e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001122:	2300      	movs	r3, #0
 8001124:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001126:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b40      	cmp	r3, #64	; 0x40
 800112e:	d005      	beq.n	800113c <I2C_MasterReceive_BTF+0xea>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001130:	2300      	movs	r3, #0
 8001132:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001136:	f7ff fd84 	bl	8000c42 <HAL_I2C_MasterRxCpltCallback>
 800113a:	e79e      	b.n	800107a <I2C_MasterReceive_BTF+0x28>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001142:	f7ff ff1f 	bl	8000f84 <HAL_I2C_MemRxCpltCallback>
 8001146:	e798      	b.n	800107a <I2C_MasterReceive_BTF+0x28>

08001148 <HAL_I2C_ErrorCallback>:
}
 8001148:	4770      	bx	lr

0800114a <HAL_I2C_AbortCpltCallback>:
}
 800114a:	4770      	bx	lr

0800114c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800114c:	b510      	push	{r4, lr}
 800114e:	4604      	mov	r4, r0
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentState = hi2c->State;
 8001150:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d

  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001154:	3b29      	subs	r3, #41	; 0x29
 8001156:	2b01      	cmp	r3, #1
 8001158:	d936      	bls.n	80011c8 <I2C_ITError+0x7c>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800115a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b60      	cmp	r3, #96	; 0x60
 8001162:	d007      	beq.n	8001174 <I2C_ITError+0x28>
 8001164:	6803      	ldr	r3, [r0, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800116c:	d102      	bne.n	8001174 <I2C_ITError+0x28>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800116e:	2320      	movs	r3, #32
 8001170:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8001174:	2300      	movs	r3, #0
 8001176:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001178:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  }

  /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800117c:	6822      	ldr	r2, [r4, #0]
 800117e:	6813      	ldr	r3, [r2, #0]
 8001180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001184:	6013      	str	r3, [r2, #0]

  /* Abort DMA transfer */
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	685a      	ldr	r2, [r3, #4]
 800118a:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800118e:	d03e      	beq.n	800120e <I2C_ITError+0xc2>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001196:	605a      	str	r2, [r3, #4]

    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001198:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800119a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800119e:	2a01      	cmp	r2, #1
 80011a0:	d018      	beq.n	80011d4 <I2C_ITError+0x88>
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80011a2:	4a3a      	ldr	r2, [pc, #232]	; (800128c <I2C_ITError+0x140>)
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80011a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80011a8:	f7ff f9ea 	bl	8000580 <HAL_DMA_Abort_IT>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d03f      	beq.n	8001230 <I2C_ITError+0xe4>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80011b0:	6822      	ldr	r2, [r4, #0]
 80011b2:	6813      	ldr	r3, [r2, #0]
 80011b4:	f023 0301 	bic.w	r3, r3, #1
 80011b8:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80011ba:	2320      	movs	r3, #32
 80011bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80011c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80011c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80011c4:	4798      	blx	r3
 80011c6:	e033      	b.n	8001230 <I2C_ITError+0xe4>
    hi2c->PreviousState = I2C_STATE_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80011cc:	2328      	movs	r3, #40	; 0x28
 80011ce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80011d2:	e7d3      	b.n	800117c <I2C_ITError+0x30>
    }
    else
    {
      /* Set the DMA Abort callback : 
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80011d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011d6:	4a2d      	ldr	r2, [pc, #180]	; (800128c <I2C_ITError+0x140>)
 80011d8:	635a      	str	r2, [r3, #52]	; 0x34

      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80011da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011dc:	f7ff f9d0 	bl	8000580 <HAL_DMA_Abort_IT>
 80011e0:	b330      	cbz	r0, 8001230 <I2C_ITError+0xe4>
      {
        /* Store Last receive data if any */
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80011e2:	6823      	ldr	r3, [r4, #0]
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80011ea:	d004      	beq.n	80011f6 <I2C_ITError+0xaa>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011ec:	691a      	ldr	r2, [r3, #16]
 80011ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f0:	1c59      	adds	r1, r3, #1
 80011f2:	6261      	str	r1, [r4, #36]	; 0x24
 80011f4:	701a      	strb	r2, [r3, #0]
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80011f6:	6822      	ldr	r2, [r4, #0]
 80011f8:	6813      	ldr	r3, [r2, #0]
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8001200:	2320      	movs	r3, #32
 8001202:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001206:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001208:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800120a:	4798      	blx	r3
 800120c:	e010      	b.n	8001230 <I2C_ITError+0xe4>
      }
    }
  }
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 800120e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	2a60      	cmp	r2, #96	; 0x60
 8001216:	d011      	beq.n	800123c <I2C_ITError+0xf0>
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    /* Store Last receive data if any */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800121e:	d004      	beq.n	800122a <I2C_ITError+0xde>
    {
      /* Read data from DR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001224:	1c59      	adds	r1, r3, #1
 8001226:	6261      	str	r1, [r4, #36]	; 0x24
 8001228:	701a      	strb	r2, [r3, #0]
    }

    /* Call user error callback */
    HAL_I2C_ErrorCallback(hi2c);
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ff8c 	bl	8001148 <HAL_I2C_ErrorCallback>
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001230:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b28      	cmp	r3, #40	; 0x28
 8001238:	d017      	beq.n	800126a <I2C_ITError+0x11e>
    hi2c->Mode = HAL_I2C_MODE_NONE;
    
    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    HAL_I2C_ListenCpltCallback(hi2c);
  }
}
 800123a:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800123c:	2220      	movs	r2, #32
 800123e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001242:	2200      	movs	r2, #0
 8001244:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	f012 0f40 	tst.w	r2, #64	; 0x40
 800124c:	d004      	beq.n	8001258 <I2C_ITError+0x10c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001252:	1c59      	adds	r1, r3, #1
 8001254:	6261      	str	r1, [r4, #36]	; 0x24
 8001256:	701a      	strb	r2, [r3, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001258:	6822      	ldr	r2, [r4, #0]
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001262:	4620      	mov	r0, r4
 8001264:	f7ff ff71 	bl	800114a <HAL_I2C_AbortCpltCallback>
 8001268:	e7e2      	b.n	8001230 <I2C_ITError+0xe4>
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 800126a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800126c:	f013 0f04 	tst.w	r3, #4
 8001270:	d0e3      	beq.n	800123a <I2C_ITError+0xee>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001272:	4b07      	ldr	r3, [pc, #28]	; (8001290 <I2C_ITError+0x144>)
 8001274:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8001276:	2300      	movs	r3, #0
 8001278:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800127a:	2220      	movs	r2, #32
 800127c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001280:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff fd40 	bl	8000d0a <HAL_I2C_ListenCpltCallback>
}
 800128a:	e7d6      	b.n	800123a <I2C_ITError+0xee>
 800128c:	080015d9 	.word	0x080015d9
 8001290:	ffff0000 	.word	0xffff0000

08001294 <I2C_Slave_STOPF>:
{
 8001294:	b510      	push	{r4, lr}
 8001296:	b082      	sub	sp, #8
  uint32_t CurrentState = hi2c->State;
 8001298:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800129c:	b2db      	uxtb	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800129e:	6801      	ldr	r1, [r0, #0]
 80012a0:	684a      	ldr	r2, [r1, #4]
 80012a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80012a6:	604a      	str	r2, [r1, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80012a8:	2200      	movs	r2, #0
 80012aa:	9201      	str	r2, [sp, #4]
 80012ac:	6802      	ldr	r2, [r0, #0]
 80012ae:	6951      	ldr	r1, [r2, #20]
 80012b0:	9101      	str	r1, [sp, #4]
 80012b2:	6811      	ldr	r1, [r2, #0]
 80012b4:	f041 0101 	orr.w	r1, r1, #1
 80012b8:	6011      	str	r1, [r2, #0]
 80012ba:	9a01      	ldr	r2, [sp, #4]
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80012bc:	6801      	ldr	r1, [r0, #0]
 80012be:	680a      	ldr	r2, [r1, #0]
 80012c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012c4:	600a      	str	r2, [r1, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80012c6:	6801      	ldr	r1, [r0, #0]
 80012c8:	684a      	ldr	r2, [r1, #4]
 80012ca:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80012ce:	d014      	beq.n	80012fa <I2C_Slave_STOPF+0x66>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80012d0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	2a22      	cmp	r2, #34	; 0x22
 80012d8:	d00a      	beq.n	80012f0 <I2C_Slave_STOPF+0x5c>
 80012da:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	2a2a      	cmp	r2, #42	; 0x2a
 80012e2:	d005      	beq.n	80012f0 <I2C_Slave_STOPF+0x5c>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80012e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	6852      	ldr	r2, [r2, #4]
 80012ea:	b292      	uxth	r2, r2
 80012ec:	8542      	strh	r2, [r0, #42]	; 0x2a
 80012ee:	e004      	b.n	80012fa <I2C_Slave_STOPF+0x66>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80012f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	6852      	ldr	r2, [r2, #4]
 80012f6:	b292      	uxth	r2, r2
 80012f8:	8542      	strh	r2, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 80012fa:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80012fc:	b292      	uxth	r2, r2
 80012fe:	b1f2      	cbz	r2, 800133e <I2C_Slave_STOPF+0xaa>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001300:	694a      	ldr	r2, [r1, #20]
 8001302:	f012 0f04 	tst.w	r2, #4
 8001306:	d008      	beq.n	800131a <I2C_Slave_STOPF+0x86>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001308:	6909      	ldr	r1, [r1, #16]
 800130a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800130c:	1c54      	adds	r4, r2, #1
 800130e:	6244      	str	r4, [r0, #36]	; 0x24
 8001310:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 8001312:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001314:	3a01      	subs	r2, #1
 8001316:	b292      	uxth	r2, r2
 8001318:	8542      	strh	r2, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800131a:	6802      	ldr	r2, [r0, #0]
 800131c:	6951      	ldr	r1, [r2, #20]
 800131e:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001322:	d008      	beq.n	8001336 <I2C_Slave_STOPF+0xa2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001324:	6911      	ldr	r1, [r2, #16]
 8001326:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001328:	1c54      	adds	r4, r2, #1
 800132a:	6244      	str	r4, [r0, #36]	; 0x24
 800132c:	7011      	strb	r1, [r2, #0]
      hi2c->XferCount--;
 800132e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001330:	3a01      	subs	r2, #1
 8001332:	b292      	uxth	r2, r2
 8001334:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001336:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001338:	f042 0204 	orr.w	r2, r2, #4
 800133c:	6402      	str	r2, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800133e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001340:	b9a2      	cbnz	r2, 800136c <I2C_Slave_STOPF+0xd8>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 8001342:	2b28      	cmp	r3, #40	; 0x28
 8001344:	d015      	beq.n	8001372 <I2C_Slave_STOPF+0xde>
 8001346:	2b2a      	cmp	r3, #42	; 0x2a
 8001348:	d013      	beq.n	8001372 <I2C_Slave_STOPF+0xde>
 800134a:	2b29      	cmp	r3, #41	; 0x29
 800134c:	d011      	beq.n	8001372 <I2C_Slave_STOPF+0xde>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800134e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001350:	2a22      	cmp	r2, #34	; 0x22
 8001352:	d001      	beq.n	8001358 <I2C_Slave_STOPF+0xc4>
 8001354:	2b22      	cmp	r3, #34	; 0x22
 8001356:	d117      	bne.n	8001388 <I2C_Slave_STOPF+0xf4>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001358:	2300      	movs	r3, #0
 800135a:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800135c:	2220      	movs	r2, #32
 800135e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001362:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001366:	f7ff fc93 	bl	8000c90 <HAL_I2C_SlaveRxCpltCallback>
 800136a:	e00d      	b.n	8001388 <I2C_Slave_STOPF+0xf4>
    I2C_ITError(hi2c);
 800136c:	f7ff feee 	bl	800114c <I2C_ITError>
 8001370:	e00a      	b.n	8001388 <I2C_Slave_STOPF+0xf4>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <I2C_Slave_STOPF+0xfc>)
 8001374:	62c3      	str	r3, [r0, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001376:	2300      	movs	r3, #0
 8001378:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800137a:	2220      	movs	r2, #32
 800137c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001384:	f7ff fcc1 	bl	8000d0a <HAL_I2C_ListenCpltCallback>
}
 8001388:	2000      	movs	r0, #0
 800138a:	b002      	add	sp, #8
 800138c:	bd10      	pop	{r4, pc}
 800138e:	bf00      	nop
 8001390:	ffff0000 	.word	0xffff0000

08001394 <HAL_I2C_EV_IRQHandler>:
{
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	4605      	mov	r5, r0
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001398:	6803      	ldr	r3, [r0, #0]
 800139a:	699f      	ldr	r7, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800139c:	695c      	ldr	r4, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 800139e:	685e      	ldr	r6, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 80013a0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80013a4:	b2db      	uxtb	r3, r3
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80013a6:	2b10      	cmp	r3, #16
 80013a8:	d025      	beq.n	80013f6 <HAL_I2C_EV_IRQHandler+0x62>
 80013aa:	2b40      	cmp	r3, #64	; 0x40
 80013ac:	d023      	beq.n	80013f6 <HAL_I2C_EV_IRQHandler+0x62>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_I2C_EV_IRQHandler+0x14c>)
 80013b0:	4023      	ands	r3, r4
 80013b2:	b113      	cbz	r3, 80013ba <HAL_I2C_EV_IRQHandler+0x26>
 80013b4:	f416 7f00 	tst.w	r6, #512	; 0x200
 80013b8:	d16e      	bne.n	8001498 <HAL_I2C_EV_IRQHandler+0x104>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80013ba:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <HAL_I2C_EV_IRQHandler+0x150>)
 80013bc:	4023      	ands	r3, r4
 80013be:	b113      	cbz	r3, 80013c6 <HAL_I2C_EV_IRQHandler+0x32>
 80013c0:	f416 7f00 	tst.w	r6, #512	; 0x200
 80013c4:	d16b      	bne.n	800149e <HAL_I2C_EV_IRQHandler+0x10a>
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <HAL_I2C_EV_IRQHandler+0x154>)
 80013c8:	403b      	ands	r3, r7
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d06f      	beq.n	80014ae <HAL_I2C_EV_IRQHandler+0x11a>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80013ce:	4b47      	ldr	r3, [pc, #284]	; (80014ec <HAL_I2C_EV_IRQHandler+0x158>)
 80013d0:	4023      	ands	r3, r4
 80013d2:	b133      	cbz	r3, 80013e2 <HAL_I2C_EV_IRQHandler+0x4e>
 80013d4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80013d8:	d003      	beq.n	80013e2 <HAL_I2C_EV_IRQHandler+0x4e>
 80013da:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 80013dc:	4023      	ands	r3, r4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d061      	beq.n	80014a6 <HAL_I2C_EV_IRQHandler+0x112>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80013e2:	4b43      	ldr	r3, [pc, #268]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 80013e4:	4023      	ands	r3, r4
 80013e6:	b353      	cbz	r3, 800143e <HAL_I2C_EV_IRQHandler+0xaa>
 80013e8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80013ec:	d027      	beq.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_BTF(hi2c);
 80013ee:	4628      	mov	r0, r5
 80013f0:	f7ff fb54 	bl	8000a9c <I2C_SlaveTransmit_BTF>
 80013f4:	e023      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80013f6:	f014 1f01 	tst.w	r4, #65537	; 0x10001
 80013fa:	d002      	beq.n	8001402 <HAL_I2C_EV_IRQHandler+0x6e>
 80013fc:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001400:	d11e      	bne.n	8001440 <HAL_I2C_EV_IRQHandler+0xac>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001402:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <HAL_I2C_EV_IRQHandler+0x160>)
 8001404:	4023      	ands	r3, r4
 8001406:	b113      	cbz	r3, 800140e <HAL_I2C_EV_IRQHandler+0x7a>
 8001408:	f416 7f00 	tst.w	r6, #512	; 0x200
 800140c:	d11c      	bne.n	8001448 <HAL_I2C_EV_IRQHandler+0xb4>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_I2C_EV_IRQHandler+0x14c>)
 8001410:	4023      	ands	r3, r4
 8001412:	b113      	cbz	r3, 800141a <HAL_I2C_EV_IRQHandler+0x86>
 8001414:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001418:	d11a      	bne.n	8001450 <HAL_I2C_EV_IRQHandler+0xbc>
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800141a:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <HAL_I2C_EV_IRQHandler+0x154>)
 800141c:	403b      	ands	r3, r7
 800141e:	b31b      	cbz	r3, 8001468 <HAL_I2C_EV_IRQHandler+0xd4>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <HAL_I2C_EV_IRQHandler+0x158>)
 8001422:	4023      	ands	r3, r4
 8001424:	b12b      	cbz	r3, 8001432 <HAL_I2C_EV_IRQHandler+0x9e>
 8001426:	f416 6f80 	tst.w	r6, #1024	; 0x400
 800142a:	d002      	beq.n	8001432 <HAL_I2C_EV_IRQHandler+0x9e>
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 800142e:	4023      	ands	r3, r4
 8001430:	b193      	cbz	r3, 8001458 <HAL_I2C_EV_IRQHandler+0xc4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 8001434:	4023      	ands	r3, r4
 8001436:	b113      	cbz	r3, 800143e <HAL_I2C_EV_IRQHandler+0xaa>
 8001438:	f416 7f00 	tst.w	r6, #512	; 0x200
 800143c:	d110      	bne.n	8001460 <HAL_I2C_EV_IRQHandler+0xcc>
}
 800143e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      I2C_Master_SB(hi2c);
 8001440:	4628      	mov	r0, r5
 8001442:	f7ff f9f3 	bl	800082c <I2C_Master_SB>
 8001446:	e7e8      	b.n	800141a <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADD10(hi2c);
 8001448:	4628      	mov	r0, r5
 800144a:	f7ff fa34 	bl	80008b6 <I2C_Master_ADD10>
 800144e:	e7e4      	b.n	800141a <HAL_I2C_EV_IRQHandler+0x86>
      I2C_Master_ADDR(hi2c);
 8001450:	4628      	mov	r0, r5
 8001452:	f7ff fa36 	bl	80008c2 <I2C_Master_ADDR>
 8001456:	e7e0      	b.n	800141a <HAL_I2C_EV_IRQHandler+0x86>
        I2C_MasterTransmit_TXE(hi2c);
 8001458:	4628      	mov	r0, r5
 800145a:	f7ff fca2 	bl	8000da2 <I2C_MasterTransmit_TXE>
 800145e:	e7ee      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterTransmit_BTF(hi2c);
 8001460:	4628      	mov	r0, r5
 8001462:	f7ff fd41 	bl	8000ee8 <I2C_MasterTransmit_BTF>
 8001466:	e7ea      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001468:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <HAL_I2C_EV_IRQHandler+0x164>)
 800146a:	4023      	ands	r3, r4
 800146c:	b12b      	cbz	r3, 800147a <HAL_I2C_EV_IRQHandler+0xe6>
 800146e:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8001472:	d002      	beq.n	800147a <HAL_I2C_EV_IRQHandler+0xe6>
 8001474:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 8001476:	4023      	ands	r3, r4
 8001478:	b153      	cbz	r3, 8001490 <HAL_I2C_EV_IRQHandler+0xfc>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800147a:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 800147c:	4023      	ands	r3, r4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0dd      	beq.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
 8001482:	f416 7f00 	tst.w	r6, #512	; 0x200
 8001486:	d0da      	beq.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_BTF(hi2c);
 8001488:	4628      	mov	r0, r5
 800148a:	f7ff fde2 	bl	8001052 <I2C_MasterReceive_BTF>
 800148e:	e7d6      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_MasterReceive_RXNE(hi2c);
 8001490:	4628      	mov	r0, r5
 8001492:	f7ff fd78 	bl	8000f86 <I2C_MasterReceive_RXNE>
 8001496:	e7d2      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
      I2C_Slave_ADDR(hi2c);
 8001498:	f7ff fc23 	bl	8000ce2 <I2C_Slave_ADDR>
 800149c:	e7cf      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
      I2C_Slave_STOPF(hi2c);
 800149e:	4628      	mov	r0, r5
 80014a0:	f7ff fef8 	bl	8001294 <I2C_Slave_STOPF>
 80014a4:	e7cb      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveTransmit_TXE(hi2c);
 80014a6:	4628      	mov	r0, r5
 80014a8:	f7ff fbcd 	bl	8000c46 <I2C_SlaveTransmit_TXE>
 80014ac:	e7c7      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_I2C_EV_IRQHandler+0x164>)
 80014b0:	4023      	ands	r3, r4
 80014b2:	b12b      	cbz	r3, 80014c0 <HAL_I2C_EV_IRQHandler+0x12c>
 80014b4:	f416 6f80 	tst.w	r6, #1024	; 0x400
 80014b8:	d002      	beq.n	80014c0 <HAL_I2C_EV_IRQHandler+0x12c>
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 80014bc:	4023      	ands	r3, r4
 80014be:	b153      	cbz	r3, 80014d6 <HAL_I2C_EV_IRQHandler+0x142>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_I2C_EV_IRQHandler+0x15c>)
 80014c2:	4023      	ands	r3, r4
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ba      	beq.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
 80014c8:	f416 7f00 	tst.w	r6, #512	; 0x200
 80014cc:	d0b7      	beq.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_BTF(hi2c);
 80014ce:	4628      	mov	r0, r5
 80014d0:	f7ff faf3 	bl	8000aba <I2C_SlaveReceive_BTF>
}
 80014d4:	e7b3      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
        I2C_SlaveReceive_RXNE(hi2c);
 80014d6:	4628      	mov	r0, r5
 80014d8:	f7ff fbdb 	bl	8000c92 <I2C_SlaveReceive_RXNE>
 80014dc:	e7af      	b.n	800143e <HAL_I2C_EV_IRQHandler+0xaa>
 80014de:	bf00      	nop
 80014e0:	00010002 	.word	0x00010002
 80014e4:	00010010 	.word	0x00010010
 80014e8:	00100004 	.word	0x00100004
 80014ec:	00010080 	.word	0x00010080
 80014f0:	00010004 	.word	0x00010004
 80014f4:	00010008 	.word	0x00010008
 80014f8:	00010040 	.word	0x00010040

080014fc <HAL_I2C_ER_IRQHandler>:
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001500:	6803      	ldr	r3, [r0, #0]
 8001502:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001504:	685e      	ldr	r6, [r3, #4]
  if(((sr1itflags & I2C_FLAG_BERR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001506:	4a33      	ldr	r2, [pc, #204]	; (80015d4 <HAL_I2C_ER_IRQHandler+0xd8>)
 8001508:	4215      	tst	r5, r2
 800150a:	d00e      	beq.n	800152a <HAL_I2C_ER_IRQHandler+0x2e>
 800150c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001510:	d00b      	beq.n	800152a <HAL_I2C_ER_IRQHandler+0x2e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001512:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800151a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800151e:	615a      	str	r2, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001520:	6802      	ldr	r2, [r0, #0]
 8001522:	6813      	ldr	r3, [r2, #0]
 8001524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001528:	6013      	str	r3, [r2, #0]
  if(((sr1itflags & I2C_FLAG_ARLO) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 800152a:	f415 3f81 	tst.w	r5, #66048	; 0x10200
 800152e:	d00a      	beq.n	8001546 <HAL_I2C_ER_IRQHandler+0x4a>
 8001530:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001534:	d007      	beq.n	8001546 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001536:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001544:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_AF) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001546:	f415 3f82 	tst.w	r5, #66560	; 0x10400
 800154a:	d01a      	beq.n	8001582 <HAL_I2C_ER_IRQHandler+0x86>
 800154c:	f416 7f80 	tst.w	r6, #256	; 0x100
 8001550:	d017      	beq.n	8001582 <HAL_I2C_ER_IRQHandler+0x86>
    tmp1 = hi2c->Mode;
 8001552:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001556:	b2db      	uxtb	r3, r3
    tmp2 = hi2c->XferCount;
 8001558:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800155a:	b291      	uxth	r1, r2
    tmp3 = hi2c->State;
 800155c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001560:	b2d2      	uxtb	r2, r2
    tmp4 = hi2c->PreviousState;
 8001562:	6b20      	ldr	r0, [r4, #48]	; 0x30
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001564:	2b20      	cmp	r3, #32
 8001566:	d01d      	beq.n	80015a4 <HAL_I2C_ER_IRQHandler+0xa8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6423      	str	r3, [r4, #64]	; 0x40
      if(hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001570:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b10      	cmp	r3, #16
 8001578:	d022      	beq.n	80015c0 <HAL_I2C_ER_IRQHandler+0xc4>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001580:	615a      	str	r2, [r3, #20]
  if(((sr1itflags & I2C_FLAG_OVR) != RESET) && ((itsources & I2C_IT_ERR) != RESET))
 8001582:	f415 3f84 	tst.w	r5, #67584	; 0x10800
 8001586:	d00a      	beq.n	800159e <HAL_I2C_ER_IRQHandler+0xa2>
 8001588:	f416 7f80 	tst.w	r6, #256	; 0x100
 800158c:	d007      	beq.n	800159e <HAL_I2C_ER_IRQHandler+0xa2>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800158e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800159c:	615a      	str	r2, [r3, #20]
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800159e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a0:	b9a3      	cbnz	r3, 80015cc <HAL_I2C_ER_IRQHandler+0xd0>
}
 80015a2:	bd70      	pop	{r4, r5, r6, pc}
    if((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80015a4:	2900      	cmp	r1, #0
 80015a6:	d1df      	bne.n	8001568 <HAL_I2C_ER_IRQHandler+0x6c>
 80015a8:	2a21      	cmp	r2, #33	; 0x21
 80015aa:	d005      	beq.n	80015b8 <HAL_I2C_ER_IRQHandler+0xbc>
      ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80015ac:	2a29      	cmp	r2, #41	; 0x29
 80015ae:	d003      	beq.n	80015b8 <HAL_I2C_ER_IRQHandler+0xbc>
 80015b0:	2a28      	cmp	r2, #40	; 0x28
 80015b2:	d1d9      	bne.n	8001568 <HAL_I2C_ER_IRQHandler+0x6c>
      ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80015b4:	2821      	cmp	r0, #33	; 0x21
 80015b6:	d1d7      	bne.n	8001568 <HAL_I2C_ER_IRQHandler+0x6c>
      I2C_Slave_AF(hi2c);
 80015b8:	4620      	mov	r0, r4
 80015ba:	f7ff fba7 	bl	8000d0c <I2C_Slave_AF>
 80015be:	e7e0      	b.n	8001582 <HAL_I2C_ER_IRQHandler+0x86>
        SET_BIT(hi2c->Instance->CR1,I2C_CR1_STOP);
 80015c0:	6822      	ldr	r2, [r4, #0]
 80015c2:	6813      	ldr	r3, [r2, #0]
 80015c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	e7d6      	b.n	800157a <HAL_I2C_ER_IRQHandler+0x7e>
    I2C_ITError(hi2c);
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff fdbd 	bl	800114c <I2C_ITError>
}
 80015d2:	e7e6      	b.n	80015a2 <HAL_I2C_ER_IRQHandler+0xa6>
 80015d4:	00010100 	.word	0x00010100

080015d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma: DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80015d8:	b508      	push	{r3, lr}
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015da:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Disable Acknowledge */
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80015dc:	6802      	ldr	r2, [r0, #0]
 80015de:	6813      	ldr	r3, [r2, #0]
 80015e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015e4:	6013      	str	r3, [r2, #0]

  hi2c->XferCount = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	8543      	strh	r3, [r0, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 80015ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80015ec:	6353      	str	r3, [r2, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 80015ee:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80015f0:	6353      	str	r3, [r2, #52]	; 0x34

  /* Check if come from abort from user */
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 80015f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b60      	cmp	r3, #96	; 0x60
 80015fa:	d00d      	beq.n	8001618 <I2C_DMAAbort+0x40>
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_AbortCpltCallback(hi2c);
  }
  else
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80015fc:	2320      	movs	r3, #32
 80015fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001602:	2300      	movs	r3, #0
 8001604:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8001608:	6802      	ldr	r2, [r0, #0]
 800160a:	6813      	ldr	r3, [r2, #0]
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6013      	str	r3, [r2, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    HAL_I2C_ErrorCallback(hi2c);
 8001612:	f7ff fd99 	bl	8001148 <HAL_I2C_ErrorCallback>
  }
}
 8001616:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001618:	2320      	movs	r3, #32
 800161a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800161e:	2300      	movs	r3, #0
 8001620:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001624:	6403      	str	r3, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8001626:	6802      	ldr	r2, [r0, #0]
 8001628:	6813      	ldr	r3, [r2, #0]
 800162a:	f023 0301 	bic.w	r3, r3, #1
 800162e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001630:	f7ff fd8b 	bl	800114a <HAL_I2C_AbortCpltCallback>
 8001634:	e7ef      	b.n	8001616 <I2C_DMAAbort+0x3e>

08001636 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001636:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 800163a:	2b01      	cmp	r3, #1
 800163c:	d00d      	beq.n	800165a <HAL_PCD_SetAddress+0x24>
{
 800163e:	b510      	push	{r4, lr}
 8001640:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001642:	2301      	movs	r3, #1
 8001644:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 8001648:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800164c:	6800      	ldr	r0, [r0, #0]
 800164e:	f002 fa61 	bl	8003b14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001652:	2000      	movs	r0, #0
 8001654:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
}
 8001658:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800165a:	2002      	movs	r0, #2
}
 800165c:	4770      	bx	lr

0800165e <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800165e:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001660:	b24d      	sxtb	r5, r1
 8001662:	2d00      	cmp	r5, #0
 8001664:	db1c      	blt.n	80016a0 <HAL_PCD_EP_Open+0x42>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001666:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800166a:	0164      	lsls	r4, r4, #5
 800166c:	f504 740a 	add.w	r4, r4, #552	; 0x228
 8001670:	4404      	add	r4, r0
  }
  ep->num   = ep_addr & 0x7FU;
 8001672:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001676:	7021      	strb	r1, [r4, #0]
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8001678:	0fed      	lsrs	r5, r5, #31
 800167a:	7065      	strb	r5, [r4, #1]
  ep->maxpacket = ep_mps;
 800167c:	6122      	str	r2, [r4, #16]
  ep->type = ep_type;
 800167e:	70e3      	strb	r3, [r4, #3]
    
  __HAL_LOCK(hpcd);
 8001680:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
 8001684:	2b01      	cmp	r3, #1
 8001686:	d011      	beq.n	80016ac <HAL_PCD_EP_Open+0x4e>
 8001688:	4605      	mov	r5, r0
 800168a:	2301      	movs	r3, #1
 800168c:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8001690:	4621      	mov	r1, r4
 8001692:	6800      	ldr	r0, [r0, #0]
 8001694:	f002 f82a 	bl	80036ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001698:	2000      	movs	r0, #0
 800169a:	f885 0428 	strb.w	r0, [r5, #1064]	; 0x428
  return ret;
}
 800169e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016a0:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 80016a4:	0164      	lsls	r4, r4, #5
 80016a6:	3428      	adds	r4, #40	; 0x28
 80016a8:	4404      	add	r4, r0
 80016aa:	e7e2      	b.n	8001672 <HAL_PCD_EP_Open+0x14>
  __HAL_LOCK(hpcd);
 80016ac:	2002      	movs	r0, #2
 80016ae:	e7f6      	b.n	800169e <HAL_PCD_EP_Open+0x40>

080016b0 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80016b6:	016c      	lsls	r4, r5, #5
 80016b8:	f504 710a 	add.w	r1, r4, #552	; 0x228
 80016bc:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80016be:	4404      	add	r4, r0
 80016c0:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 80016c4:	f105 0212 	add.w	r2, r5, #18
 80016c8:	0152      	lsls	r2, r2, #5
 80016ca:	1886      	adds	r6, r0, r2
 80016cc:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	6073      	str	r3, [r6, #4]
  ep->is_in = 0U;
 80016d2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  ep->num = ep_addr & 0x7FU;
 80016d6:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228

  if ((ep_addr & 0x7FU) == 0U)
 80016da:	b125      	cbz	r5, 80016e6 <HAL_PCD_EP_Receive+0x36>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 80016dc:	6800      	ldr	r0, [r0, #0]
 80016de:	f002 fa39 	bl	8003b54 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80016e2:	2000      	movs	r0, #0
 80016e4:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 80016e6:	6800      	ldr	r0, [r0, #0]
 80016e8:	f002 fa34 	bl	8003b54 <USB_EPStartXfer>
 80016ec:	e7f9      	b.n	80016e2 <HAL_PCD_EP_Receive+0x32>

080016ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016ee:	b570      	push	{r4, r5, r6, lr}
 80016f0:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80016f4:	016c      	lsls	r4, r5, #5
 80016f6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80016fa:	4401      	add	r1, r0
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 80016fc:	4404      	add	r4, r0
 80016fe:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_len = len;
 8001700:	1caa      	adds	r2, r5, #2
 8001702:	0152      	lsls	r2, r2, #5
 8001704:	1886      	adds	r6, r0, r2
 8001706:	5083      	str	r3, [r0, r2]
  ep->xfer_count = 0U;
 8001708:	2300      	movs	r3, #0
 800170a:	6073      	str	r3, [r6, #4]
  ep->is_in = 1U;
 800170c:	2301      	movs	r3, #1
 800170e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  ep->num = ep_addr & 0x7FU;
 8001712:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28

  if ((ep_addr & 0x7FU) == 0U)
 8001716:	b125      	cbz	r5, 8001722 <HAL_PCD_EP_Transmit+0x34>
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001718:	6800      	ldr	r0, [r0, #0]
 800171a:	f002 fa1b 	bl	8003b54 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 800171e:	2000      	movs	r0, #0
 8001720:	bd70      	pop	{r4, r5, r6, pc}
    USB_EP0StartXfer(hpcd->Instance , ep);
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	f002 fa16 	bl	8003b54 <USB_EPStartXfer>
 8001728:	e7f9      	b.n	800171e <HAL_PCD_EP_Transmit+0x30>

0800172a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800172a:	b570      	push	{r4, r5, r6, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	4604      	mov	r4, r0
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8001730:	2300      	movs	r3, #0
 8001732:	f8ad 3006 	strh.w	r3, [sp, #6]
  __IO uint16_t wEPVal = 0;
 8001736:	f8ad 3004 	strh.w	r3, [sp, #4]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 800173a:	6820      	ldr	r0, [r4, #0]
 800173c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001740:	b29b      	uxth	r3, r3
 8001742:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001746:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800174a:	f000 820d 	beq.w	8001b68 <PCD_EP_ISR_Handler+0x43e>
  {
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800174e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
    
    if (epindex == 0)
 8001752:	f015 050f 	ands.w	r5, r5, #15
 8001756:	f040 80c2 	bne.w	80018de <PCD_EP_ISR_Handler+0x1b4>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 800175a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800175e:	f013 0f10 	tst.w	r3, #16
 8001762:	d050      	beq.n	8001806 <PCD_EP_ISR_Handler+0xdc>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0U];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001764:	8803      	ldrh	r3, [r0, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	f8ad 3004 	strh.w	r3, [sp, #4]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800176c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001770:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001774:	d179      	bne.n	800186a <PCD_EP_ISR_Handler+0x140>
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001776:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800177a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800177e:	d0dc      	beq.n	800173a <PCD_EP_ISR_Handler+0x10>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001780:	8803      	ldrh	r3, [r0, #0]
 8001782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001786:	051b      	lsls	r3, r3, #20
 8001788:	0d1b      	lsrs	r3, r3, #20
 800178a:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001792:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800179a:	3306      	adds	r3, #6
 800179c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80017a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80017a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017a8:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          
          if (ep->xfer_count != 0U)
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d17c      	bne.n	80018aa <PCD_EP_ISR_Handler+0x180>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
            ep->xfer_buff+=ep->xfer_count;
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80017b0:	2100      	movs	r1, #0
 80017b2:	4620      	mov	r0, r4
 80017b4:	f003 fb30 	bl	8004e18 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80017be:	3206      	adds	r2, #6
 80017c0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80017c4:	f8d4 1238 	ldr.w	r1, [r4, #568]	; 0x238
 80017c8:	293e      	cmp	r1, #62	; 0x3e
 80017ca:	d97c      	bls.n	80018c6 <PCD_EP_ISR_Handler+0x19c>
 80017cc:	f3c1 124f 	ubfx	r2, r1, #5, #16
 80017d0:	f011 0f1f 	tst.w	r1, #31
 80017d4:	d101      	bne.n	80017da <PCD_EP_ISR_Handler+0xb0>
 80017d6:	3a01      	subs	r2, #1
 80017d8:	b292      	uxth	r2, r2
 80017da:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 80017de:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80017e2:	b292      	uxth	r2, r2
 80017e4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	8813      	ldrh	r3, [r2, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017f6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80017fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001802:	8013      	strh	r3, [r2, #0]
 8001804:	e799      	b.n	800173a <PCD_EP_ISR_Handler+0x10>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001806:	8803      	ldrh	r3, [r0, #0]
 8001808:	b29b      	uxth	r3, r3
 800180a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001812:	b29b      	uxth	r3, r3
 8001814:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800181c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001820:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001824:	3302      	adds	r3, #2
 8001826:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800182a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800182e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001832:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001834:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001836:	4413      	add	r3, r2
 8001838:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800183a:	2100      	movs	r1, #0
 800183c:	4620      	mov	r0, r4
 800183e:	f003 faf5 	bl	8004e2c <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001842:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	f43f af77 	beq.w	800173a <PCD_EP_ISR_Handler+0x10>
 800184c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800184e:	2b00      	cmp	r3, #0
 8001850:	f47f af73 	bne.w	800173a <PCD_EP_ISR_Handler+0x10>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001854:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001858:	6822      	ldr	r2, [r4, #0]
 800185a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185e:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001868:	e767      	b.n	800173a <PCD_EP_ISR_Handler+0x10>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800186a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800186e:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001876:	3306      	adds	r3, #6
 8001878:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800187c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001884:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001888:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 800188c:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001890:	f002 fabd 	bl	8003e0e <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001894:	6822      	ldr	r2, [r4, #0]
 8001896:	8813      	ldrh	r3, [r2, #0]
 8001898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800189c:	051b      	lsls	r3, r3, #20
 800189e:	0d1b      	lsrs	r3, r3, #20
 80018a0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80018a2:	4620      	mov	r0, r4
 80018a4:	f003 fab0 	bl	8004e08 <HAL_PCD_SetupStageCallback>
 80018a8:	e747      	b.n	800173a <PCD_EP_ISR_Handler+0x10>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80018aa:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80018ae:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 80018b2:	f002 faac 	bl	8003e0e <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 80018b6:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 80018ba:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 80018be:	4413      	add	r3, r2
 80018c0:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
 80018c4:	e774      	b.n	80017b0 <PCD_EP_ISR_Handler+0x86>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80018c6:	f3c1 024f 	ubfx	r2, r1, #1, #16
 80018ca:	f011 0f01 	tst.w	r1, #1
 80018ce:	d001      	beq.n	80018d4 <PCD_EP_ISR_Handler+0x1aa>
 80018d0:	3201      	adds	r2, #1
 80018d2:	b292      	uxth	r2, r2
 80018d4:	0292      	lsls	r2, r2, #10
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80018dc:	e784      	b.n	80017e8 <PCD_EP_ISR_Handler+0xbe>
    else
    {
      /* Decode and service non control endpoints interrupt  */
	  
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018de:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f8ad 3004 	strh.w	r3, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80018ec:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80018f0:	d135      	bne.n	800195e <PCD_EP_ISR_Handler+0x234>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80018f6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018fa:	f43f af1e 	beq.w	800173a <PCD_EP_ISR_Handler+0x10>
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	f832 3025 	ldrh.w	r3, [r2, r5, lsl #2]
 8001904:	b29b      	uxth	r3, r3
 8001906:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190e:	b29b      	uxth	r3, r3
 8001910:	f822 3025 	strh.w	r3, [r2, r5, lsl #2]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001914:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001918:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800191c:	2b00      	cmp	r3, #0
 800191e:	f040 80b2 	bne.w	8001a86 <PCD_EP_ISR_Handler+0x35c>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001922:	6820      	ldr	r0, [r4, #0]
 8001924:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001928:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800192c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8001930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001934:	3302      	adds	r3, #2
 8001936:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800193a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800193e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001942:	1caa      	adds	r2, r5, #2
 8001944:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8001948:	6053      	str	r3, [r2, #4]
          if (ep->xfer_count != 0U)
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80c6 	beq.w	8001adc <PCD_EP_ISR_Handler+0x3b2>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001950:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001954:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001956:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001958:	f002 f8e7 	bl	8003b2a <USB_WritePMA>
 800195c:	e0be      	b.n	8001adc <PCD_EP_ISR_Handler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800195e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001966:	051b      	lsls	r3, r3, #20
 8001968:	0d1b      	lsrs	r3, r3, #20
 800196a:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 800196e:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001972:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 8001976:	b9d3      	cbnz	r3, 80019ae <PCD_EP_ISR_Handler+0x284>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001978:	6820      	ldr	r0, [r4, #0]
 800197a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800197e:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 8001982:	f892 2228 	ldrb.w	r2, [r2, #552]	; 0x228
 8001986:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800198a:	3306      	adds	r3, #6
 800198c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001990:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8001994:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8001998:	b386      	cbz	r6, 80019fc <PCD_EP_ISR_Handler+0x2d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800199a:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 800199e:	4633      	mov	r3, r6
 80019a0:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80019a4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80019a8:	f002 fa31 	bl	8003e0e <USB_ReadPMA>
 80019ac:	e026      	b.n	80019fc <PCD_EP_ISR_Handler+0x2d2>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80019ae:	6820      	ldr	r0, [r4, #0]
 80019b0:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80019b4:	f893 2228 	ldrb.w	r2, [r3, #552]	; 0x228
 80019b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019bc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80019c0:	d042      	beq.n	8001a48 <PCD_EP_ISR_Handler+0x31e>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019c2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019ca:	3302      	adds	r3, #2
 80019cc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80019d0:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 80019d4:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 80019d8:	bb66      	cbnz	r6, 8001a34 <PCD_EP_ISR_Handler+0x30a>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80019da:	6822      	ldr	r2, [r4, #0]
 80019dc:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80019e0:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 80019e4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80019e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019ec:	051b      	lsls	r3, r3, #20
 80019ee:	0d1b      	lsrs	r3, r3, #20
 80019f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019f8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        ep->xfer_count+=count;
 80019fc:	f105 0312 	add.w	r3, r5, #18
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	18e1      	adds	r1, r4, r3
 8001a04:	684a      	ldr	r2, [r1, #4]
 8001a06:	4432      	add	r2, r6
 8001a08:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=count;
 8001a0a:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001a0e:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
 8001a12:	4432      	add	r2, r6
 8001a14:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a18:	58e3      	ldr	r3, [r4, r3]
 8001a1a:	b11b      	cbz	r3, 8001a24 <PCD_EP_ISR_Handler+0x2fa>
 8001a1c:	f8d1 1238 	ldr.w	r1, [r1, #568]	; 0x238
 8001a20:	428e      	cmp	r6, r1
 8001a22:	d228      	bcs.n	8001a76 <PCD_EP_ISR_Handler+0x34c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a24:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001a28:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f003 f9f3 	bl	8004e18 <HAL_PCD_DataOutStageCallback>
 8001a32:	e75e      	b.n	80018f2 <PCD_EP_ISR_Handler+0x1c8>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a34:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001a38:	4633      	mov	r3, r6
 8001a3a:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
 8001a3e:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001a42:	f002 f9e4 	bl	8003e0e <USB_ReadPMA>
 8001a46:	e7c8      	b.n	80019da <PCD_EP_ISR_Handler+0x2b0>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a48:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a50:	3306      	adds	r3, #6
 8001a52:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a56:	f8b3 6400 	ldrh.w	r6, [r3, #1024]	; 0x400
 8001a5a:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001a5e:	2e00      	cmp	r6, #0
 8001a60:	d0bb      	beq.n	80019da <PCD_EP_ISR_Handler+0x2b0>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a62:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001a66:	4633      	mov	r3, r6
 8001a68:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001a6c:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001a70:	f002 f9cd 	bl	8003e0e <USB_ReadPMA>
 8001a74:	e7b1      	b.n	80019da <PCD_EP_ISR_Handler+0x2b0>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001a76:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001a7a:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff fe16 	bl	80016b0 <HAL_PCD_EP_Receive>
 8001a84:	e735      	b.n	80018f2 <PCD_EP_ISR_Handler+0x1c8>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001a86:	6820      	ldr	r0, [r4, #0]
 8001a88:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001a8c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8001a90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a94:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001a98:	d046      	beq.n	8001b28 <PCD_EP_ISR_Handler+0x3fe>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a9a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001aa8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ab0:	1caa      	adds	r2, r5, #2
 8001ab2:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8001ab6:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8001ab8:	bb7b      	cbnz	r3, 8001b1a <PCD_EP_ISR_Handler+0x3f0>
            if (ep->xfer_count != 0U)
            {
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001aba:	6822      	ldr	r2, [r4, #0]
 8001abc:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001ac0:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001ac4:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001acc:	051b      	lsls	r3, r3, #20
 8001ace:	0d1b      	lsrs	r3, r3, #20
 8001ad0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ad8:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001adc:	6822      	ldr	r2, [r4, #0]
 8001ade:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001ae2:	eb04 1045 	add.w	r0, r4, r5, lsl #5
 8001ae6:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8001aea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001aee:	3302      	adds	r3, #2
 8001af0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001af4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001af8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001afc:	1cab      	adds	r3, r5, #2
 8001afe:	015b      	lsls	r3, r3, #5
 8001b00:	18e1      	adds	r1, r4, r3
 8001b02:	604a      	str	r2, [r1, #4]
        ep->xfer_buff+=ep->xfer_count;
 8001b04:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001b06:	440a      	add	r2, r1
 8001b08:	63c2      	str	r2, [r0, #60]	; 0x3c
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001b0a:	58e3      	ldr	r3, [r4, r3]
 8001b0c:	bb23      	cbnz	r3, 8001b58 <PCD_EP_ISR_Handler+0x42e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001b0e:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
 8001b12:	4620      	mov	r0, r4
 8001b14:	f003 f98a 	bl	8004e2c <HAL_PCD_DataInStageCallback>
 8001b18:	e60f      	b.n	800173a <PCD_EP_ISR_Handler+0x10>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001b1a:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001b1e:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
 8001b20:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001b22:	f002 f802 	bl	8003b2a <USB_WritePMA>
 8001b26:	e7c8      	b.n	8001aba <PCD_EP_ISR_Handler+0x390>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001b28:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b30:	3306      	adds	r3, #6
 8001b32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001b36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b3e:	1caa      	adds	r2, r5, #2
 8001b40:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 8001b44:	6053      	str	r3, [r2, #4]
            if (ep->xfer_count != 0U)
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0b7      	beq.n	8001aba <PCD_EP_ISR_Handler+0x390>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001b4a:	eb04 1145 	add.w	r1, r4, r5, lsl #5
 8001b4e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001b50:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001b52:	f001 ffea 	bl	8003b2a <USB_WritePMA>
 8001b56:	e7b0      	b.n	8001aba <PCD_EP_ISR_Handler+0x390>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001b58:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001b5c:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001b60:	4620      	mov	r0, r4
 8001b62:	f7ff fdc4 	bl	80016ee <HAL_PCD_EP_Transmit>
 8001b66:	e5e8      	b.n	800173a <PCD_EP_ISR_Handler+0x10>
        }
      } 
    }
  }
  return HAL_OK;
}
 8001b68:	2000      	movs	r0, #0
 8001b6a:	b002      	add	sp, #8
 8001b6c:	bd70      	pop	{r4, r5, r6, pc}

08001b6e <HAL_PCD_IRQHandler>:
{ 
 8001b6e:	b510      	push	{r4, lr}
 8001b70:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8001b72:	6800      	ldr	r0, [r0, #0]
 8001b74:	f001 ffd4 	bl	8003b20 <USB_ReadInterrupts>
 8001b78:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8001b7c:	d145      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x9c>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001b7e:	6820      	ldr	r0, [r4, #0]
 8001b80:	f001 ffce 	bl	8003b20 <USB_ReadInterrupts>
 8001b84:	f410 6f80 	tst.w	r0, #1024	; 0x400
 8001b88:	d143      	bne.n	8001c12 <HAL_PCD_IRQHandler+0xa4>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8001b8a:	6820      	ldr	r0, [r4, #0]
 8001b8c:	f001 ffc8 	bl	8003b20 <USB_ReadInterrupts>
 8001b90:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8001b94:	d008      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x3a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8001b96:	6822      	ldr	r2, [r4, #0]
 8001b98:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8001ba8:	6820      	ldr	r0, [r4, #0]
 8001baa:	f001 ffb9 	bl	8003b20 <USB_ReadInterrupts>
 8001bae:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001bb2:	d008      	beq.n	8001bc6 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8001bb4:	6822      	ldr	r2, [r4, #0]
 8001bb6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8001bc6:	6820      	ldr	r0, [r4, #0]
 8001bc8:	f001 ffaa 	bl	8003b20 <USB_ReadInterrupts>
 8001bcc:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001bd0:	d130      	bne.n	8001c34 <HAL_PCD_IRQHandler+0xc6>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8001bd2:	6820      	ldr	r0, [r4, #0]
 8001bd4:	f001 ffa4 	bl	8003b20 <USB_ReadInterrupts>
 8001bd8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001bdc:	d149      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x104>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001bde:	6820      	ldr	r0, [r4, #0]
 8001be0:	f001 ff9e 	bl	8003b20 <USB_ReadInterrupts>
 8001be4:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001be8:	d164      	bne.n	8001cb4 <HAL_PCD_IRQHandler+0x146>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001bea:	6820      	ldr	r0, [r4, #0]
 8001bec:	f001 ff98 	bl	8003b20 <USB_ReadInterrupts>
 8001bf0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8001bf4:	d008      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x9a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8001bf6:	6822      	ldr	r2, [r4, #0]
 8001bf8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8001c08:	bd10      	pop	{r4, pc}
    PCD_EP_ISR_Handler(hpcd);
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7ff fd8d 	bl	800172a <PCD_EP_ISR_Handler>
 8001c10:	e7b5      	b.n	8001b7e <HAL_PCD_IRQHandler+0x10>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001c24:	4620      	mov	r0, r4
 8001c26:	f003 f910 	bl	8004e4a <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	f7ff fd02 	bl	8001636 <HAL_PCD_SetAddress>
 8001c32:	e7aa      	b.n	8001b8a <HAL_PCD_IRQHandler+0x1c>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8001c34:	6822      	ldr	r2, [r4, #0]
 8001c36:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8001c46:	6822      	ldr	r2, [r4, #0]
 8001c48:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	f023 0308 	bic.w	r3, r3, #8
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001c58:	4620      	mov	r0, r4
 8001c5a:	f003 f913 	bl	8004e84 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 8001c70:	e7af      	b.n	8001bd2 <HAL_PCD_IRQHandler+0x64>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001c72:	6822      	ldr	r2, [r4, #0]
 8001c74:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001c78:	f043 0308 	orr.w	r3, r3, #8
 8001c7c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001c80:	6822      	ldr	r2, [r4, #0]
 8001c82:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8001c98:	f043 0304 	orr.w	r3, r3, #4
 8001c9c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	f001 ff3d 	bl	8003b20 <USB_ReadInterrupts>
 8001ca6:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001caa:	d198      	bne.n	8001bde <HAL_PCD_IRQHandler+0x70>
      HAL_PCD_SuspendCallback(hpcd);
 8001cac:	4620      	mov	r0, r4
 8001cae:	f003 f8d9 	bl	8004e64 <HAL_PCD_SuspendCallback>
 8001cb2:	e794      	b.n	8001bde <HAL_PCD_IRQHandler+0x70>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001cb4:	6822      	ldr	r2, [r4, #0]
 8001cb6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001cc6:	4620      	mov	r0, r4
 8001cc8:	f003 f8b9 	bl	8004e3e <HAL_PCD_SOFCallback>
 8001ccc:	e78d      	b.n	8001bea <HAL_PCD_IRQHandler+0x7c>

08001cce <HAL_PCD_EP_SetStall>:
{
 8001cce:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001cd0:	b24a      	sxtb	r2, r1
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	db1b      	blt.n	8001d0e <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->OUT_ep[ep_addr];
 8001cd6:	014b      	lsls	r3, r1, #5
 8001cd8:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001cdc:	4403      	add	r3, r0
  ep->is_stall = 1U;
 8001cde:	2401      	movs	r4, #1
 8001ce0:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001ce2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8001ce6:	701d      	strb	r5, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001ce8:	0fd2      	lsrs	r2, r2, #31
 8001cea:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd);
 8001cec:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8001cf0:	42a2      	cmp	r2, r4
 8001cf2:	d018      	beq.n	8001d26 <HAL_PCD_EP_SetStall+0x58>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	6800      	ldr	r0, [r0, #0]
 8001d00:	f001 fe88 	bl	8003a14 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001d04:	b14d      	cbz	r5, 8001d1a <HAL_PCD_EP_SetStall+0x4c>
  __HAL_UNLOCK(hpcd); 
 8001d06:	2000      	movs	r0, #0
 8001d08:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8001d0c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d0e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8001d12:	015b      	lsls	r3, r3, #5
 8001d14:	3328      	adds	r3, #40	; 0x28
 8001d16:	4403      	add	r3, r0
 8001d18:	e7e1      	b.n	8001cde <HAL_PCD_EP_SetStall+0x10>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d1a:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001d1e:	6820      	ldr	r0, [r4, #0]
 8001d20:	f001 ff01 	bl	8003b26 <USB_EP0_OutStart>
 8001d24:	e7ef      	b.n	8001d06 <HAL_PCD_EP_SetStall+0x38>
  __HAL_LOCK(hpcd);
 8001d26:	2002      	movs	r0, #2
 8001d28:	e7f0      	b.n	8001d0c <HAL_PCD_EP_SetStall+0x3e>

08001d2a <HAL_PCD_EP_ClrStall>:
{
 8001d2a:	b510      	push	{r4, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001d2c:	b24a      	sxtb	r2, r1
 8001d2e:	2a00      	cmp	r2, #0
 8001d30:	db1a      	blt.n	8001d68 <HAL_PCD_EP_ClrStall+0x3e>
    ep = &hpcd->OUT_ep[ep_addr];
 8001d32:	014b      	lsls	r3, r1, #5
 8001d34:	f503 730a 	add.w	r3, r3, #552	; 0x228
 8001d38:	4403      	add	r3, r0
  ep->is_stall = 0U;
 8001d3a:	2400      	movs	r4, #0
 8001d3c:	709c      	strb	r4, [r3, #2]
  ep->num   = ep_addr & 0x7FU;
 8001d3e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001d42:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001d44:	0fd2      	lsrs	r2, r2, #31
 8001d46:	705a      	strb	r2, [r3, #1]
  __HAL_LOCK(hpcd); 
 8001d48:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
 8001d4c:	2a01      	cmp	r2, #1
 8001d4e:	d011      	beq.n	8001d74 <HAL_PCD_EP_ClrStall+0x4a>
 8001d50:	4604      	mov	r4, r0
 8001d52:	2201      	movs	r2, #1
 8001d54:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6800      	ldr	r0, [r0, #0]
 8001d5c:	f001 fe91 	bl	8003a82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001d60:	2000      	movs	r0, #0
 8001d62:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
}
 8001d66:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d68:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8001d6c:	015b      	lsls	r3, r3, #5
 8001d6e:	3328      	adds	r3, #40	; 0x28
 8001d70:	4403      	add	r3, r0
 8001d72:	e7e2      	b.n	8001d3a <HAL_PCD_EP_ClrStall+0x10>
  __HAL_LOCK(hpcd); 
 8001d74:	2002      	movs	r0, #2
 8001d76:	e7f6      	b.n	8001d66 <HAL_PCD_EP_ClrStall+0x3c>

08001d78 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <HAL_PWR_EnableBkUpAccess+0x8>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	4770      	bx	lr
 8001d80:	420e0020 	.word	0x420e0020

08001d84 <HAL_PWR_DisableWakeUpPin>:
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	fa90 f0a0 	rbit	r0, r0
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Disable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)DISABLE;
 8001d88:	fab0 f080 	clz	r0, r0
 8001d8c:	4b02      	ldr	r3, [pc, #8]	; (8001d98 <HAL_PWR_DisableWakeUpPin+0x14>)
 8001d8e:	4403      	add	r3, r0
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	4770      	bx	lr
 8001d98:	10838020 	.word	0x10838020

08001d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d9c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d9e:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <RCC_Delay+0x24>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <RCC_Delay+0x28>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	0a5b      	lsrs	r3, r3, #9
 8001daa:	fb00 f003 	mul.w	r0, r0, r3
 8001dae:	9001      	str	r0, [sp, #4]
  __ASM volatile ("nop");
 8001db0:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001db2:	9b01      	ldr	r3, [sp, #4]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	9201      	str	r2, [sp, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <RCC_Delay+0x14>
}
 8001dbc:	b002      	add	sp, #8
 8001dbe:	4770      	bx	lr
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	10624dd3 	.word	0x10624dd3

08001dc8 <HAL_RCC_OscConfig>:
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	6803      	ldr	r3, [r0, #0]
 8001dd0:	f013 0f01 	tst.w	r3, #1
 8001dd4:	d02c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x68>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dd6:	4bab      	ldr	r3, [pc, #684]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d01d      	beq.n	8001e1e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de2:	4ba8      	ldr	r3, [pc, #672]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d012      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dee:	6863      	ldr	r3, [r4, #4]
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d041      	beq.n	8001e7a <HAL_RCC_OscConfig+0xb2>
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d155      	bne.n	8001ea6 <HAL_RCC_OscConfig+0xde>
 8001dfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001dfe:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e037      	b.n	8001e84 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e14:	4b9b      	ldr	r3, [pc, #620]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001e1c:	d0e7      	beq.n	8001dee <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	4b99      	ldr	r3, [pc, #612]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e26:	d003      	beq.n	8001e30 <HAL_RCC_OscConfig+0x68>
 8001e28:	6863      	ldr	r3, [r4, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 81ae 	beq.w	800218c <HAL_RCC_OscConfig+0x3c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	f013 0f02 	tst.w	r3, #2
 8001e36:	d076      	beq.n	8001f26 <HAL_RCC_OscConfig+0x15e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e38:	4b92      	ldr	r3, [pc, #584]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f013 0f0c 	tst.w	r3, #12
 8001e40:	d05f      	beq.n	8001f02 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e42:	4b90      	ldr	r3, [pc, #576]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b08      	cmp	r3, #8
 8001e4c:	d054      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x130>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e4e:	6923      	ldr	r3, [r4, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 808a 	beq.w	8001f6a <HAL_RCC_OscConfig+0x1a2>
        __HAL_RCC_HSI_ENABLE();
 8001e56:	4b8c      	ldr	r3, [pc, #560]	; (8002088 <HAL_RCC_OscConfig+0x2c0>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001e5c:	f7fe f9b8 	bl	80001d0 <HAL_GetTick>
 8001e60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b88      	ldr	r3, [pc, #544]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f013 0f02 	tst.w	r3, #2
 8001e6a:	d175      	bne.n	8001f58 <HAL_RCC_OscConfig+0x190>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7fe f9b0 	bl	80001d0 <HAL_GetTick>
 8001e70:	1b40      	subs	r0, r0, r5
 8001e72:	2802      	cmp	r0, #2
 8001e74:	d9f5      	bls.n	8001e62 <HAL_RCC_OscConfig+0x9a>
            return HAL_TIMEOUT;
 8001e76:	2003      	movs	r0, #3
 8001e78:	e18b      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	4a82      	ldr	r2, [pc, #520]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001e7c:	6813      	ldr	r3, [r2, #0]
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	6863      	ldr	r3, [r4, #4]
 8001e86:	b343      	cbz	r3, 8001eda <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8001e88:	f7fe f9a2 	bl	80001d0 <HAL_GetTick>
 8001e8c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b7d      	ldr	r3, [pc, #500]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001e96:	d1cb      	bne.n	8001e30 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e98:	f7fe f99a 	bl	80001d0 <HAL_GetTick>
 8001e9c:	1b40      	subs	r0, r0, r5
 8001e9e:	2864      	cmp	r0, #100	; 0x64
 8001ea0:	d9f5      	bls.n	8001e8e <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 8001ea2:	2003      	movs	r0, #3
 8001ea4:	e175      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eaa:	d009      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xf8>
 8001eac:	4b75      	ldr	r3, [pc, #468]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e7e1      	b.n	8001e84 <HAL_RCC_OscConfig+0xbc>
 8001ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	e7d4      	b.n	8001e84 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8001eda:	f7fe f979 	bl	80001d0 <HAL_GetTick>
 8001ede:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee0:	4b68      	ldr	r3, [pc, #416]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001ee8:	d0a2      	beq.n	8001e30 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eea:	f7fe f971 	bl	80001d0 <HAL_GetTick>
 8001eee:	1b40      	subs	r0, r0, r5
 8001ef0:	2864      	cmp	r0, #100	; 0x64
 8001ef2:	d9f5      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x118>
            return HAL_TIMEOUT;
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	e14c      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef8:	4b62      	ldr	r3, [pc, #392]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001f00:	d1a5      	bne.n	8001e4e <HAL_RCC_OscConfig+0x86>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f02:	4b60      	ldr	r3, [pc, #384]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f013 0f02 	tst.w	r3, #2
 8001f0a:	d004      	beq.n	8001f16 <HAL_RCC_OscConfig+0x14e>
 8001f0c:	6923      	ldr	r3, [r4, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8001f12:	2001      	movs	r0, #1
 8001f14:	e13d      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4a5b      	ldr	r2, [pc, #364]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001f18:	6813      	ldr	r3, [r2, #0]
 8001f1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f1e:	6961      	ldr	r1, [r4, #20]
 8001f20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f24:	6013      	str	r3, [r2, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f013 0f08 	tst.w	r3, #8
 8001f2c:	d032      	beq.n	8001f94 <HAL_RCC_OscConfig+0x1cc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2e:	69a3      	ldr	r3, [r4, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d05b      	beq.n	8001fec <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8001f34:	4b55      	ldr	r3, [pc, #340]	; (800208c <HAL_RCC_OscConfig+0x2c4>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f3a:	f7fe f949 	bl	80001d0 <HAL_GetTick>
 8001f3e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f40:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	f013 0f02 	tst.w	r3, #2
 8001f48:	d121      	bne.n	8001f8e <HAL_RCC_OscConfig+0x1c6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4a:	f7fe f941 	bl	80001d0 <HAL_GetTick>
 8001f4e:	1b40      	subs	r0, r0, r5
 8001f50:	2802      	cmp	r0, #2
 8001f52:	d9f5      	bls.n	8001f40 <HAL_RCC_OscConfig+0x178>
          return HAL_TIMEOUT;
 8001f54:	2003      	movs	r0, #3
 8001f56:	e11c      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4a4a      	ldr	r2, [pc, #296]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001f5a:	6813      	ldr	r3, [r2, #0]
 8001f5c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f60:	6961      	ldr	r1, [r4, #20]
 8001f62:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	e7dd      	b.n	8001f26 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <HAL_RCC_OscConfig+0x2c0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f70:	f7fe f92e 	bl	80001d0 <HAL_GetTick>
 8001f74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f76:	4b43      	ldr	r3, [pc, #268]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f013 0f02 	tst.w	r3, #2
 8001f7e:	d0d2      	beq.n	8001f26 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f80:	f7fe f926 	bl	80001d0 <HAL_GetTick>
 8001f84:	1b40      	subs	r0, r0, r5
 8001f86:	2802      	cmp	r0, #2
 8001f88:	d9f5      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1ae>
            return HAL_TIMEOUT;
 8001f8a:	2003      	movs	r0, #3
 8001f8c:	e101      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
      RCC_Delay(1);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f7ff ff04 	bl	8001d9c <RCC_Delay>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	f013 0f04 	tst.w	r3, #4
 8001f9a:	f000 8097 	beq.w	80020cc <HAL_RCC_OscConfig+0x304>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9e:	4b39      	ldr	r3, [pc, #228]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001fa6:	d133      	bne.n	8002010 <HAL_RCC_OscConfig+0x248>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa8:	4b36      	ldr	r3, [pc, #216]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001faa:	69da      	ldr	r2, [r3, #28]
 8001fac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fb0:	61da      	str	r2, [r3, #28]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fbc:	2501      	movs	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbe:	4b34      	ldr	r3, [pc, #208]	; (8002090 <HAL_RCC_OscConfig+0x2c8>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001fc6:	d025      	beq.n	8002014 <HAL_RCC_OscConfig+0x24c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc8:	68e3      	ldr	r3, [r4, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d036      	beq.n	800203c <HAL_RCC_OscConfig+0x274>
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d14c      	bne.n	800206c <HAL_RCC_OscConfig+0x2a4>
 8001fd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001fd6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001fda:	6a1a      	ldr	r2, [r3, #32]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	621a      	str	r2, [r3, #32]
 8001fe2:	6a1a      	ldr	r2, [r3, #32]
 8001fe4:	f022 0204 	bic.w	r2, r2, #4
 8001fe8:	621a      	str	r2, [r3, #32]
 8001fea:	e02c      	b.n	8002046 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_DISABLE();
 8001fec:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_RCC_OscConfig+0x2c4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ff2:	f7fe f8ed 	bl	80001d0 <HAL_GetTick>
 8001ff6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f013 0f02 	tst.w	r3, #2
 8002000:	d0c8      	beq.n	8001f94 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002002:	f7fe f8e5 	bl	80001d0 <HAL_GetTick>
 8002006:	1b40      	subs	r0, r0, r5
 8002008:	2802      	cmp	r0, #2
 800200a:	d9f5      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x230>
          return HAL_TIMEOUT;
 800200c:	2003      	movs	r0, #3
 800200e:	e0c0      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
    FlagStatus       pwrclkchanged = RESET;
 8002010:	2500      	movs	r5, #0
 8002012:	e7d4      	b.n	8001fbe <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002014:	4a1e      	ldr	r2, [pc, #120]	; (8002090 <HAL_RCC_OscConfig+0x2c8>)
 8002016:	6813      	ldr	r3, [r2, #0]
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800201e:	f7fe f8d7 	bl	80001d0 <HAL_GetTick>
 8002022:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002024:	4b1a      	ldr	r3, [pc, #104]	; (8002090 <HAL_RCC_OscConfig+0x2c8>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f413 7f80 	tst.w	r3, #256	; 0x100
 800202c:	d1cc      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7fe f8cf 	bl	80001d0 <HAL_GetTick>
 8002032:	1b80      	subs	r0, r0, r6
 8002034:	2864      	cmp	r0, #100	; 0x64
 8002036:	d9f5      	bls.n	8002024 <HAL_RCC_OscConfig+0x25c>
          return HAL_TIMEOUT;
 8002038:	2003      	movs	r0, #3
 800203a:	e0aa      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 800203e:	6a13      	ldr	r3, [r2, #32]
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002046:	68e3      	ldr	r3, [r4, #12]
 8002048:	b373      	cbz	r3, 80020a8 <HAL_RCC_OscConfig+0x2e0>
      tickstart = HAL_GetTick();
 800204a:	f7fe f8c1 	bl	80001d0 <HAL_GetTick>
 800204e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f013 0f02 	tst.w	r3, #2
 8002058:	d137      	bne.n	80020ca <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe f8b9 	bl	80001d0 <HAL_GetTick>
 800205e:	1b80      	subs	r0, r0, r6
 8002060:	f241 3388 	movw	r3, #5000	; 0x1388
 8002064:	4298      	cmp	r0, r3
 8002066:	d9f3      	bls.n	8002050 <HAL_RCC_OscConfig+0x288>
          return HAL_TIMEOUT;
 8002068:	2003      	movs	r0, #3
 800206a:	e092      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800206c:	2b05      	cmp	r3, #5
 800206e:	d011      	beq.n	8002094 <HAL_RCC_OscConfig+0x2cc>
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCC_OscConfig+0x2bc>)
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	621a      	str	r2, [r3, #32]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	f022 0204 	bic.w	r2, r2, #4
 8002080:	621a      	str	r2, [r3, #32]
 8002082:	e7e0      	b.n	8002046 <HAL_RCC_OscConfig+0x27e>
 8002084:	40021000 	.word	0x40021000
 8002088:	42420000 	.word	0x42420000
 800208c:	42420480 	.word	0x42420480
 8002090:	40007000 	.word	0x40007000
 8002094:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 8002096:	6a1a      	ldr	r2, [r3, #32]
 8002098:	f042 0204 	orr.w	r2, r2, #4
 800209c:	621a      	str	r2, [r3, #32]
 800209e:	6a1a      	ldr	r2, [r3, #32]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	621a      	str	r2, [r3, #32]
 80020a6:	e7ce      	b.n	8002046 <HAL_RCC_OscConfig+0x27e>
      tickstart = HAL_GetTick();
 80020a8:	f7fe f892 	bl	80001d0 <HAL_GetTick>
 80020ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	f013 0f02 	tst.w	r3, #2
 80020b6:	d008      	beq.n	80020ca <HAL_RCC_OscConfig+0x302>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7fe f88a 	bl	80001d0 <HAL_GetTick>
 80020bc:	1b80      	subs	r0, r0, r6
 80020be:	f241 3388 	movw	r3, #5000	; 0x1388
 80020c2:	4298      	cmp	r0, r3
 80020c4:	d9f3      	bls.n	80020ae <HAL_RCC_OscConfig+0x2e6>
          return HAL_TIMEOUT;
 80020c6:	2003      	movs	r0, #3
 80020c8:	e063      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 80020ca:	b9e5      	cbnz	r5, 8002106 <HAL_RCC_OscConfig+0x33e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020cc:	69e3      	ldr	r3, [r4, #28]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d05e      	beq.n	8002190 <HAL_RCC_OscConfig+0x3c8>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d2:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 80020d4:	6852      	ldr	r2, [r2, #4]
 80020d6:	f002 020c 	and.w	r2, r2, #12
 80020da:	2a08      	cmp	r2, #8
 80020dc:	d05b      	beq.n	8002196 <HAL_RCC_OscConfig+0x3ce>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d017      	beq.n	8002112 <HAL_RCC_OscConfig+0x34a>
        __HAL_RCC_PLL_DISABLE();
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <HAL_RCC_OscConfig+0x3d8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020e8:	f7fe f872 	bl	80001d0 <HAL_GetTick>
 80020ec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ee:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80020f6:	d047      	beq.n	8002188 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe f86a 	bl	80001d0 <HAL_GetTick>
 80020fc:	1b00      	subs	r0, r0, r4
 80020fe:	2802      	cmp	r0, #2
 8002100:	d9f5      	bls.n	80020ee <HAL_RCC_OscConfig+0x326>
            return HAL_TIMEOUT;
 8002102:	2003      	movs	r0, #3
 8002104:	e045      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002106:	4a25      	ldr	r2, [pc, #148]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 8002108:	69d3      	ldr	r3, [r2, #28]
 800210a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210e:	61d3      	str	r3, [r2, #28]
 8002110:	e7dc      	b.n	80020cc <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_DISABLE();
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_RCC_OscConfig+0x3d8>)
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002118:	f7fe f85a 	bl	80001d0 <HAL_GetTick>
 800211c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211e:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002126:	d006      	beq.n	8002136 <HAL_RCC_OscConfig+0x36e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002128:	f7fe f852 	bl	80001d0 <HAL_GetTick>
 800212c:	1b40      	subs	r0, r0, r5
 800212e:	2802      	cmp	r0, #2
 8002130:	d9f5      	bls.n	800211e <HAL_RCC_OscConfig+0x356>
            return HAL_TIMEOUT;
 8002132:	2003      	movs	r0, #3
 8002134:	e02d      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002136:	6a23      	ldr	r3, [r4, #32]
 8002138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213c:	d01a      	beq.n	8002174 <HAL_RCC_OscConfig+0x3ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800213e:	4917      	ldr	r1, [pc, #92]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 8002140:	684b      	ldr	r3, [r1, #4]
 8002142:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8002146:	6a22      	ldr	r2, [r4, #32]
 8002148:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800214a:	4302      	orrs	r2, r0
 800214c:	4313      	orrs	r3, r2
 800214e:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <HAL_RCC_OscConfig+0x3d8>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002156:	f7fe f83b 	bl	80001d0 <HAL_GetTick>
 800215a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002164:	d10e      	bne.n	8002184 <HAL_RCC_OscConfig+0x3bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe f833 	bl	80001d0 <HAL_GetTick>
 800216a:	1b00      	subs	r0, r0, r4
 800216c:	2802      	cmp	r0, #2
 800216e:	d9f5      	bls.n	800215c <HAL_RCC_OscConfig+0x394>
            return HAL_TIMEOUT;
 8002170:	2003      	movs	r0, #3
 8002172:	e00e      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_OscConfig+0x3d4>)
 8002176:	6853      	ldr	r3, [r2, #4]
 8002178:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800217c:	68a1      	ldr	r1, [r4, #8]
 800217e:	430b      	orrs	r3, r1
 8002180:	6053      	str	r3, [r2, #4]
 8002182:	e7dc      	b.n	800213e <HAL_RCC_OscConfig+0x376>
  return HAL_OK;
 8002184:	2000      	movs	r0, #0
 8002186:	e004      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
 8002188:	2000      	movs	r0, #0
 800218a:	e002      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
        return HAL_ERROR;
 800218c:	2001      	movs	r0, #1
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
  return HAL_OK;
 8002190:	2000      	movs	r0, #0
}
 8002192:	b002      	add	sp, #8
 8002194:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002196:	2001      	movs	r0, #1
 8002198:	e7fb      	b.n	8002192 <HAL_RCC_OscConfig+0x3ca>
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	42420060 	.word	0x42420060

080021a4 <HAL_RCC_GetSysClockFreq>:
{
 80021a4:	b410      	push	{r4}
 80021a6:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021a8:	4c16      	ldr	r4, [pc, #88]	; (8002204 <HAL_RCC_GetSysClockFreq+0x60>)
 80021aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021ae:	f10d 0c18 	add.w	ip, sp, #24
 80021b2:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021b6:	8a23      	ldrh	r3, [r4, #16]
 80021b8:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_GetSysClockFreq+0x64>)
 80021be:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80021c0:	f003 020c 	and.w	r2, r3, #12
 80021c4:	2a08      	cmp	r2, #8
 80021c6:	d11a      	bne.n	80021fe <HAL_RCC_GetSysClockFreq+0x5a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80021cc:	4462      	add	r2, ip
 80021ce:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021d6:	d105      	bne.n	80021e4 <HAL_RCC_GetSysClockFreq+0x40>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021d8:	480c      	ldr	r0, [pc, #48]	; (800220c <HAL_RCC_GetSysClockFreq+0x68>)
 80021da:	fb00 f002 	mul.w	r0, r0, r2
}
 80021de:	b007      	add	sp, #28
 80021e0:	bc10      	pop	{r4}
 80021e2:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <HAL_RCC_GetSysClockFreq+0x64>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80021ec:	4463      	add	r3, ip
 80021ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021f2:	4807      	ldr	r0, [pc, #28]	; (8002210 <HAL_RCC_GetSysClockFreq+0x6c>)
 80021f4:	fb00 f002 	mul.w	r0, r0, r2
 80021f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80021fc:	e7ef      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80021fe:	4804      	ldr	r0, [pc, #16]	; (8002210 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8002200:	e7ed      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x3a>
 8002202:	bf00      	nop
 8002204:	080069e8 	.word	0x080069e8
 8002208:	40021000 	.word	0x40021000
 800220c:	003d0900 	.word	0x003d0900
 8002210:	007a1200 	.word	0x007a1200

08002214 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002214:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <HAL_RCC_ClockConfig+0x18c>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	428b      	cmp	r3, r1
 800221e:	d20c      	bcs.n	800223a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002220:	4a5f      	ldr	r2, [pc, #380]	; (80023a0 <HAL_RCC_ClockConfig+0x18c>)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	f023 0307 	bic.w	r3, r3, #7
 8002228:	430b      	orrs	r3, r1
 800222a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	428b      	cmp	r3, r1
 8002234:	d001      	beq.n	800223a <HAL_RCC_ClockConfig+0x26>
      return HAL_ERROR;
 8002236:	2001      	movs	r0, #1
}
 8002238:	4770      	bx	lr
{
 800223a:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	6803      	ldr	r3, [r0, #0]
 800223e:	f013 0f02 	tst.w	r3, #2
 8002242:	d017      	beq.n	8002274 <HAL_RCC_ClockConfig+0x60>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002244:	f013 0f04 	tst.w	r3, #4
 8002248:	d004      	beq.n	8002254 <HAL_RCC_ClockConfig+0x40>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224a:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 800224c:	6853      	ldr	r3, [r2, #4]
 800224e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002252:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002254:	6803      	ldr	r3, [r0, #0]
 8002256:	f013 0f08 	tst.w	r3, #8
 800225a:	d004      	beq.n	8002266 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4a51      	ldr	r2, [pc, #324]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 800225e:	6853      	ldr	r3, [r2, #4]
 8002260:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002264:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002266:	4a4f      	ldr	r2, [pc, #316]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 8002268:	6853      	ldr	r3, [r2, #4]
 800226a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800226e:	6884      	ldr	r4, [r0, #8]
 8002270:	4323      	orrs	r3, r4
 8002272:	6053      	str	r3, [r2, #4]
 8002274:	460d      	mov	r5, r1
 8002276:	4604      	mov	r4, r0
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002278:	6803      	ldr	r3, [r0, #0]
 800227a:	f013 0f01 	tst.w	r3, #1
 800227e:	d052      	beq.n	8002326 <HAL_RCC_ClockConfig+0x112>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002280:	6843      	ldr	r3, [r0, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d023      	beq.n	80022ce <HAL_RCC_ClockConfig+0xba>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002286:	2b02      	cmp	r3, #2
 8002288:	d028      	beq.n	80022dc <HAL_RCC_ClockConfig+0xc8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228a:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	f012 0f02 	tst.w	r2, #2
 8002292:	f000 8082 	beq.w	800239a <HAL_RCC_ClockConfig+0x186>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4943      	ldr	r1, [pc, #268]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 8002298:	684a      	ldr	r2, [r1, #4]
 800229a:	f022 0203 	bic.w	r2, r2, #3
 800229e:	4313      	orrs	r3, r2
 80022a0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80022a2:	f7fd ff95 	bl	80001d0 <HAL_GetTick>
 80022a6:	4606      	mov	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a8:	6863      	ldr	r3, [r4, #4]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d01d      	beq.n	80022ea <HAL_RCC_ClockConfig+0xd6>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d02a      	beq.n	8002308 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b2:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f013 0f0c 	tst.w	r3, #12
 80022ba:	d034      	beq.n	8002326 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7fd ff88 	bl	80001d0 <HAL_GetTick>
 80022c0:	1b80      	subs	r0, r0, r6
 80022c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d9f3      	bls.n	80022b2 <HAL_RCC_ClockConfig+0x9e>
          return HAL_TIMEOUT;
 80022ca:	2003      	movs	r0, #3
 80022cc:	e064      	b.n	8002398 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	4a35      	ldr	r2, [pc, #212]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80022d6:	d1de      	bne.n	8002296 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
 80022da:	e05d      	b.n	8002398 <HAL_RCC_ClockConfig+0x184>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022dc:	4a31      	ldr	r2, [pc, #196]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80022e4:	d1d7      	bne.n	8002296 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
 80022e8:	e056      	b.n	8002398 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d017      	beq.n	8002326 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7fd ff6b 	bl	80001d0 <HAL_GetTick>
 80022fa:	1b80      	subs	r0, r0, r6
 80022fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8002300:	4298      	cmp	r0, r3
 8002302:	d9f2      	bls.n	80022ea <HAL_RCC_ClockConfig+0xd6>
          return HAL_TIMEOUT;
 8002304:	2003      	movs	r0, #3
 8002306:	e047      	b.n	8002398 <HAL_RCC_ClockConfig+0x184>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002308:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 030c 	and.w	r3, r3, #12
 8002310:	2b08      	cmp	r3, #8
 8002312:	d008      	beq.n	8002326 <HAL_RCC_ClockConfig+0x112>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002314:	f7fd ff5c 	bl	80001d0 <HAL_GetTick>
 8002318:	1b80      	subs	r0, r0, r6
 800231a:	f241 3388 	movw	r3, #5000	; 0x1388
 800231e:	4298      	cmp	r0, r3
 8002320:	d9f2      	bls.n	8002308 <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8002322:	2003      	movs	r0, #3
 8002324:	e038      	b.n	8002398 <HAL_RCC_ClockConfig+0x184>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_RCC_ClockConfig+0x18c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	42ab      	cmp	r3, r5
 8002330:	d90c      	bls.n	800234c <HAL_RCC_ClockConfig+0x138>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4a1b      	ldr	r2, [pc, #108]	; (80023a0 <HAL_RCC_ClockConfig+0x18c>)
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	f023 0307 	bic.w	r3, r3, #7
 800233a:	432b      	orrs	r3, r5
 800233c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800233e:	6813      	ldr	r3, [r2, #0]
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	42ab      	cmp	r3, r5
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x138>
      return HAL_ERROR;
 8002348:	2001      	movs	r0, #1
 800234a:	e025      	b.n	8002398 <HAL_RCC_ClockConfig+0x184>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	f013 0f04 	tst.w	r3, #4
 8002352:	d006      	beq.n	8002362 <HAL_RCC_ClockConfig+0x14e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 8002356:	6853      	ldr	r3, [r2, #4]
 8002358:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800235c:	68e1      	ldr	r1, [r4, #12]
 800235e:	430b      	orrs	r3, r1
 8002360:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	f013 0f08 	tst.w	r3, #8
 8002368:	d007      	beq.n	800237a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 800236c:	6853      	ldr	r3, [r2, #4]
 800236e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002372:	6921      	ldr	r1, [r4, #16]
 8002374:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002378:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237a:	f7ff ff13 	bl	80021a4 <HAL_RCC_GetSysClockFreq>
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_ClockConfig+0x190>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002386:	4a08      	ldr	r2, [pc, #32]	; (80023a8 <HAL_RCC_ClockConfig+0x194>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	40d8      	lsrs	r0, r3
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <HAL_RCC_ClockConfig+0x198>)
 800238e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002390:	2000      	movs	r0, #0
 8002392:	f7fd fedb 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8002396:	2000      	movs	r0, #0
}
 8002398:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800239a:	2001      	movs	r0, #1
 800239c:	e7fc      	b.n	8002398 <HAL_RCC_ClockConfig+0x184>
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08006a10 	.word	0x08006a10
 80023ac:	20000008 	.word	0x20000008

080023b0 <HAL_RCC_GetHCLKFreq>:
}
 80023b0:	4b01      	ldr	r3, [pc, #4]	; (80023b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000008 	.word	0x20000008

080023bc <HAL_RCC_GetPCLK1Freq>:
{
 80023bc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023be:	f7ff fff7 	bl	80023b0 <HAL_RCC_GetHCLKFreq>
 80023c2:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80023ca:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
}    
 80023ce:	40d8      	lsrs	r0, r3
 80023d0:	bd08      	pop	{r3, pc}
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	08006a20 	.word	0x08006a20

080023dc <HAL_RCC_GetPCLK2Freq>:
{
 80023dc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023de:	f7ff ffe7 	bl	80023b0 <HAL_RCC_GetHCLKFreq>
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80023ea:	4a03      	ldr	r2, [pc, #12]	; (80023f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023ec:	5cd3      	ldrb	r3, [r2, r3]
} 
 80023ee:	40d8      	lsrs	r0, r3
 80023f0:	bd08      	pop	{r3, pc}
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	08006a20 	.word	0x08006a20

080023fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023fc:	b570      	push	{r4, r5, r6, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002402:	6803      	ldr	r3, [r0, #0]
 8002404:	f013 0f01 	tst.w	r3, #1
 8002408:	d034      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x78>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240a:	4b3e      	ldr	r3, [pc, #248]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002412:	d148      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002414:	4b3b      	ldr	r3, [pc, #236]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800241c:	61da      	str	r2, [r3, #28]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002428:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b37      	ldr	r3, [pc, #220]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002432:	d03a      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002434:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002438:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800243c:	d011      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x66>
 800243e:	6862      	ldr	r2, [r4, #4]
 8002440:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002444:	429a      	cmp	r2, r3
 8002446:	d00c      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002448:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800244a:	6a13      	ldr	r3, [r2, #32]
 800244c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002450:	492e      	ldr	r1, [pc, #184]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002452:	2601      	movs	r6, #1
 8002454:	600e      	str	r6, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002456:	2600      	movs	r6, #0
 8002458:	600e      	str	r6, [r1, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800245a:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800245c:	f013 0f01 	tst.w	r3, #1
 8002460:	d137      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002462:	4a28      	ldr	r2, [pc, #160]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002464:	6a13      	ldr	r3, [r2, #32]
 8002466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800246a:	6861      	ldr	r1, [r4, #4]
 800246c:	430b      	orrs	r3, r1
 800246e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002470:	2d00      	cmp	r5, #0
 8002472:	d13f      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	f013 0f02 	tst.w	r3, #2
 800247a:	d006      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800247c:	4a21      	ldr	r2, [pc, #132]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800247e:	6853      	ldr	r3, [r2, #4]
 8002480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002484:	68a1      	ldr	r1, [r4, #8]
 8002486:	430b      	orrs	r3, r1
 8002488:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800248a:	6823      	ldr	r3, [r4, #0]
 800248c:	f013 0f10 	tst.w	r3, #16
 8002490:	d035      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002494:	6853      	ldr	r3, [r2, #4]
 8002496:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800249a:	68e1      	ldr	r1, [r4, #12]
 800249c:	430b      	orrs	r3, r1
 800249e:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024a0:	2000      	movs	r0, #0
}
 80024a2:	b002      	add	sp, #8
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2500      	movs	r5, #0
 80024a8:	e7bf      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024aa:	4a17      	ldr	r2, [pc, #92]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80024ac:	6813      	ldr	r3, [r2, #0]
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80024b4:	f7fd fe8c 	bl	80001d0 <HAL_GetTick>
 80024b8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80024c2:	d1b7      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x38>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7fd fe84 	bl	80001d0 <HAL_GetTick>
 80024c8:	1b80      	subs	r0, r0, r6
 80024ca:	2864      	cmp	r0, #100	; 0x64
 80024cc:	d9f5      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 80024ce:	2003      	movs	r0, #3
 80024d0:	e7e7      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
        tickstart = HAL_GetTick();
 80024d2:	f7fd fe7d 	bl	80001d0 <HAL_GetTick>
 80024d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	f013 0f02 	tst.w	r3, #2
 80024e0:	d1bf      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x66>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e2:	f7fd fe75 	bl	80001d0 <HAL_GetTick>
 80024e6:	1b80      	subs	r0, r0, r6
 80024e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80024ec:	4298      	cmp	r0, r3
 80024ee:	d9f3      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
            return HAL_TIMEOUT;
 80024f0:	2003      	movs	r0, #3
 80024f2:	e7d6      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	69d3      	ldr	r3, [r2, #28]
 80024f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fa:	61d3      	str	r3, [r2, #28]
 80024fc:	e7ba      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x78>
  return HAL_OK;
 80024fe:	2000      	movs	r0, #0
 8002500:	e7cf      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	42420440 	.word	0x42420440

08002510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002510:	b530      	push	{r4, r5, lr}
 8002512:	b087      	sub	sp, #28
 8002514:	4605      	mov	r5, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002516:	4c38      	ldr	r4, [pc, #224]	; (80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
 8002518:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800251c:	f10d 0c18 	add.w	ip, sp, #24
 8002520:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002524:	8a23      	ldrh	r3, [r4, #16]
 8002526:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800252a:	2d02      	cmp	r5, #2
 800252c:	d050      	beq.n	80025d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
 800252e:	2d10      	cmp	r5, #16
 8002530:	d003      	beq.n	800253a <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
 8002532:	2d01      	cmp	r5, #1
 8002534:	d02b      	beq.n	800258e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002536:	2000      	movs	r0, #0
 8002538:	e054      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  case RCC_PERIPHCLK_USB:  
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800253a:	4b30      	ldr	r3, [pc, #192]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800253c:	685a      	ldr	r2, [r3, #4]
  
      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002544:	d050      	beq.n	80025e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002546:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800254a:	a906      	add	r1, sp, #24
 800254c:	440b      	add	r3, r1
 800254e:	f813 0c10 	ldrb.w	r0, [r3, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002552:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002556:	d016      	beq.n	8002586 <HAL_RCCEx_GetPeriphCLKFreq+0x76>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002558:	4b28      	ldr	r3, [pc, #160]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002560:	440b      	add	r3, r1
 8002562:	f813 2c14 	ldrb.w	r2, [r3, #-20]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002566:	4b26      	ldr	r3, [pc, #152]	; (8002600 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8002568:	fbb3 f3f2 	udiv	r3, r3, r2
 800256c:	fb00 f003 	mul.w	r0, r0, r3
          /* Prescaler of 3 selected for USB */ 
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002578:	d134      	bne.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */ 
          frequency = (pllclk * 2) / 3;
 800257a:	0040      	lsls	r0, r0, #1
 800257c:	4b21      	ldr	r3, [pc, #132]	; (8002604 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>)
 800257e:	fba3 3000 	umull	r3, r0, r3, r0
 8002582:	0840      	lsrs	r0, r0, #1
 8002584:	e02e      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002586:	4b20      	ldr	r3, [pc, #128]	; (8002608 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>)
 8002588:	fb03 f000 	mul.w	r0, r3, r0
 800258c:	e7f0      	b.n	8002570 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
  case RCC_PERIPHCLK_RTC:  
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8002590:	6a1b      	ldr	r3, [r3, #32]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002592:	f240 3202 	movw	r2, #770	; 0x302
 8002596:	401a      	ands	r2, r3
 8002598:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800259c:	d026      	beq.n	80025ec <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800259e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a6:	d004      	beq.n	80025b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      {
        frequency = LSI_VALUE;
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025ac:	d009      	beq.n	80025c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
        frequency = HSE_VALUE / 128U;
      }
      /* Clock not enabled for RTC*/
      else
      {
        frequency = 0U;
 80025ae:	2000      	movs	r0, #0
 80025b0:	e018      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80025b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025b6:	f012 0f02 	tst.w	r2, #2
 80025ba:	d0f5      	beq.n	80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        frequency = LSI_VALUE;
 80025bc:	f649 4040 	movw	r0, #40000	; 0x9c40
 80025c0:	e010      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80025ca:	d112      	bne.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        frequency = 0U;
 80025cc:	2000      	movs	r0, #0
 80025ce:	e009      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
      }
      break;
    }
  case RCC_PERIPHCLK_ADC:  
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025d0:	f7ff ff04 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80025dc:	3301      	adds	r3, #1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fbb0 f0f3 	udiv	r0, r0, r3
    {
      break;
    }
  }
  return(frequency);
}
 80025e4:	b007      	add	sp, #28
 80025e6:	bd30      	pop	{r4, r5, pc}
  uint32_t temp_reg = 0U, frequency = 0U;
 80025e8:	2000      	movs	r0, #0
 80025ea:	e7fb      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = LSE_VALUE;
 80025ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025f0:	e7f8      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        frequency = HSE_VALUE / 128U;
 80025f2:	f24f 4024 	movw	r0, #62500	; 0xf424
  return(frequency);
 80025f6:	e7f5      	b.n	80025e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 80025f8:	080069fc 	.word	0x080069fc
 80025fc:	40021000 	.word	0x40021000
 8002600:	007a1200 	.word	0x007a1200
 8002604:	aaaaaaab 	.word	0xaaaaaaab
 8002608:	003d0900 	.word	0x003d0900

0800260c <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
 800260c:	b430      	push	{r4, r5}
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800260e:	6802      	ldr	r2, [r0, #0]
 8002610:	6994      	ldr	r4, [r2, #24]
 8002612:	b2a5      	uxth	r5, r4
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002614:	69d3      	ldr	r3, [r2, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002616:	6991      	ldr	r1, [r2, #24]
 8002618:	b288      	uxth	r0, r1

  if (high1 != high2)
 800261a:	4285      	cmp	r5, r0
 800261c:	d005      	beq.n	800262a <RTC_ReadTimeCounter+0x1e>
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800261e:	69d0      	ldr	r0, [r2, #28]
 8002620:	b280      	uxth	r0, r0
 8002622:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
  }

  return timecounter;
}
 8002626:	bc30      	pop	{r4, r5}
 8002628:	4770      	bx	lr
    timecounter = (((uint32_t) high1 << 16U) | low);
 800262a:	b298      	uxth	r0, r3
 800262c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
  return timecounter;
 8002630:	e7f9      	b.n	8002626 <RTC_ReadTimeCounter+0x1a>

08002632 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002632:	6803      	ldr	r3, [r0, #0]
 8002634:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8002638:	b29b      	uxth	r3, r3
}
 800263a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800263e:	4770      	bx	lr

08002640 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002640:	0903      	lsrs	r3, r0, #4
 8002642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002646:	005a      	lsls	r2, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8002648:	f000 000f 	and.w	r0, r0, #15
 800264c:	4410      	add	r0, r2
}
 800264e:	b2c0      	uxtb	r0, r0
 8002650:	4770      	bx	lr
	...

08002654 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002654:	b410      	push	{r4}
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 8002656:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0
  
  if(nMonth < 3U)
 800265a:	2902      	cmp	r1, #2
 800265c:	d920      	bls.n	80026a0 <RTC_WeekDayNum+0x4c>
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 800265e:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8002662:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <RTC_WeekDayNum+0x90>)
 8002668:	fba3 1301 	umull	r1, r3, r3, r1
 800266c:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 8002670:	4423      	add	r3, r4
 8002672:	eb03 0394 	add.w	r3, r3, r4, lsr #2
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <RTC_WeekDayNum+0x94>)
 8002678:	fba2 2404 	umull	r2, r4, r2, r4
 800267c:	eba3 1354 	sub.w	r3, r3, r4, lsr #5
 8002680:	eb03 13d4 	add.w	r3, r3, r4, lsr #7
 8002684:	3302      	adds	r3, #2
 8002686:	4819      	ldr	r0, [pc, #100]	; (80026ec <RTC_WeekDayNum+0x98>)
 8002688:	fba0 2003 	umull	r2, r0, r0, r3
 800268c:	1a1a      	subs	r2, r3, r0
 800268e:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8002692:	0880      	lsrs	r0, r0, #2
 8002694:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002698:	1a18      	subs	r0, r3, r0
  }

  return (uint8_t)weekday;
}
 800269a:	b2c0      	uxtb	r0, r0
 800269c:	bc10      	pop	{r4}
 800269e:	4770      	bx	lr
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 80026a0:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80026a4:	ebc1 01c3 	rsb	r1, r1, r3, lsl #3
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <RTC_WeekDayNum+0x90>)
 80026aa:	fba3 1301 	umull	r1, r3, r3, r1
 80026ae:	eb02 0353 	add.w	r3, r2, r3, lsr #1
 80026b2:	4423      	add	r3, r4
 80026b4:	f200 70cf 	addw	r0, r0, #1999	; 0x7cf
 80026b8:	eb03 0390 	add.w	r3, r3, r0, lsr #2
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <RTC_WeekDayNum+0x94>)
 80026be:	fba2 2000 	umull	r2, r0, r2, r0
 80026c2:	eba3 1350 	sub.w	r3, r3, r0, lsr #5
 80026c6:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
 80026ca:	3304      	adds	r3, #4
 80026cc:	4807      	ldr	r0, [pc, #28]	; (80026ec <RTC_WeekDayNum+0x98>)
 80026ce:	fba0 2003 	umull	r2, r0, r0, r3
 80026d2:	1a1a      	subs	r2, r3, r0
 80026d4:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 80026d8:	0880      	lsrs	r0, r0, #2
 80026da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80026de:	1a18      	subs	r0, r3, r0
 80026e0:	e7db      	b.n	800269a <RTC_WeekDayNum+0x46>
 80026e2:	bf00      	nop
 80026e4:	38e38e39 	.word	0x38e38e39
 80026e8:	51eb851f 	.word	0x51eb851f
 80026ec:	24924925 	.word	0x24924925

080026f0 <RTC_EnterInitMode>:
{
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80026f4:	f7fd fd6c 	bl	80001d0 <HAL_GetTick>
 80026f8:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	f012 0f20 	tst.w	r2, #32
 8002702:	d107      	bne.n	8002714 <RTC_EnterInitMode+0x24>
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002704:	f7fd fd64 	bl	80001d0 <HAL_GetTick>
 8002708:	1b40      	subs	r0, r0, r5
 800270a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800270e:	d9f4      	bls.n	80026fa <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8002710:	2003      	movs	r0, #3
 8002712:	e004      	b.n	800271e <RTC_EnterInitMode+0x2e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	f042 0210 	orr.w	r2, r2, #16
 800271a:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 800271c:	2000      	movs	r0, #0
}
 800271e:	bd38      	pop	{r3, r4, r5, pc}

08002720 <RTC_ExitInitMode>:
{
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002724:	6802      	ldr	r2, [r0, #0]
 8002726:	6853      	ldr	r3, [r2, #4]
 8002728:	f023 0310 	bic.w	r3, r3, #16
 800272c:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 800272e:	f7fd fd4f 	bl	80001d0 <HAL_GetTick>
 8002732:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f013 0f20 	tst.w	r3, #32
 800273c:	d107      	bne.n	800274e <RTC_ExitInitMode+0x2e>
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800273e:	f7fd fd47 	bl	80001d0 <HAL_GetTick>
 8002742:	1b40      	subs	r0, r0, r5
 8002744:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002748:	d9f4      	bls.n	8002734 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 800274a:	2003      	movs	r0, #3
 800274c:	e000      	b.n	8002750 <RTC_ExitInitMode+0x30>
  return HAL_OK;  
 800274e:	2000      	movs	r0, #0
}
 8002750:	bd38      	pop	{r3, r4, r5, pc}

08002752 <RTC_WriteTimeCounter>:
{
 8002752:	b538      	push	{r3, r4, r5, lr}
 8002754:	4605      	mov	r5, r0
 8002756:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002758:	f7ff ffca 	bl	80026f0 <RTC_EnterInitMode>
 800275c:	b110      	cbz	r0, 8002764 <RTC_WriteTimeCounter+0x12>
    status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002764:	682b      	ldr	r3, [r5, #0]
 8002766:	0c22      	lsrs	r2, r4, #16
 8002768:	619a      	str	r2, [r3, #24]
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800276a:	682b      	ldr	r3, [r5, #0]
 800276c:	b2a4      	uxth	r4, r4
 800276e:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8002770:	4628      	mov	r0, r5
 8002772:	f7ff ffd5 	bl	8002720 <RTC_ExitInitMode>
 8002776:	4603      	mov	r3, r0
 8002778:	2800      	cmp	r0, #0
 800277a:	d0f1      	beq.n	8002760 <RTC_WriteTimeCounter+0xe>
      status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e7ef      	b.n	8002760 <RTC_WriteTimeCounter+0xe>

08002780 <RTC_WriteAlarmCounter>:
{
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4605      	mov	r5, r0
 8002784:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002786:	f7ff ffb3 	bl	80026f0 <RTC_EnterInitMode>
 800278a:	b110      	cbz	r0, 8002792 <RTC_WriteAlarmCounter+0x12>
    status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
}
 800278e:	4618      	mov	r0, r3
 8002790:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002792:	682b      	ldr	r3, [r5, #0]
 8002794:	0c22      	lsrs	r2, r4, #16
 8002796:	621a      	str	r2, [r3, #32]
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	b2a4      	uxth	r4, r4
 800279c:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 800279e:	4628      	mov	r0, r5
 80027a0:	f7ff ffbe 	bl	8002720 <RTC_ExitInitMode>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d0f1      	beq.n	800278e <RTC_WriteAlarmCounter+0xe>
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e7ef      	b.n	800278e <RTC_WriteAlarmCounter+0xe>

080027ae <HAL_RTC_SetTime>:
{
 80027ae:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 80027b0:	2800      	cmp	r0, #0
 80027b2:	d057      	beq.n	8002864 <HAL_RTC_SetTime+0xb6>
 80027b4:	4604      	mov	r4, r0
 80027b6:	2900      	cmp	r1, #0
 80027b8:	d056      	beq.n	8002868 <HAL_RTC_SetTime+0xba>
  __HAL_LOCK(hrtc);
 80027ba:	7c03      	ldrb	r3, [r0, #16]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d055      	beq.n	800286c <HAL_RTC_SetTime+0xbe>
 80027c0:	460e      	mov	r6, r1
 80027c2:	2301      	movs	r3, #1
 80027c4:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80027c6:	2302      	movs	r3, #2
 80027c8:	7443      	strb	r3, [r0, #17]
  if(Format == RTC_FORMAT_BIN)
 80027ca:	b9ba      	cbnz	r2, 80027fc <HAL_RTC_SetTime+0x4e>
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80027cc:	780d      	ldrb	r5, [r1, #0]
                        ((uint32_t)sTime->Minutes * 60U) + \
 80027ce:	784b      	ldrb	r3, [r1, #1]
 80027d0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80027d4:	009a      	lsls	r2, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80027d6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80027da:	fb03 2505 	mla	r5, r3, r5, r2
                        ((uint32_t)sTime->Seconds));  
 80027de:	788b      	ldrb	r3, [r1, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80027e0:	441d      	add	r5, r3
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80027e2:	4629      	mov	r1, r5
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7ff ffb4 	bl	8002752 <RTC_WriteTimeCounter>
 80027ea:	4606      	mov	r6, r0
 80027ec:	b1c8      	cbz	r0, 8002822 <HAL_RTC_SetTime+0x74>
    hrtc->State = HAL_RTC_STATE_ERROR;
 80027ee:	2304      	movs	r3, #4
 80027f0:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80027f2:	2300      	movs	r3, #0
 80027f4:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 80027f6:	2601      	movs	r6, #1
}
 80027f8:	4630      	mov	r0, r6
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80027fc:	7808      	ldrb	r0, [r1, #0]
 80027fe:	f7ff ff1f 	bl	8002640 <RTC_Bcd2ToByte>
 8002802:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 8002806:	fb05 f500 	mul.w	r5, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800280a:	7870      	ldrb	r0, [r6, #1]
 800280c:	f7ff ff18 	bl	8002640 <RTC_Bcd2ToByte>
 8002810:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 8002814:	0083      	lsls	r3, r0, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002816:	441d      	add	r5, r3
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8002818:	78b0      	ldrb	r0, [r6, #2]
 800281a:	f7ff ff11 	bl	8002640 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800281e:	4405      	add	r5, r0
 8002820:	e7df      	b.n	80027e2 <HAL_RTC_SetTime+0x34>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	6853      	ldr	r3, [r2, #4]
 8002826:	f023 0305 	bic.w	r3, r3, #5
 800282a:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ff00 	bl	8002632 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002832:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002836:	d001      	beq.n	800283c <HAL_RTC_SetTime+0x8e>
      if(counter_alarm < counter_time)
 8002838:	4285      	cmp	r5, r0
 800283a:	d804      	bhi.n	8002846 <HAL_RTC_SetTime+0x98>
    hrtc->State = HAL_RTC_STATE_READY;
 800283c:	2301      	movs	r3, #1
 800283e:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8002840:	2300      	movs	r3, #0
 8002842:	7423      	strb	r3, [r4, #16]
   return HAL_OK;
 8002844:	e7d8      	b.n	80027f8 <HAL_RTC_SetTime+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002846:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 800284a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff96 	bl	8002780 <RTC_WriteAlarmCounter>
 8002854:	2800      	cmp	r0, #0
 8002856:	d0f1      	beq.n	800283c <HAL_RTC_SetTime+0x8e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002858:	2304      	movs	r3, #4
 800285a:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 800285c:	2300      	movs	r3, #0
 800285e:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 8002860:	2601      	movs	r6, #1
 8002862:	e7c9      	b.n	80027f8 <HAL_RTC_SetTime+0x4a>
     return HAL_ERROR;
 8002864:	2601      	movs	r6, #1
 8002866:	e7c7      	b.n	80027f8 <HAL_RTC_SetTime+0x4a>
 8002868:	2601      	movs	r6, #1
 800286a:	e7c5      	b.n	80027f8 <HAL_RTC_SetTime+0x4a>
  __HAL_LOCK(hrtc);
 800286c:	2602      	movs	r6, #2
 800286e:	e7c3      	b.n	80027f8 <HAL_RTC_SetTime+0x4a>

08002870 <HAL_RTC_SetDate>:
  if((hrtc == NULL) || (sDate == NULL))
 8002870:	2800      	cmp	r0, #0
 8002872:	d05d      	beq.n	8002930 <HAL_RTC_SetDate+0xc0>
{
 8002874:	b538      	push	{r3, r4, r5, lr}
 8002876:	4604      	mov	r4, r0
  if((hrtc == NULL) || (sDate == NULL))
 8002878:	2900      	cmp	r1, #0
 800287a:	d05b      	beq.n	8002934 <HAL_RTC_SetDate+0xc4>
 __HAL_LOCK(hrtc);
 800287c:	7c03      	ldrb	r3, [r0, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d05a      	beq.n	8002938 <HAL_RTC_SetDate+0xc8>
 8002882:	460d      	mov	r5, r1
 8002884:	2301      	movs	r3, #1
 8002886:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002888:	2302      	movs	r3, #2
 800288a:	7443      	strb	r3, [r0, #17]
  if(Format == RTC_FORMAT_BIN)
 800288c:	b9d2      	cbnz	r2, 80028c4 <HAL_RTC_SetDate+0x54>
    hrtc->DateToUpdate.Year  = sDate->Year;
 800288e:	78cb      	ldrb	r3, [r1, #3]
 8002890:	73c3      	strb	r3, [r0, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002892:	784b      	ldrb	r3, [r1, #1]
 8002894:	7343      	strb	r3, [r0, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002896:	788b      	ldrb	r3, [r1, #2]
 8002898:	7383      	strb	r3, [r0, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800289a:	7ba2      	ldrb	r2, [r4, #14]
 800289c:	7b61      	ldrb	r1, [r4, #13]
 800289e:	7be0      	ldrb	r0, [r4, #15]
 80028a0:	f7ff fed8 	bl	8002654 <RTC_WeekDayNum>
 80028a4:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80028a6:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7ff feaf 	bl	800260c <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 80028ae:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_RTC_SetDate+0xcc>)
 80028b0:	fba3 2300 	umull	r2, r3, r3, r0
  if (hours > 24U)
 80028b4:	f5b3 4f48 	cmp.w	r3, #51200	; 0xc800
 80028b8:	d211      	bcs.n	80028de <HAL_RTC_SetDate+0x6e>
  hrtc->State = HAL_RTC_STATE_READY ;
 80028ba:	2301      	movs	r3, #1
 80028bc:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 80028be:	2000      	movs	r0, #0
 80028c0:	7420      	strb	r0, [r4, #16]
}
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80028c4:	78c8      	ldrb	r0, [r1, #3]
 80028c6:	f7ff febb 	bl	8002640 <RTC_Bcd2ToByte>
 80028ca:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80028cc:	7868      	ldrb	r0, [r5, #1]
 80028ce:	f7ff feb7 	bl	8002640 <RTC_Bcd2ToByte>
 80028d2:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80028d4:	78a8      	ldrb	r0, [r5, #2]
 80028d6:	f7ff feb3 	bl	8002640 <RTC_Bcd2ToByte>
 80028da:	73a0      	strb	r0, [r4, #14]
 80028dc:	e7dd      	b.n	800289a <HAL_RTC_SetDate+0x2a>
 80028de:	4d18      	ldr	r5, [pc, #96]	; (8002940 <HAL_RTC_SetDate+0xd0>)
 80028e0:	fba5 3500 	umull	r3, r5, r5, r0
 80028e4:	0c2d      	lsrs	r5, r5, #16
 80028e6:	4b17      	ldr	r3, [pc, #92]	; (8002944 <HAL_RTC_SetDate+0xd4>)
 80028e8:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80028ec:	4629      	mov	r1, r5
 80028ee:	4620      	mov	r0, r4
 80028f0:	f7ff ff2f 	bl	8002752 <RTC_WriteTimeCounter>
 80028f4:	b128      	cbz	r0, 8002902 <HAL_RTC_SetDate+0x92>
      hrtc->State = HAL_RTC_STATE_ERROR;
 80028f6:	2304      	movs	r3, #4
 80028f8:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 80028fa:	2300      	movs	r3, #0
 80028fc:	7423      	strb	r3, [r4, #16]
      return HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
 8002900:	e7df      	b.n	80028c2 <HAL_RTC_SetDate+0x52>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002902:	4620      	mov	r0, r4
 8002904:	f7ff fe95 	bl	8002632 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002908:	f1b0 3fff 	cmp.w	r0, #4294967295
 800290c:	d0d5      	beq.n	80028ba <HAL_RTC_SetDate+0x4a>
      if(counter_alarm < counter_time)
 800290e:	4285      	cmp	r5, r0
 8002910:	d9d3      	bls.n	80028ba <HAL_RTC_SetDate+0x4a>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002912:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8002916:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 800291a:	4620      	mov	r0, r4
 800291c:	f7ff ff30 	bl	8002780 <RTC_WriteAlarmCounter>
 8002920:	2800      	cmp	r0, #0
 8002922:	d0ca      	beq.n	80028ba <HAL_RTC_SetDate+0x4a>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002924:	2304      	movs	r3, #4
 8002926:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8002928:	2300      	movs	r3, #0
 800292a:	7423      	strb	r3, [r4, #16]
          return HAL_ERROR;
 800292c:	2001      	movs	r0, #1
 800292e:	e7c8      	b.n	80028c2 <HAL_RTC_SetDate+0x52>
     return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
}
 8002932:	4770      	bx	lr
     return HAL_ERROR;
 8002934:	2001      	movs	r0, #1
 8002936:	e7c4      	b.n	80028c2 <HAL_RTC_SetDate+0x52>
 __HAL_LOCK(hrtc);
 8002938:	2002      	movs	r0, #2
 800293a:	e7c2      	b.n	80028c2 <HAL_RTC_SetDate+0x52>
 800293c:	91a2b3c5 	.word	0x91a2b3c5
 8002940:	c22e4507 	.word	0xc22e4507
 8002944:	00015180 	.word	0x00015180

08002948 <HAL_RTC_WaitForSynchro>:
  if(hrtc == NULL)
 8002948:	b1c0      	cbz	r0, 800297c <HAL_RTC_WaitForSynchro+0x34>
{
 800294a:	b538      	push	{r3, r4, r5, lr}
 800294c:	4604      	mov	r4, r0
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800294e:	6802      	ldr	r2, [r0, #0]
 8002950:	6853      	ldr	r3, [r2, #4]
 8002952:	f023 0308 	bic.w	r3, r3, #8
 8002956:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8002958:	f7fd fc3a 	bl	80001d0 <HAL_GetTick>
 800295c:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f013 0f08 	tst.w	r3, #8
 8002966:	d107      	bne.n	8002978 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8002968:	f7fd fc32 	bl	80001d0 <HAL_GetTick>
 800296c:	1b40      	subs	r0, r0, r5
 800296e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002972:	d9f4      	bls.n	800295e <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8002974:	2003      	movs	r0, #3
 8002976:	e000      	b.n	800297a <HAL_RTC_WaitForSynchro+0x32>
  return HAL_OK;
 8002978:	2000      	movs	r0, #0
}
 800297a:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 800297c:	2001      	movs	r0, #1
}
 800297e:	4770      	bx	lr

08002980 <HAL_RTC_Init>:
  if(hrtc == NULL)
 8002980:	2800      	cmp	r0, #0
 8002982:	d05a      	beq.n	8002a3a <HAL_RTC_Init+0xba>
{
 8002984:	b510      	push	{r4, lr}
 8002986:	4604      	mov	r4, r0
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002988:	7c43      	ldrb	r3, [r0, #17]
 800298a:	b153      	cbz	r3, 80029a2 <HAL_RTC_Init+0x22>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800298c:	2302      	movs	r3, #2
 800298e:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ffd9 	bl	8002948 <HAL_RTC_WaitForSynchro>
 8002996:	b140      	cbz	r0, 80029aa <HAL_RTC_Init+0x2a>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002998:	2304      	movs	r3, #4
 800299a:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd10      	pop	{r4, pc}
    hrtc->Lock = HAL_UNLOCKED;
 80029a2:	7403      	strb	r3, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 80029a4:	f002 f8f0 	bl	8004b88 <HAL_RTC_MspInit>
 80029a8:	e7f0      	b.n	800298c <HAL_RTC_Init+0xc>
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff fea0 	bl	80026f0 <RTC_EnterInitMode>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d130      	bne.n	8002a16 <HAL_RTC_Init+0x96>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80029b4:	6822      	ldr	r2, [r4, #0]
 80029b6:	6853      	ldr	r3, [r2, #4]
 80029b8:	f023 0307 	bic.w	r3, r3, #7
 80029bc:	6053      	str	r3, [r2, #4]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80029be:	68a3      	ldr	r3, [r4, #8]
 80029c0:	b123      	cbz	r3, 80029cc <HAL_RTC_Init+0x4c>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80029c2:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <HAL_RTC_Init+0xc0>)
 80029c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	6313      	str	r3, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80029cc:	4a1c      	ldr	r2, [pc, #112]	; (8002a40 <HAL_RTC_Init+0xc0>)
 80029ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029d0:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80029d4:	68a1      	ldr	r1, [r4, #8]
 80029d6:	430b      	orrs	r3, r1
 80029d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80029da:	6862      	ldr	r2, [r4, #4]
 80029dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80029e0:	d01d      	beq.n	8002a1e <HAL_RTC_Init+0x9e>
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80029e2:	6821      	ldr	r1, [r4, #0]
 80029e4:	688b      	ldr	r3, [r1, #8]
 80029e6:	f023 030f 	bic.w	r3, r3, #15
 80029ea:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 80029ee:	608b      	str	r3, [r1, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80029f0:	6821      	ldr	r1, [r4, #0]
 80029f2:	68cb      	ldr	r3, [r1, #12]
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	b292      	uxth	r2, r2
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 80029fe:	4620      	mov	r0, r4
 8002a00:	f7ff fe8e 	bl	8002720 <RTC_ExitInitMode>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b9a0      	cbnz	r0, 8002a32 <HAL_RTC_Init+0xb2>
    hrtc->DateToUpdate.Year = 0x00U;
 8002a08:	2200      	movs	r2, #0
 8002a0a:	73e2      	strb	r2, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	7362      	strb	r2, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002a10:	73a2      	strb	r2, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8002a12:	7462      	strb	r2, [r4, #17]
    return HAL_OK;
 8002a14:	e7c3      	b.n	800299e <HAL_RTC_Init+0x1e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a16:	2304      	movs	r3, #4
 8002a18:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e7bf      	b.n	800299e <HAL_RTC_Init+0x1e>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f7ff fd76 	bl	8002510 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8002a24:	b108      	cbz	r0, 8002a2a <HAL_RTC_Init+0xaa>
        prescaler = prescaler - 1U;
 8002a26:	1e42      	subs	r2, r0, #1
 8002a28:	e7db      	b.n	80029e2 <HAL_RTC_Init+0x62>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	7463      	strb	r3, [r4, #17]
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e7b5      	b.n	800299e <HAL_RTC_Init+0x1e>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a32:	2304      	movs	r3, #4
 8002a34:	7463      	strb	r3, [r4, #17]
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e7b1      	b.n	800299e <HAL_RTC_Init+0x1e>
     return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	4770      	bx	lr
 8002a40:	40006c00 	.word	0x40006c00

08002a44 <HAL_RTCEx_RTCEventCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8002a44:	4770      	bx	lr

08002a46 <HAL_RTCEx_RTCEventErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8002a46:	4770      	bx	lr

08002a48 <HAL_RTCEx_RTCIRQHandler>:
  if(__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8002a48:	6803      	ldr	r3, [r0, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	f012 0f01 	tst.w	r2, #1
 8002a50:	d01b      	beq.n	8002a8a <HAL_RTCEx_RTCIRQHandler+0x42>
    if(__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	f012 0f01 	tst.w	r2, #1
 8002a58:	d017      	beq.n	8002a8a <HAL_RTCEx_RTCIRQHandler+0x42>
{
 8002a5a:	b510      	push	{r4, lr}
 8002a5c:	4604      	mov	r4, r0
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f013 0f04 	tst.w	r3, #4
 8002a64:	d00c      	beq.n	8002a80 <HAL_RTCEx_RTCIRQHandler+0x38>
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8002a66:	f7ff ffee 	bl	8002a46 <HAL_RTCEx_RTCEventErrorCallback>
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8002a6a:	6823      	ldr	r3, [r4, #0]
 8002a6c:	f06f 0204 	mvn.w	r2, #4
 8002a70:	605a      	str	r2, [r3, #4]
        hrtc->State = HAL_RTC_STATE_ERROR; 
 8002a72:	2304      	movs	r3, #4
 8002a74:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8002a76:	6823      	ldr	r3, [r4, #0]
 8002a78:	f06f 0201 	mvn.w	r2, #1
 8002a7c:	605a      	str	r2, [r3, #4]
}
 8002a7e:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8002a80:	f7ff ffe0 	bl	8002a44 <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY; 
 8002a84:	2301      	movs	r3, #1
 8002a86:	7463      	strb	r3, [r4, #17]
 8002a88:	e7f5      	b.n	8002a76 <HAL_RTCEx_RTCIRQHandler+0x2e>
 8002a8a:	4770      	bx	lr

08002a8c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	4605      	mov	r5, r0
 8002a90:	460f      	mov	r7, r1
 8002a92:	4616      	mov	r6, r2
 8002a94:	461c      	mov	r4, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002a96:	e03b      	b.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002a98:	b12c      	cbz	r4, 8002aa6 <SPI_WaitFlagStateUntilTimeout+0x1a>
 8002a9a:	f7fd fb99 	bl	80001d0 <HAL_GetTick>
 8002a9e:	9b06      	ldr	r3, [sp, #24]
 8002aa0:	1ac0      	subs	r0, r0, r3
 8002aa2:	42a0      	cmp	r0, r4
 8002aa4:	d334      	bcc.n	8002b10 <SPI_WaitFlagStateUntilTimeout+0x84>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002aa6:	682a      	ldr	r2, [r5, #0]
 8002aa8:	6853      	ldr	r3, [r2, #4]
 8002aaa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002aae:	6053      	str	r3, [r2, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ab0:	686b      	ldr	r3, [r5, #4]
 8002ab2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ab6:	d00b      	beq.n	8002ad0 <SPI_WaitFlagStateUntilTimeout+0x44>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ab8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002abe:	d014      	beq.n	8002aea <SPI_WaitFlagStateUntilTimeout+0x5e>
        {
          SPI_RESET_CRC(hspi);
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50

        return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e027      	b.n	8002b20 <SPI_WaitFlagStateUntilTimeout+0x94>
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ad0:	68ab      	ldr	r3, [r5, #8]
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad6:	d002      	beq.n	8002ade <SPI_WaitFlagStateUntilTimeout+0x52>
 8002ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002adc:	d1ec      	bne.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x2c>
          __HAL_SPI_DISABLE(hspi);
 8002ade:	682a      	ldr	r2, [r5, #0]
 8002ae0:	6813      	ldr	r3, [r2, #0]
 8002ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e7e6      	b.n	8002ab8 <SPI_WaitFlagStateUntilTimeout+0x2c>
          SPI_RESET_CRC(hspi);
 8002aea:	682a      	ldr	r2, [r5, #0]
 8002aec:	6813      	ldr	r3, [r2, #0]
 8002aee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	0c1b      	lsrs	r3, r3, #16
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	682a      	ldr	r2, [r5, #0]
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e7dd      	b.n	8002ac0 <SPI_WaitFlagStateUntilTimeout+0x34>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002b04:	2301      	movs	r3, #1
 8002b06:	42b3      	cmp	r3, r6
 8002b08:	d009      	beq.n	8002b1e <SPI_WaitFlagStateUntilTimeout+0x92>
    if(Timeout != HAL_MAX_DELAY)
 8002b0a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002b0e:	d1c3      	bne.n	8002a98 <SPI_WaitFlagStateUntilTimeout+0xc>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	ea37 0303 	bics.w	r3, r7, r3
 8002b18:	d0f4      	beq.n	8002b04 <SPI_WaitFlagStateUntilTimeout+0x78>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	e7f3      	b.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0x7a>
      }
    }
  }

  return HAL_OK;
 8002b1e:	2000      	movs	r0, #0
}
 8002b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b22 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b22:	b510      	push	{r4, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	f7ff ffac 	bl	8002a8c <SPI_WaitFlagStateUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	b910      	cbnz	r0, 8002b3e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd10      	pop	{r4, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b40:	f043 0320 	orr.w	r3, r3, #32
 8002b44:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e7f6      	b.n	8002b38 <SPI_CheckFlag_BSY+0x16>

08002b4a <HAL_SPI_Transmit>:
{
 8002b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8002b52:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	f000 80c8 	beq.w	8002cec <HAL_SPI_Transmit+0x1a2>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	4690      	mov	r8, r2
 8002b62:	2301      	movs	r3, #1
 8002b64:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002b68:	f7fd fb32 	bl	80001d0 <HAL_GetTick>
 8002b6c:	4607      	mov	r7, r0
  if(hspi->State != HAL_SPI_STATE_READY)
 8002b6e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d00a      	beq.n	8002b8e <HAL_SPI_Transmit+0x44>
    errorcode = HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	b004      	add	sp, #16
 8002b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if((pData == NULL ) || (Size == 0U))
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	f000 80a4 	beq.w	8002cdc <HAL_SPI_Transmit+0x192>
 8002b94:	f1b8 0f00 	cmp.w	r8, #0
 8002b98:	f000 80a2 	beq.w	8002ce0 <HAL_SPI_Transmit+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ba6:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ba8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002bac:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bb0:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bb2:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bb4:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bb6:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bb8:	6423      	str	r3, [r4, #64]	; 0x40
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bba:	68a3      	ldr	r3, [r4, #8]
 8002bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc0:	d01b      	beq.n	8002bfa <HAL_SPI_Transmit+0xb0>
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002bca:	d103      	bne.n	8002bd4 <HAL_SPI_Transmit+0x8a>
    __HAL_SPI_ENABLE(hspi);
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bd2:	601a      	str	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002bd4:	68e3      	ldr	r3, [r4, #12]
 8002bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bda:	d014      	beq.n	8002c06 <HAL_SPI_Transmit+0xbc>
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8002bdc:	6863      	ldr	r3, [r4, #4]
 8002bde:	b11b      	cbz	r3, 8002be8 <HAL_SPI_Transmit+0x9e>
 8002be0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d13e      	bne.n	8002c66 <HAL_SPI_Transmit+0x11c>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002bee:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8002bf0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002bf8:	e035      	b.n	8002c66 <HAL_SPI_Transmit+0x11c>
    SPI_1LINE_TX(hspi);
 8002bfa:	6822      	ldr	r2, [r4, #0]
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	e7dd      	b.n	8002bc2 <HAL_SPI_Transmit+0x78>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002c06:	6863      	ldr	r3, [r4, #4]
 8002c08:	b11b      	cbz	r3, 8002c12 <HAL_SPI_Transmit+0xc8>
 8002c0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10d      	bne.n	8002c2e <HAL_SPI_Transmit+0xe4>
      hspi->Instance->DR = *((uint16_t *)pData);
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002c18:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8002c1a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002c22:	e004      	b.n	8002c2e <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002c24:	2e00      	cmp	r6, #0
 8002c26:	d05d      	beq.n	8002ce4 <HAL_SPI_Transmit+0x19a>
 8002c28:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002c2c:	d10f      	bne.n	8002c4e <HAL_SPI_Transmit+0x104>
    while (hspi->TxXferCount > 0U)
 8002c2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b37b      	cbz	r3, 8002c94 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	f012 0f02 	tst.w	r2, #2
 8002c3c:	d0f2      	beq.n	8002c24 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((uint16_t *)pData);
 8002c3e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002c42:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount--;
 8002c44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002c4c:	e7ef      	b.n	8002c2e <HAL_SPI_Transmit+0xe4>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002c4e:	f7fd fabf 	bl	80001d0 <HAL_GetTick>
 8002c52:	1bc0      	subs	r0, r0, r7
 8002c54:	42b0      	cmp	r0, r6
 8002c56:	d3ea      	bcc.n	8002c2e <HAL_SPI_Transmit+0xe4>
          errorcode = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e78e      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002c5c:	2e00      	cmp	r6, #0
 8002c5e:	d043      	beq.n	8002ce8 <HAL_SPI_Transmit+0x19e>
 8002c60:	f1b6 3fff 	cmp.w	r6, #4294967295
 8002c64:	d10f      	bne.n	8002c86 <HAL_SPI_Transmit+0x13c>
    while (hspi->TxXferCount > 0U)
 8002c66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	b19b      	cbz	r3, 8002c94 <HAL_SPI_Transmit+0x14a>
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	f012 0f02 	tst.w	r2, #2
 8002c74:	d0f2      	beq.n	8002c5c <HAL_SPI_Transmit+0x112>
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 8002c76:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002c7a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8002c7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002c84:	e7ef      	b.n	8002c66 <HAL_SPI_Transmit+0x11c>
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8002c86:	f7fd faa3 	bl	80001d0 <HAL_GetTick>
 8002c8a:	1bc0      	subs	r0, r0, r7
 8002c8c:	42b0      	cmp	r0, r6
 8002c8e:	d3ea      	bcc.n	8002c66 <HAL_SPI_Transmit+0x11c>
          errorcode = HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e772      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8002c94:	9700      	str	r7, [sp, #0]
 8002c96:	4633      	mov	r3, r6
 8002c98:	2201      	movs	r2, #1
 8002c9a:	2102      	movs	r1, #2
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7ff fef5 	bl	8002a8c <SPI_WaitFlagStateUntilTimeout>
 8002ca2:	b108      	cbz	r0, 8002ca8 <HAL_SPI_Transmit+0x15e>
    errorcode = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e768      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002ca8:	463a      	mov	r2, r7
 8002caa:	4631      	mov	r1, r6
 8002cac:	4620      	mov	r0, r4
 8002cae:	f7ff ff38 	bl	8002b22 <SPI_CheckFlag_BSY>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	b118      	cbz	r0, 8002cbe <HAL_SPI_Transmit+0x174>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
    goto error;
 8002cbc:	e75d      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cbe:	68a2      	ldr	r2, [r4, #8]
 8002cc0:	b932      	cbnz	r2, 8002cd0 <HAL_SPI_Transmit+0x186>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cc2:	9203      	str	r2, [sp, #12]
 8002cc4:	6822      	ldr	r2, [r4, #0]
 8002cc6:	68d1      	ldr	r1, [r2, #12]
 8002cc8:	9103      	str	r1, [sp, #12]
 8002cca:	6892      	ldr	r2, [r2, #8]
 8002ccc:	9203      	str	r2, [sp, #12]
 8002cce:	9a03      	ldr	r2, [sp, #12]
  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cd0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	f43f af51 	beq.w	8002b7a <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e74e      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
    errorcode = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e74c      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e74a      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e748      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
          errorcode = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e746      	b.n	8002b7a <HAL_SPI_Transmit+0x30>
  __HAL_LOCK(hspi);
 8002cec:	2302      	movs	r3, #2
 8002cee:	e74a      	b.n	8002b86 <HAL_SPI_Transmit+0x3c>

08002cf0 <HAL_SPI_ErrorCallback>:
}
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_SPI_IRQHandler>:
{
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8002cfa:	6802      	ldr	r2, [r0, #0]
 8002cfc:	6850      	ldr	r0, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8002cfe:	6893      	ldr	r3, [r2, #8]
  if(((itflag & SPI_FLAG_OVR) == RESET) &&
 8002d00:	f003 0141 	and.w	r1, r3, #65	; 0x41
 8002d04:	2901      	cmp	r1, #1
 8002d06:	d00a      	beq.n	8002d1e <HAL_SPI_IRQHandler+0x2a>
  if(((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8002d08:	f013 0f02 	tst.w	r3, #2
 8002d0c:	d00e      	beq.n	8002d2c <HAL_SPI_IRQHandler+0x38>
 8002d0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002d12:	d00b      	beq.n	8002d2c <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8002d14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002d16:	4620      	mov	r0, r4
 8002d18:	4798      	blx	r3
}
 8002d1a:	b004      	add	sp, #16
 8002d1c:	bd10      	pop	{r4, pc}
     ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8002d1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d22:	d0f1      	beq.n	8002d08 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8002d24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d26:	4620      	mov	r0, r4
 8002d28:	4798      	blx	r3
    return;
 8002d2a:	e7f6      	b.n	8002d1a <HAL_SPI_IRQHandler+0x26>
  if(((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8002d2c:	f013 0f60 	tst.w	r3, #96	; 0x60
 8002d30:	d0f3      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x26>
 8002d32:	f010 0f20 	tst.w	r0, #32
 8002d36:	d0f0      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x26>
    if((itflag & SPI_FLAG_OVR) != RESET)
 8002d38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002d3c:	d00f      	beq.n	8002d5e <HAL_SPI_IRQHandler+0x6a>
      if(hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d3e:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
 8002d42:	b2c9      	uxtb	r1, r1
 8002d44:	2903      	cmp	r1, #3
 8002d46:	d03d      	beq.n	8002dc4 <HAL_SPI_IRQHandler+0xd0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d48:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002d4a:	f041 0104 	orr.w	r1, r1, #4
 8002d4e:	6561      	str	r1, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d50:	2100      	movs	r1, #0
 8002d52:	9101      	str	r1, [sp, #4]
 8002d54:	68d1      	ldr	r1, [r2, #12]
 8002d56:	9101      	str	r1, [sp, #4]
 8002d58:	6891      	ldr	r1, [r2, #8]
 8002d5a:	9101      	str	r1, [sp, #4]
 8002d5c:	9901      	ldr	r1, [sp, #4]
    if((itflag & SPI_FLAG_MODF) != RESET)
 8002d5e:	f013 0f20 	tst.w	r3, #32
 8002d62:	d00c      	beq.n	8002d7e <HAL_SPI_IRQHandler+0x8a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d64:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9303      	str	r3, [sp, #12]
 8002d70:	6893      	ldr	r3, [r2, #8]
 8002d72:	9303      	str	r3, [sp, #12]
 8002d74:	6813      	ldr	r3, [r2, #0]
 8002d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	9b03      	ldr	r3, [sp, #12]
    if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d7e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ca      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x26>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002d84:	6822      	ldr	r2, [r4, #0]
 8002d86:	6853      	ldr	r3, [r2, #4]
 8002d88:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002d8c:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN))||(HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002d94:	f010 0f03 	tst.w	r0, #3
 8002d98:	d01c      	beq.n	8002dd4 <HAL_SPI_IRQHandler+0xe0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002d9a:	6822      	ldr	r2, [r4, #0]
 8002d9c:	6853      	ldr	r3, [r2, #4]
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	6053      	str	r3, [r2, #4]
        if(hspi->hdmarx != NULL)
 8002da4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002da6:	b123      	cbz	r3, 8002db2 <HAL_SPI_IRQHandler+0xbe>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002da8:	4a0c      	ldr	r2, [pc, #48]	; (8002ddc <HAL_SPI_IRQHandler+0xe8>)
 8002daa:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8002dac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002dae:	f7fd fbe7 	bl	8000580 <HAL_DMA_Abort_IT>
        if(hspi->hdmatx != NULL)
 8002db2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0b0      	beq.n	8002d1a <HAL_SPI_IRQHandler+0x26>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_SPI_IRQHandler+0xe8>)
 8002dba:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8002dbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002dbe:	f7fd fbdf 	bl	8000580 <HAL_DMA_Abort_IT>
 8002dc2:	e7aa      	b.n	8002d1a <HAL_SPI_IRQHandler+0x26>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9302      	str	r3, [sp, #8]
 8002dc8:	68d3      	ldr	r3, [r2, #12]
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	6893      	ldr	r3, [r2, #8]
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	9b02      	ldr	r3, [sp, #8]
        return;
 8002dd2:	e7a2      	b.n	8002d1a <HAL_SPI_IRQHandler+0x26>
        HAL_SPI_ErrorCallback(hspi);
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f7ff ff8b 	bl	8002cf0 <HAL_SPI_ErrorCallback>
 8002dda:	e79e      	b.n	8002d1a <HAL_SPI_IRQHandler+0x26>
 8002ddc:	08002de1 	.word	0x08002de1

08002de0 <SPI_DMAAbortOnError>:
{
 8002de0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef* hspi = ( SPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002de2:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002de8:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8002dea:	f7ff ff81 	bl	8002cf0 <HAL_SPI_ErrorCallback>
}
 8002dee:	bd08      	pop	{r3, pc}

08002df0 <HAL_SPI_GetState>:
  return hspi->State;
 8002df0:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002df4:	4770      	bx	lr

08002df6 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d03c      	beq.n	8002e74 <HAL_SPI_Init+0x7e>
{
 8002dfa:	b510      	push	{r4, lr}
 8002dfc:	4604      	mov	r4, r0
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002e02:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d031      	beq.n	8002e6e <HAL_SPI_Init+0x78>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	6813      	ldr	r3, [r2, #0]
 8002e14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e18:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e1a:	6863      	ldr	r3, [r4, #4]
 8002e1c:	68a2      	ldr	r2, [r4, #8]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	68e2      	ldr	r2, [r4, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	6922      	ldr	r2, [r4, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	6962      	ldr	r2, [r4, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	69a2      	ldr	r2, [r4, #24]
 8002e2e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002e32:	4313      	orrs	r3, r2
 8002e34:	69e2      	ldr	r2, [r4, #28]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	6a22      	ldr	r2, [r4, #32]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002e3e:	6822      	ldr	r2, [r4, #0]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6013      	str	r3, [r2, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e44:	8b63      	ldrh	r3, [r4, #26]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e4c:	6822      	ldr	r2, [r4, #0]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e56:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e58:	6822      	ldr	r2, [r4, #0]
 8002e5a:	69d3      	ldr	r3, [r2, #28]
 8002e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e60:	61d3      	str	r3, [r2, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e62:	2000      	movs	r0, #0
 8002e64:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
}
 8002e6c:	bd10      	pop	{r4, pc}
    HAL_SPI_MspInit(hspi);
 8002e6e:	f001 feb1 	bl	8004bd4 <HAL_SPI_MspInit>
 8002e72:	e7ca      	b.n	8002e0a <HAL_SPI_Init+0x14>
    return HAL_ERROR;
 8002e74:	2001      	movs	r0, #1
}
 8002e76:	4770      	bx	lr

08002e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e78:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e7a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7c:	6a04      	ldr	r4, [r0, #32]
 8002e7e:	f024 0401 	bic.w	r4, r4, #1
 8002e82:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e84:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e86:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e8a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002e92:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e94:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e96:	6203      	str	r3, [r0, #32]
}
 8002e98:	bc10      	pop	{r4}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e9c:	b410      	push	{r4}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e9e:	6a03      	ldr	r3, [r0, #32]
 8002ea0:	f023 0310 	bic.w	r3, r3, #16
 8002ea4:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002ea8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eaa:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eae:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eb6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eba:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ebc:	6203      	str	r3, [r0, #32]
}
 8002ebe:	bc10      	pop	{r4}
 8002ec0:	4770      	bx	lr

08002ec2 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002ec2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002ec8:	f041 0107 	orr.w	r1, r1, #7
 8002ecc:	4319      	orrs	r1, r3
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002ece:	6081      	str	r1, [r0, #8]
}
 8002ed0:	4770      	bx	lr

08002ed2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed2:	b410      	push	{r4}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8002ed4:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eda:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ee2:	6083      	str	r3, [r0, #8]
}
 8002ee4:	bc10      	pop	{r4}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE(htim);
 8002eee:	6802      	ldr	r2, [r0, #0]
 8002ef0:	6813      	ldr	r3, [r2, #0]
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002efe:	2000      	movs	r0, #0
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_Base_Stop>:
  htim->State= HAL_TIM_STATE_BUSY;
 8002f02:	2302      	movs	r3, #2
 8002f04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 8002f08:	6803      	ldr	r3, [r0, #0]
 8002f0a:	6a19      	ldr	r1, [r3, #32]
 8002f0c:	f241 1211 	movw	r2, #4369	; 0x1111
 8002f10:	4211      	tst	r1, r2
 8002f12:	d108      	bne.n	8002f26 <HAL_TIM_Base_Stop+0x24>
 8002f14:	6a19      	ldr	r1, [r3, #32]
 8002f16:	f240 4244 	movw	r2, #1092	; 0x444
 8002f1a:	4211      	tst	r1, r2
 8002f1c:	d103      	bne.n	8002f26 <HAL_TIM_Base_Stop+0x24>
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	f022 0201 	bic.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
  htim->State= HAL_TIM_STATE_READY;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f30:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d07d      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x104>
{
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002f42:	2302      	movs	r3, #2
 8002f44:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002f48:	6802      	ldr	r2, [r0, #0]
 8002f4a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f50:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002f54:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002f56:	680b      	ldr	r3, [r1, #0]
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d057      	beq.n	800300c <HAL_TIM_ConfigClockSource+0xdc>
 8002f5c:	d910      	bls.n	8002f80 <HAL_TIM_ConfigClockSource+0x50>
 8002f5e:	2b70      	cmp	r3, #112	; 0x70
 8002f60:	d03e      	beq.n	8002fe0 <HAL_TIM_ConfigClockSource+0xb0>
 8002f62:	d81f      	bhi.n	8002fa4 <HAL_TIM_ConfigClockSource+0x74>
 8002f64:	2b50      	cmp	r3, #80	; 0x50
 8002f66:	d047      	beq.n	8002ff8 <HAL_TIM_ConfigClockSource+0xc8>
 8002f68:	2b60      	cmp	r3, #96	; 0x60
 8002f6a:	d132      	bne.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6c:	68ca      	ldr	r2, [r1, #12]
 8002f6e:	6849      	ldr	r1, [r1, #4]
 8002f70:	6800      	ldr	r0, [r0, #0]
 8002f72:	f7ff ff93 	bl	8002e9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f76:	2160      	movs	r1, #96	; 0x60
 8002f78:	6820      	ldr	r0, [r4, #0]
 8002f7a:	f7ff ffa2 	bl	8002ec2 <TIM_ITRx_SetConfig>
    break;
 8002f7e:	e028      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8002f80:	2b10      	cmp	r3, #16
 8002f82:	d04d      	beq.n	8003020 <HAL_TIM_ConfigClockSource+0xf0>
 8002f84:	d908      	bls.n	8002f98 <HAL_TIM_ConfigClockSource+0x68>
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d04f      	beq.n	800302a <HAL_TIM_ConfigClockSource+0xfa>
 8002f8a:	2b30      	cmp	r3, #48	; 0x30
 8002f8c:	d121      	bne.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002f8e:	2130      	movs	r1, #48	; 0x30
 8002f90:	6800      	ldr	r0, [r0, #0]
 8002f92:	f7ff ff96 	bl	8002ec2 <TIM_ITRx_SetConfig>
    break;
 8002f96:	e01c      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8002f98:	b9db      	cbnz	r3, 8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	6800      	ldr	r0, [r0, #0]
 8002f9e:	f7ff ff90 	bl	8002ec2 <TIM_ITRx_SetConfig>
    break;
 8002fa2:	e016      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
  switch (sClockSourceConfig->ClockSource)
 8002fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_ConfigClockSource+0x98>
 8002faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fae:	d110      	bne.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ETR_SetConfig(htim->Instance,
 8002fb0:	68cb      	ldr	r3, [r1, #12]
 8002fb2:	684a      	ldr	r2, [r1, #4]
 8002fb4:	6889      	ldr	r1, [r1, #8]
 8002fb6:	6800      	ldr	r0, [r0, #0]
 8002fb8:	f7ff ff8b 	bl	8002ed2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fbc:	6822      	ldr	r2, [r4, #0]
 8002fbe:	6893      	ldr	r3, [r2, #8]
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc4:	6093      	str	r3, [r2, #8]
    break;
 8002fc6:	e004      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002fc8:	6802      	ldr	r2, [r0, #0]
 8002fca:	6893      	ldr	r3, [r2, #8]
 8002fcc:	f023 0307 	bic.w	r3, r3, #7
 8002fd0:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002fde:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 8002fe0:	68cb      	ldr	r3, [r1, #12]
 8002fe2:	684a      	ldr	r2, [r1, #4]
 8002fe4:	6889      	ldr	r1, [r1, #8]
 8002fe6:	6800      	ldr	r0, [r0, #0]
 8002fe8:	f7ff ff73 	bl	8002ed2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fec:	6822      	ldr	r2, [r4, #0]
 8002fee:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002ff4:	6093      	str	r3, [r2, #8]
    break;
 8002ff6:	e7ec      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff8:	68ca      	ldr	r2, [r1, #12]
 8002ffa:	6849      	ldr	r1, [r1, #4]
 8002ffc:	6800      	ldr	r0, [r0, #0]
 8002ffe:	f7ff ff3b 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003002:	2150      	movs	r1, #80	; 0x50
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	f7ff ff5c 	bl	8002ec2 <TIM_ITRx_SetConfig>
    break;
 800300a:	e7e2      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800300c:	68ca      	ldr	r2, [r1, #12]
 800300e:	6849      	ldr	r1, [r1, #4]
 8003010:	6800      	ldr	r0, [r0, #0]
 8003012:	f7ff ff31 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003016:	2140      	movs	r1, #64	; 0x40
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	f7ff ff52 	bl	8002ec2 <TIM_ITRx_SetConfig>
    break;
 800301e:	e7d8      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003020:	2110      	movs	r1, #16
 8003022:	6800      	ldr	r0, [r0, #0]
 8003024:	f7ff ff4d 	bl	8002ec2 <TIM_ITRx_SetConfig>
    break;
 8003028:	e7d3      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 800302a:	2120      	movs	r1, #32
 800302c:	6800      	ldr	r0, [r0, #0]
 800302e:	f7ff ff48 	bl	8002ec2 <TIM_ITRx_SetConfig>
    break;
 8003032:	e7ce      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 8003034:	2002      	movs	r0, #2
}
 8003036:	4770      	bx	lr

08003038 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8003038:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800303a:	4a1b      	ldr	r2, [pc, #108]	; (80030a8 <TIM_Base_SetConfig+0x70>)
 800303c:	4290      	cmp	r0, r2
 800303e:	d00a      	beq.n	8003056 <TIM_Base_SetConfig+0x1e>
 8003040:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003044:	d007      	beq.n	8003056 <TIM_Base_SetConfig+0x1e>
 8003046:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800304a:	4290      	cmp	r0, r2
 800304c:	d003      	beq.n	8003056 <TIM_Base_SetConfig+0x1e>
 800304e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003052:	4290      	cmp	r0, r2
 8003054:	d103      	bne.n	800305e <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800305a:	684a      	ldr	r2, [r1, #4]
 800305c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	4a12      	ldr	r2, [pc, #72]	; (80030a8 <TIM_Base_SetConfig+0x70>)
 8003060:	4290      	cmp	r0, r2
 8003062:	d00a      	beq.n	800307a <TIM_Base_SetConfig+0x42>
 8003064:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003068:	d007      	beq.n	800307a <TIM_Base_SetConfig+0x42>
 800306a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800306e:	4290      	cmp	r0, r2
 8003070:	d003      	beq.n	800307a <TIM_Base_SetConfig+0x42>
 8003072:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003076:	4290      	cmp	r0, r2
 8003078:	d103      	bne.n	8003082 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 800307a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	68ca      	ldr	r2, [r1, #12]
 8003080:	4313      	orrs	r3, r2
  tmpcr1 &= ~TIM_CR1_ARPE;
 8003082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8003086:	694a      	ldr	r2, [r1, #20]
 8003088:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800308a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800308c:	688b      	ldr	r3, [r1, #8]
 800308e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003090:	680b      	ldr	r3, [r1, #0]
 8003092:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <TIM_Base_SetConfig+0x70>)
 8003096:	4298      	cmp	r0, r3
 8003098:	d002      	beq.n	80030a0 <TIM_Base_SetConfig+0x68>
  TIMx->EGR = TIM_EGR_UG;
 800309a:	2301      	movs	r3, #1
 800309c:	6143      	str	r3, [r0, #20]
}
 800309e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80030a0:	690b      	ldr	r3, [r1, #16]
 80030a2:	6303      	str	r3, [r0, #48]	; 0x30
 80030a4:	e7f9      	b.n	800309a <TIM_Base_SetConfig+0x62>
 80030a6:	bf00      	nop
 80030a8:	40012c00 	.word	0x40012c00

080030ac <HAL_TIM_Base_Init>:
  if(htim == NULL)
 80030ac:	b1a8      	cbz	r0, 80030da <HAL_TIM_Base_Init+0x2e>
{
 80030ae:	b510      	push	{r4, lr}
 80030b0:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 80030b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030b6:	b15b      	cbz	r3, 80030d0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80030b8:	2302      	movs	r3, #2
 80030ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	1d21      	adds	r1, r4, #4
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	f7ff ffb9 	bl	8003038 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80030cc:	2000      	movs	r0, #0
}
 80030ce:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80030d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80030d4:	f001 fdc2 	bl	8004c5c <HAL_TIM_Base_MspInit>
 80030d8:	e7ee      	b.n	80030b8 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80030da:	2001      	movs	r0, #1
}
 80030dc:	4770      	bx	lr

080030de <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80030de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d022      	beq.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x4e>
{
 80030e6:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80030e8:	2201      	movs	r2, #1
 80030ea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ee:	2302      	movs	r3, #2
 80030f0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80030f4:	6804      	ldr	r4, [r0, #0]
 80030f6:	6863      	ldr	r3, [r4, #4]
 80030f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fc:	6063      	str	r3, [r4, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80030fe:	6804      	ldr	r4, [r0, #0]
 8003100:	6863      	ldr	r3, [r4, #4]
 8003102:	680d      	ldr	r5, [r1, #0]
 8003104:	432b      	orrs	r3, r5
 8003106:	6063      	str	r3, [r4, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003108:	6804      	ldr	r4, [r0, #0]
 800310a:	68a3      	ldr	r3, [r4, #8]
 800310c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003110:	60a3      	str	r3, [r4, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003112:	6804      	ldr	r4, [r0, #0]
 8003114:	68a3      	ldr	r3, [r4, #8]
 8003116:	6849      	ldr	r1, [r1, #4]
 8003118:	430b      	orrs	r3, r1
 800311a:	60a3      	str	r3, [r4, #8]

  htim->State = HAL_TIM_STATE_READY;
 800311c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003120:	2300      	movs	r3, #0
 8003122:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003126:	4618      	mov	r0, r3
}
 8003128:	bc30      	pop	{r4, r5}
 800312a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800312c:	2002      	movs	r0, #2
}
 800312e:	4770      	bx	lr

08003130 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003130:	6802      	ldr	r2, [r0, #0]
 8003132:	68d3      	ldr	r3, [r2, #12]
 8003134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003138:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313a:	6802      	ldr	r2, [r0, #0]
 800313c:	6953      	ldr	r3, [r2, #20]
 800313e:	f023 0301 	bic.w	r3, r3, #1
 8003142:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003144:	2320      	movs	r3, #32
 8003146:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800314a:	4770      	bx	lr

0800314c <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800314c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b21      	cmp	r3, #33	; 0x21
 8003154:	d12a      	bne.n	80031ac <UART_Transmit_IT+0x60>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003156:	6883      	ldr	r3, [r0, #8]
 8003158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800315c:	d016      	beq.n	800318c <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800315e:	6a03      	ldr	r3, [r0, #32]
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	6202      	str	r2, [r0, #32]
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	6803      	ldr	r3, [r0, #0]
 8003168:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 800316a:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800316c:	3b01      	subs	r3, #1
 800316e:	b29b      	uxth	r3, r3
 8003170:	84c3      	strh	r3, [r0, #38]	; 0x26
 8003172:	b9eb      	cbnz	r3, 80031b0 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003174:	6802      	ldr	r2, [r0, #0]
 8003176:	68d3      	ldr	r3, [r2, #12]
 8003178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800317c:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800317e:	6802      	ldr	r2, [r0, #0]
 8003180:	68d3      	ldr	r3, [r2, #12]
 8003182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003186:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 8003188:	2000      	movs	r0, #0
 800318a:	4770      	bx	lr
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800318c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	6802      	ldr	r2, [r0, #0]
 8003192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003196:	6053      	str	r3, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003198:	6903      	ldr	r3, [r0, #16]
 800319a:	b91b      	cbnz	r3, 80031a4 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 800319c:	6a03      	ldr	r3, [r0, #32]
 800319e:	3302      	adds	r3, #2
 80031a0:	6203      	str	r3, [r0, #32]
 80031a2:	e7e2      	b.n	800316a <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80031a4:	6a03      	ldr	r3, [r0, #32]
 80031a6:	3301      	adds	r3, #1
 80031a8:	6203      	str	r3, [r0, #32]
 80031aa:	e7de      	b.n	800316a <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2002      	movs	r0, #2
 80031ae:	4770      	bx	lr
    return HAL_OK;
 80031b0:	2000      	movs	r0, #0
  }
}
 80031b2:	4770      	bx	lr

080031b4 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b8:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031ba:	6802      	ldr	r2, [r0, #0]
 80031bc:	6913      	ldr	r3, [r2, #16]
 80031be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031c2:	68c1      	ldr	r1, [r0, #12]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6113      	str	r3, [r2, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031c8:	6883      	ldr	r3, [r0, #8]
 80031ca:	6902      	ldr	r2, [r0, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	6942      	ldr	r2, [r0, #20]
 80031d0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, 
 80031d2:	6801      	ldr	r1, [r0, #0]
 80031d4:	68ca      	ldr	r2, [r1, #12]
 80031d6:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80031da:	f022 020c 	bic.w	r2, r2, #12
 80031de:	4313      	orrs	r3, r2
 80031e0:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031e2:	6802      	ldr	r2, [r0, #0]
 80031e4:	6953      	ldr	r3, [r2, #20]
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	6981      	ldr	r1, [r0, #24]
 80031ec:	430b      	orrs	r3, r1
 80031ee:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80031f0:	6802      	ldr	r2, [r0, #0]
 80031f2:	4b59      	ldr	r3, [pc, #356]	; (8003358 <UART_SetConfig+0x1a4>)
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d057      	beq.n	80032a8 <UART_SetConfig+0xf4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80031f8:	f7ff f8e0 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 80031fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003204:	686c      	ldr	r4, [r5, #4]
 8003206:	00a4      	lsls	r4, r4, #2
 8003208:	fbb0 f4f4 	udiv	r4, r0, r4
 800320c:	4f53      	ldr	r7, [pc, #332]	; (800335c <UART_SetConfig+0x1a8>)
 800320e:	fba7 3404 	umull	r3, r4, r7, r4
 8003212:	0964      	lsrs	r4, r4, #5
 8003214:	0126      	lsls	r6, r4, #4
 8003216:	f7ff f8d1 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 800321a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800321e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003222:	686c      	ldr	r4, [r5, #4]
 8003224:	00a4      	lsls	r4, r4, #2
 8003226:	fbb0 f9f4 	udiv	r9, r0, r4
 800322a:	f7ff f8c7 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 800322e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003232:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003236:	686c      	ldr	r4, [r5, #4]
 8003238:	00a4      	lsls	r4, r4, #2
 800323a:	fbb0 f4f4 	udiv	r4, r0, r4
 800323e:	fba7 3404 	umull	r3, r4, r7, r4
 8003242:	0964      	lsrs	r4, r4, #5
 8003244:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003248:	fb08 9414 	mls	r4, r8, r4, r9
 800324c:	0124      	lsls	r4, r4, #4
 800324e:	3432      	adds	r4, #50	; 0x32
 8003250:	fba7 3404 	umull	r3, r4, r7, r4
 8003254:	0964      	lsrs	r4, r4, #5
 8003256:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800325a:	4434      	add	r4, r6
 800325c:	f7ff f8ae 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003264:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003268:	686e      	ldr	r6, [r5, #4]
 800326a:	00b6      	lsls	r6, r6, #2
 800326c:	fbb0 f6f6 	udiv	r6, r0, r6
 8003270:	f7ff f8a4 	bl	80023bc <HAL_RCC_GetPCLK1Freq>
 8003274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800327c:	686b      	ldr	r3, [r5, #4]
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	fbb0 f0f3 	udiv	r0, r0, r3
 8003284:	fba7 3000 	umull	r3, r0, r7, r0
 8003288:	0940      	lsrs	r0, r0, #5
 800328a:	fb08 6810 	mls	r8, r8, r0, r6
 800328e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003292:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8003296:	fba7 3708 	umull	r3, r7, r7, r8
 800329a:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800329e:	682b      	ldr	r3, [r5, #0]
 80032a0:	4427      	add	r7, r4
 80032a2:	609f      	str	r7, [r3, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 80032a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80032a8:	f7ff f898 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80032ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032b4:	686c      	ldr	r4, [r5, #4]
 80032b6:	00a4      	lsls	r4, r4, #2
 80032b8:	fbb0 f4f4 	udiv	r4, r0, r4
 80032bc:	4f27      	ldr	r7, [pc, #156]	; (800335c <UART_SetConfig+0x1a8>)
 80032be:	fba7 3404 	umull	r3, r4, r7, r4
 80032c2:	0964      	lsrs	r4, r4, #5
 80032c4:	0126      	lsls	r6, r4, #4
 80032c6:	f7ff f889 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80032ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032d2:	686c      	ldr	r4, [r5, #4]
 80032d4:	00a4      	lsls	r4, r4, #2
 80032d6:	fbb0 f9f4 	udiv	r9, r0, r4
 80032da:	f7ff f87f 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80032de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80032e6:	686c      	ldr	r4, [r5, #4]
 80032e8:	00a4      	lsls	r4, r4, #2
 80032ea:	fbb0 f4f4 	udiv	r4, r0, r4
 80032ee:	fba7 3404 	umull	r3, r4, r7, r4
 80032f2:	0964      	lsrs	r4, r4, #5
 80032f4:	f04f 0864 	mov.w	r8, #100	; 0x64
 80032f8:	fb08 9414 	mls	r4, r8, r4, r9
 80032fc:	0124      	lsls	r4, r4, #4
 80032fe:	3432      	adds	r4, #50	; 0x32
 8003300:	fba7 3404 	umull	r3, r4, r7, r4
 8003304:	0964      	lsrs	r4, r4, #5
 8003306:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 800330a:	4434      	add	r4, r6
 800330c:	f7ff f866 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 8003310:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003314:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003318:	686e      	ldr	r6, [r5, #4]
 800331a:	00b6      	lsls	r6, r6, #2
 800331c:	fbb0 f6f6 	udiv	r6, r0, r6
 8003320:	f7ff f85c 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 8003324:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003328:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800332c:	686b      	ldr	r3, [r5, #4]
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	fbb0 f0f3 	udiv	r0, r0, r3
 8003334:	fba7 3000 	umull	r3, r0, r7, r0
 8003338:	0940      	lsrs	r0, r0, #5
 800333a:	fb08 6810 	mls	r8, r8, r0, r6
 800333e:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8003342:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8003346:	fba7 3708 	umull	r3, r7, r7, r8
 800334a:	f3c7 1743 	ubfx	r7, r7, #5, #4
 800334e:	682b      	ldr	r3, [r5, #0]
 8003350:	4427      	add	r7, r4
 8003352:	609f      	str	r7, [r3, #8]
 8003354:	e7a6      	b.n	80032a4 <UART_SetConfig+0xf0>
 8003356:	bf00      	nop
 8003358:	40013800 	.word	0x40013800
 800335c:	51eb851f 	.word	0x51eb851f

08003360 <UART_WaitOnFlagUntilTimeout>:
{
 8003360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003364:	4605      	mov	r5, r0
 8003366:	460f      	mov	r7, r1
 8003368:	4616      	mov	r6, r2
 800336a:	4698      	mov	r8, r3
 800336c:	9c06      	ldr	r4, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800336e:	682b      	ldr	r3, [r5, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	ea37 0303 	bics.w	r3, r7, r3
 8003376:	bf0c      	ite	eq
 8003378:	2301      	moveq	r3, #1
 800337a:	2300      	movne	r3, #0
 800337c:	42b3      	cmp	r3, r6
 800337e:	d11d      	bne.n	80033bc <UART_WaitOnFlagUntilTimeout+0x5c>
    if(Timeout != HAL_MAX_DELAY)
 8003380:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003384:	d0f3      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xe>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003386:	b12c      	cbz	r4, 8003394 <UART_WaitOnFlagUntilTimeout+0x34>
 8003388:	f7fc ff22 	bl	80001d0 <HAL_GetTick>
 800338c:	eba0 0008 	sub.w	r0, r0, r8
 8003390:	42a0      	cmp	r0, r4
 8003392:	d9ec      	bls.n	800336e <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003394:	682a      	ldr	r2, [r5, #0]
 8003396:	68d3      	ldr	r3, [r2, #12]
 8003398:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800339c:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	682a      	ldr	r2, [r5, #0]
 80033a0:	6953      	ldr	r3, [r2, #20]
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80033a8:	2320      	movs	r3, #32
 80033aa:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033ae:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80033b2:	2300      	movs	r3, #0
 80033b4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80033b8:	2003      	movs	r0, #3
 80033ba:	e000      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80033bc:	2000      	movs	r0, #0
}
 80033be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033c2 <HAL_UART_Init>:
  if(huart == NULL)
 80033c2:	b358      	cbz	r0, 800341c <HAL_UART_Init+0x5a>
{
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_RESET)
 80033c8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033cc:	b30b      	cbz	r3, 8003412 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80033ce:	2324      	movs	r3, #36	; 0x24
 80033d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	68d3      	ldr	r3, [r2, #12]
 80033d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033dc:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033de:	4620      	mov	r0, r4
 80033e0:	f7ff fee8 	bl	80031b4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	6913      	ldr	r3, [r2, #16]
 80033e8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80033ec:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033ee:	6822      	ldr	r2, [r4, #0]
 80033f0:	6953      	ldr	r3, [r2, #20]
 80033f2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80033f6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80033f8:	6822      	ldr	r2, [r4, #0]
 80033fa:	68d3      	ldr	r3, [r2, #12]
 80033fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003400:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003402:	2000      	movs	r0, #0
 8003404:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8003406:	2320      	movs	r3, #32
 8003408:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800340c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003410:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003412:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8003416:	f001 fc35 	bl	8004c84 <HAL_UART_MspInit>
 800341a:	e7d8      	b.n	80033ce <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800341c:	2001      	movs	r0, #1
}
 800341e:	4770      	bx	lr

08003420 <HAL_UART_Transmit>:
{
 8003420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	461e      	mov	r6, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003428:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b20      	cmp	r3, #32
 8003430:	d155      	bne.n	80034de <HAL_UART_Transmit+0xbe>
 8003432:	4604      	mov	r4, r0
 8003434:	460d      	mov	r5, r1
 8003436:	4690      	mov	r8, r2
    if((pData == NULL) || (Size == 0U))
 8003438:	2900      	cmp	r1, #0
 800343a:	d055      	beq.n	80034e8 <HAL_UART_Transmit+0xc8>
 800343c:	2a00      	cmp	r2, #0
 800343e:	d055      	beq.n	80034ec <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 8003440:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003444:	2b01      	cmp	r3, #1
 8003446:	d053      	beq.n	80034f0 <HAL_UART_Transmit+0xd0>
 8003448:	2301      	movs	r3, #1
 800344a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	2300      	movs	r3, #0
 8003450:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003452:	2321      	movs	r3, #33	; 0x21
 8003454:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003458:	f7fc feba 	bl	80001d0 <HAL_GetTick>
 800345c:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 800345e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003462:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8003466:	e010      	b.n	800348a <HAL_UART_Transmit+0x6a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003468:	9600      	str	r6, [sp, #0]
 800346a:	463b      	mov	r3, r7
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff ff75 	bl	8003360 <UART_WaitOnFlagUntilTimeout>
 8003476:	2800      	cmp	r0, #0
 8003478:	d13c      	bne.n	80034f4 <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800347a:	882b      	ldrh	r3, [r5, #0]
 800347c:	6822      	ldr	r2, [r4, #0]
 800347e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003482:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8003484:	6923      	ldr	r3, [r4, #16]
 8003486:	b9c3      	cbnz	r3, 80034ba <HAL_UART_Transmit+0x9a>
          pData +=2U;
 8003488:	3502      	adds	r5, #2
    while(huart->TxXferCount > 0U)
 800348a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800348c:	b29b      	uxth	r3, r3
 800348e:	b1b3      	cbz	r3, 80034be <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 8003490:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003492:	3b01      	subs	r3, #1
 8003494:	b29b      	uxth	r3, r3
 8003496:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003498:	68a3      	ldr	r3, [r4, #8]
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	d0e3      	beq.n	8003468 <HAL_UART_Transmit+0x48>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a0:	9600      	str	r6, [sp, #0]
 80034a2:	463b      	mov	r3, r7
 80034a4:	2200      	movs	r2, #0
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7ff ff59 	bl	8003360 <UART_WaitOnFlagUntilTimeout>
 80034ae:	bb18      	cbnz	r0, 80034f8 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034b0:	782a      	ldrb	r2, [r5, #0]
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	3501      	adds	r5, #1
 80034b8:	e7e7      	b.n	800348a <HAL_UART_Transmit+0x6a>
          pData +=1U;
 80034ba:	3501      	adds	r5, #1
 80034bc:	e7e5      	b.n	800348a <HAL_UART_Transmit+0x6a>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034be:	9600      	str	r6, [sp, #0]
 80034c0:	463b      	mov	r3, r7
 80034c2:	2200      	movs	r2, #0
 80034c4:	2140      	movs	r1, #64	; 0x40
 80034c6:	4620      	mov	r0, r4
 80034c8:	f7ff ff4a 	bl	8003360 <UART_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	b9a8      	cbnz	r0, 80034fc <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 80034d0:	2220      	movs	r2, #32
 80034d2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80034d6:	2200      	movs	r2, #0
 80034d8:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 80034dc:	e000      	b.n	80034e0 <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	b002      	add	sp, #8
 80034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e7f9      	b.n	80034e0 <HAL_UART_Transmit+0xc0>
 80034ec:	2301      	movs	r3, #1
 80034ee:	e7f7      	b.n	80034e0 <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 80034f0:	2302      	movs	r3, #2
 80034f2:	e7f5      	b.n	80034e0 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e7f3      	b.n	80034e0 <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e7f1      	b.n	80034e0 <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e7ef      	b.n	80034e0 <HAL_UART_Transmit+0xc0>

08003500 <HAL_UART_TxCpltCallback>:
}
 8003500:	4770      	bx	lr

08003502 <UART_EndTransmit_IT>:
{
 8003502:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003504:	6801      	ldr	r1, [r0, #0]
 8003506:	68cb      	ldr	r3, [r1, #12]
 8003508:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800350c:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 800350e:	2320      	movs	r3, #32
 8003510:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8003514:	f7ff fff4 	bl	8003500 <HAL_UART_TxCpltCallback>
}
 8003518:	2000      	movs	r0, #0
 800351a:	bd08      	pop	{r3, pc}

0800351c <HAL_UART_RxCpltCallback>:
}
 800351c:	4770      	bx	lr

0800351e <UART_Receive_IT>:
{
 800351e:	b508      	push	{r3, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8003520:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b22      	cmp	r3, #34	; 0x22
 8003528:	d145      	bne.n	80035b6 <UART_Receive_IT+0x98>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800352a:	6883      	ldr	r3, [r0, #8]
 800352c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003530:	d00e      	beq.n	8003550 <UART_Receive_IT+0x32>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003532:	6903      	ldr	r3, [r0, #16]
 8003534:	bb03      	cbnz	r3, 8003578 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003536:	6803      	ldr	r3, [r0, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800353c:	1c59      	adds	r1, r3, #1
 800353e:	6281      	str	r1, [r0, #40]	; 0x28
 8003540:	701a      	strb	r2, [r3, #0]
    if(--huart->RxXferCount == 0U)
 8003542:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003544:	3b01      	subs	r3, #1
 8003546:	b29b      	uxth	r3, r3
 8003548:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800354a:	b1f3      	cbz	r3, 800358a <UART_Receive_IT+0x6c>
    return HAL_OK;
 800354c:	2000      	movs	r0, #0
 800354e:	e033      	b.n	80035b8 <UART_Receive_IT+0x9a>
      tmp = (uint16_t*) huart->pRxBuffPtr;
 8003550:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003552:	6903      	ldr	r3, [r0, #16]
 8003554:	b943      	cbnz	r3, 8003568 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003556:	6803      	ldr	r3, [r0, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800355e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 8003560:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003562:	3302      	adds	r3, #2
 8003564:	6283      	str	r3, [r0, #40]	; 0x28
 8003566:	e7ec      	b.n	8003542 <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003568:	6803      	ldr	r3, [r0, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 8003570:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003572:	3301      	adds	r3, #1
 8003574:	6283      	str	r3, [r0, #40]	; 0x28
 8003576:	e7e4      	b.n	8003542 <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003578:	6803      	ldr	r3, [r0, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800357e:	1c51      	adds	r1, r2, #1
 8003580:	6281      	str	r1, [r0, #40]	; 0x28
 8003582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003586:	7013      	strb	r3, [r2, #0]
 8003588:	e7db      	b.n	8003542 <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800358a:	6802      	ldr	r2, [r0, #0]
 800358c:	68d3      	ldr	r3, [r2, #12]
 800358e:	f023 0320 	bic.w	r3, r3, #32
 8003592:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003594:	6802      	ldr	r2, [r0, #0]
 8003596:	68d3      	ldr	r3, [r2, #12]
 8003598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800359c:	60d3      	str	r3, [r2, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800359e:	6802      	ldr	r2, [r0, #0]
 80035a0:	6953      	ldr	r3, [r2, #20]
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80035a8:	2320      	movs	r3, #32
 80035aa:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80035ae:	f7ff ffb5 	bl	800351c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80035b2:	2000      	movs	r0, #0
 80035b4:	e000      	b.n	80035b8 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80035b6:	2002      	movs	r0, #2
}
 80035b8:	bd08      	pop	{r3, pc}

080035ba <HAL_UART_ErrorCallback>:
}
 80035ba:	4770      	bx	lr

080035bc <HAL_UART_IRQHandler>:
{
 80035bc:	b510      	push	{r4, lr}
 80035be:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035c0:	6802      	ldr	r2, [r0, #0]
 80035c2:	6813      	ldr	r3, [r2, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c4:	68d1      	ldr	r1, [r2, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035c6:	6952      	ldr	r2, [r2, #20]
  if(errorflags == RESET)
 80035c8:	f013 000f 	ands.w	r0, r3, #15
 80035cc:	d105      	bne.n	80035da <HAL_UART_IRQHandler+0x1e>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035ce:	f013 0f20 	tst.w	r3, #32
 80035d2:	d002      	beq.n	80035da <HAL_UART_IRQHandler+0x1e>
 80035d4:	f011 0f20 	tst.w	r1, #32
 80035d8:	d153      	bne.n	8003682 <HAL_UART_IRQHandler+0xc6>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035da:	2800      	cmp	r0, #0
 80035dc:	d067      	beq.n	80036ae <HAL_UART_IRQHandler+0xf2>
 80035de:	f012 0201 	ands.w	r2, r2, #1
 80035e2:	d102      	bne.n	80035ea <HAL_UART_IRQHandler+0x2e>
 80035e4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80035e8:	d061      	beq.n	80036ae <HAL_UART_IRQHandler+0xf2>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ea:	f013 0f01 	tst.w	r3, #1
 80035ee:	d006      	beq.n	80035fe <HAL_UART_IRQHandler+0x42>
 80035f0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80035f4:	d003      	beq.n	80035fe <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80035f8:	f040 0001 	orr.w	r0, r0, #1
 80035fc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035fe:	f013 0f04 	tst.w	r3, #4
 8003602:	d004      	beq.n	800360e <HAL_UART_IRQHandler+0x52>
 8003604:	b11a      	cbz	r2, 800360e <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003606:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003608:	f040 0002 	orr.w	r0, r0, #2
 800360c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360e:	f013 0f02 	tst.w	r3, #2
 8003612:	d004      	beq.n	800361e <HAL_UART_IRQHandler+0x62>
 8003614:	b11a      	cbz	r2, 800361e <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003616:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8003618:	f040 0004 	orr.w	r0, r0, #4
 800361c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800361e:	f013 0f08 	tst.w	r3, #8
 8003622:	d004      	beq.n	800362e <HAL_UART_IRQHandler+0x72>
 8003624:	b11a      	cbz	r2, 800362e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003626:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003628:	f042 0208 	orr.w	r2, r2, #8
 800362c:	63e2      	str	r2, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800362e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003630:	2a00      	cmp	r2, #0
 8003632:	d048      	beq.n	80036c6 <HAL_UART_IRQHandler+0x10a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003634:	f013 0f20 	tst.w	r3, #32
 8003638:	d002      	beq.n	8003640 <HAL_UART_IRQHandler+0x84>
 800363a:	f011 0f20 	tst.w	r1, #32
 800363e:	d124      	bne.n	800368a <HAL_UART_IRQHandler+0xce>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003648:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800364a:	f012 0f08 	tst.w	r2, #8
 800364e:	d100      	bne.n	8003652 <HAL_UART_IRQHandler+0x96>
 8003650:	b33b      	cbz	r3, 80036a2 <HAL_UART_IRQHandler+0xe6>
        UART_EndRxTransfer(huart);
 8003652:	4620      	mov	r0, r4
 8003654:	f7ff fd6c 	bl	8003130 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003660:	d01b      	beq.n	800369a <HAL_UART_IRQHandler+0xde>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003668:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800366a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800366c:	b18b      	cbz	r3, 8003692 <HAL_UART_IRQHandler+0xd6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_UART_IRQHandler+0x11c>)
 8003670:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003672:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003674:	f7fc ff84 	bl	8000580 <HAL_DMA_Abort_IT>
 8003678:	b328      	cbz	r0, 80036c6 <HAL_UART_IRQHandler+0x10a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800367a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800367c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800367e:	4798      	blx	r3
 8003680:	e021      	b.n	80036c6 <HAL_UART_IRQHandler+0x10a>
      UART_Receive_IT(huart);
 8003682:	4620      	mov	r0, r4
 8003684:	f7ff ff4b 	bl	800351e <UART_Receive_IT>
      return;
 8003688:	e01d      	b.n	80036c6 <HAL_UART_IRQHandler+0x10a>
        UART_Receive_IT(huart);
 800368a:	4620      	mov	r0, r4
 800368c:	f7ff ff47 	bl	800351e <UART_Receive_IT>
 8003690:	e7d6      	b.n	8003640 <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 8003692:	4620      	mov	r0, r4
 8003694:	f7ff ff91 	bl	80035ba <HAL_UART_ErrorCallback>
 8003698:	e015      	b.n	80036c6 <HAL_UART_IRQHandler+0x10a>
          HAL_UART_ErrorCallback(huart);
 800369a:	4620      	mov	r0, r4
 800369c:	f7ff ff8d 	bl	80035ba <HAL_UART_ErrorCallback>
 80036a0:	e011      	b.n	80036c6 <HAL_UART_IRQHandler+0x10a>
        HAL_UART_ErrorCallback(huart);
 80036a2:	4620      	mov	r0, r4
 80036a4:	f7ff ff89 	bl	80035ba <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	63e3      	str	r3, [r4, #60]	; 0x3c
 80036ac:	e00b      	b.n	80036c6 <HAL_UART_IRQHandler+0x10a>
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036ae:	f013 0f80 	tst.w	r3, #128	; 0x80
 80036b2:	d002      	beq.n	80036ba <HAL_UART_IRQHandler+0xfe>
 80036b4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80036b8:	d106      	bne.n	80036c8 <HAL_UART_IRQHandler+0x10c>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 80036be:	d002      	beq.n	80036c6 <HAL_UART_IRQHandler+0x10a>
 80036c0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80036c4:	d104      	bne.n	80036d0 <HAL_UART_IRQHandler+0x114>
}
 80036c6:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7ff fd3f 	bl	800314c <UART_Transmit_IT>
    return;
 80036ce:	e7fa      	b.n	80036c6 <HAL_UART_IRQHandler+0x10a>
    UART_EndTransmit_IT(huart);
 80036d0:	4620      	mov	r0, r4
 80036d2:	f7ff ff16 	bl	8003502 <UART_EndTransmit_IT>
    return;
 80036d6:	e7f6      	b.n	80036c6 <HAL_UART_IRQHandler+0x10a>
 80036d8:	080036dd 	.word	0x080036dd

080036dc <UART_DMAAbortOnError>:
{
 80036dc:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80036de:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036e4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80036e6:	f7ff ff68 	bl	80035ba <HAL_UART_ErrorCallback>
}
 80036ea:	bd08      	pop	{r3, pc}

080036ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80036ec:	b410      	push	{r4}
  /* initialize Endpoint */
  switch (ep->type)
 80036ee:	78cb      	ldrb	r3, [r1, #3]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d80f      	bhi.n	8003714 <USB_ActivateEndpoint+0x28>
 80036f4:	e8df f003 	tbb	[pc, r3]
 80036f8:	60546d02 	.word	0x60546d02
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80036fc:	780a      	ldrb	r2, [r1, #0]
 80036fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800370c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003710:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003714:	780a      	ldrb	r2, [r1, #0]
 8003716:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800371a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800371e:	051b      	lsls	r3, r3, #20
 8003720:	0d1b      	lsrs	r3, r3, #20
 8003722:	4313      	orrs	r3, r2
 8003724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8003730:	7a8b      	ldrb	r3, [r1, #10]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80af 	bne.w	8003896 <USB_ActivateEndpoint+0x1aa>
  {
    if (ep->is_in)
 8003738:	784b      	ldrb	r3, [r1, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d056      	beq.n	80037ec <USB_ActivateEndpoint+0x100>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800373e:	888a      	ldrh	r2, [r1, #4]
 8003740:	0852      	lsrs	r2, r2, #1
 8003742:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8003746:	780c      	ldrb	r4, [r1, #0]
 8003748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800374c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003750:	0052      	lsls	r2, r2, #1
 8003752:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003756:	780a      	ldrb	r2, [r1, #0]
 8003758:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800375c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003760:	d00b      	beq.n	800377a <USB_ActivateEndpoint+0x8e>
 8003762:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003766:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376a:	051b      	lsls	r3, r3, #20
 800376c:	0d1b      	lsrs	r3, r3, #20
 800376e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003776:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800377a:	780a      	ldrb	r2, [r1, #0]
 800377c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003780:	b29b      	uxth	r3, r3
 8003782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378a:	f083 0320 	eor.w	r3, r3, #32
 800378e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003796:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800379a:	2000      	movs	r0, #0
 800379c:	bc10      	pop	{r4}
 800379e:	4770      	bx	lr
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 80037a0:	780a      	ldrb	r2, [r1, #0]
 80037a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80037b6:	e7ad      	b.n	8003714 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 80037b8:	780a      	ldrb	r2, [r1, #0]
 80037ba:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037be:	b29b      	uxth	r3, r3
 80037c0:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80037c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80037cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80037d0:	e7a0      	b.n	8003714 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80037d2:	780a      	ldrb	r2, [r1, #0]
 80037d4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80037de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
 80037ea:	e793      	b.n	8003714 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80037ec:	888a      	ldrh	r2, [r1, #4]
 80037ee:	0852      	lsrs	r2, r2, #1
 80037f0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80037f4:	780c      	ldrb	r4, [r1, #0]
 80037f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80037fa:	3304      	adds	r3, #4
 80037fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003800:	0052      	lsls	r2, r2, #1
 8003802:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003806:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800380a:	780a      	ldrb	r2, [r1, #0]
 800380c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003810:	3306      	adds	r3, #6
 8003812:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003816:	690c      	ldr	r4, [r1, #16]
 8003818:	2c3e      	cmp	r4, #62	; 0x3e
 800381a:	d930      	bls.n	800387e <USB_ActivateEndpoint+0x192>
 800381c:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8003820:	f014 0f1f 	tst.w	r4, #31
 8003824:	d101      	bne.n	800382a <USB_ActivateEndpoint+0x13e>
 8003826:	3a01      	subs	r2, #1
 8003828:	b292      	uxth	r2, r2
 800382a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 800382e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003832:	b292      	uxth	r2, r2
 8003834:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003838:	780a      	ldrb	r2, [r1, #0]
 800383a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800383e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003842:	d00b      	beq.n	800385c <USB_ActivateEndpoint+0x170>
 8003844:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003848:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800384c:	051b      	lsls	r3, r3, #20
 800384e:	0d1b      	lsrs	r3, r3, #20
 8003850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003858:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800385c:	780a      	ldrb	r2, [r1, #0]
 800385e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003862:	b29b      	uxth	r3, r3
 8003864:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003878:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800387c:	e78d      	b.n	800379a <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800387e:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8003882:	f014 0f01 	tst.w	r4, #1
 8003886:	d001      	beq.n	800388c <USB_ActivateEndpoint+0x1a0>
 8003888:	3201      	adds	r2, #1
 800388a:	b292      	uxth	r2, r2
 800388c:	0292      	lsls	r2, r2, #10
 800388e:	b292      	uxth	r2, r2
 8003890:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8003894:	e7d0      	b.n	8003838 <USB_ActivateEndpoint+0x14c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003896:	780a      	ldrb	r2, [r1, #0]
 8003898:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800389c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80038a0:	051b      	lsls	r3, r3, #20
 80038a2:	0d1b      	lsrs	r3, r3, #20
 80038a4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 80038b0:	88ca      	ldrh	r2, [r1, #6]
 80038b2:	0852      	lsrs	r2, r2, #1
 80038b4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80038b8:	780c      	ldrb	r4, [r1, #0]
 80038ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80038be:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80038c2:	0052      	lsls	r2, r2, #1
 80038c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 80038c8:	890a      	ldrh	r2, [r1, #8]
 80038ca:	0852      	lsrs	r2, r2, #1
 80038cc:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80038d0:	780c      	ldrb	r4, [r1, #0]
 80038d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80038d6:	3304      	adds	r3, #4
 80038d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80038dc:	0052      	lsls	r2, r2, #1
 80038de:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    if (ep->is_in==0)
 80038e2:	784b      	ldrb	r3, [r1, #1]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d14b      	bne.n	8003980 <USB_ActivateEndpoint+0x294>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80038e8:	780a      	ldrb	r2, [r1, #0]
 80038ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038ee:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80038f2:	d00b      	beq.n	800390c <USB_ActivateEndpoint+0x220>
 80038f4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80038f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038fc:	051b      	lsls	r3, r3, #20
 80038fe:	0d1b      	lsrs	r3, r3, #20
 8003900:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003908:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800390c:	780a      	ldrb	r2, [r1, #0]
 800390e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003912:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003916:	d00b      	beq.n	8003930 <USB_ActivateEndpoint+0x244>
 8003918:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800391c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003920:	051b      	lsls	r3, r3, #20
 8003922:	0d1b      	lsrs	r3, r3, #20
 8003924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800392c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003930:	780a      	ldrb	r2, [r1, #0]
 8003932:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800393a:	051b      	lsls	r3, r3, #20
 800393c:	0d1b      	lsrs	r3, r3, #20
 800393e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003946:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800394a:	780a      	ldrb	r2, [r1, #0]
 800394c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003950:	b29b      	uxth	r3, r3
 8003952:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800395a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800395e:	f248 0480 	movw	r4, #32896	; 0x8080
 8003962:	4323      	orrs	r3, r4
 8003964:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003968:	780a      	ldrb	r2, [r1, #0]
 800396a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800396e:	b29b      	uxth	r3, r3
 8003970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003974:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003978:	4323      	orrs	r3, r4
 800397a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800397e:	e70c      	b.n	800379a <USB_ActivateEndpoint+0xae>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003980:	780a      	ldrb	r2, [r1, #0]
 8003982:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003986:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800398a:	d00b      	beq.n	80039a4 <USB_ActivateEndpoint+0x2b8>
 800398c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003990:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003994:	051b      	lsls	r3, r3, #20
 8003996:	0d1b      	lsrs	r3, r3, #20
 8003998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800399c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039a4:	780a      	ldrb	r2, [r1, #0]
 80039a6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80039ae:	d00b      	beq.n	80039c8 <USB_ActivateEndpoint+0x2dc>
 80039b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039b8:	051b      	lsls	r3, r3, #20
 80039ba:	0d1b      	lsrs	r3, r3, #20
 80039bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039c4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80039c8:	780a      	ldrb	r2, [r1, #0]
 80039ca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80039ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d2:	051b      	lsls	r3, r3, #20
 80039d4:	0d1b      	lsrs	r3, r3, #20
 80039d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039de:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039e2:	780b      	ldrb	r3, [r1, #0]
 80039e4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80039e8:	b292      	uxth	r2, r2
 80039ea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80039ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f2:	f248 0480 	movw	r4, #32896	; 0x8080
 80039f6:	4322      	orrs	r2, r4
 80039f8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80039fc:	780a      	ldrb	r2, [r1, #0]
 80039fe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0c:	4323      	orrs	r3, r4
 8003a0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003a12:	e6c2      	b.n	800379a <USB_ActivateEndpoint+0xae>

08003a14 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8003a14:	780a      	ldrb	r2, [r1, #0]
 8003a16:	b18a      	cbz	r2, 8003a3c <USB_EPSetStall+0x28>
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 8003a18:	784b      	ldrb	r3, [r1, #1]
 8003a1a:	bb13      	cbnz	r3, 8003a62 <USB_EPSetStall+0x4e>
    {
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
    }
    else
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8003a1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003a3a:	e010      	b.n	8003a5e <USB_EPSetStall+0x4a>
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003a3c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a4a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003a4e:	f083 0310 	eor.w	r3, r3, #16
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a5a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
  return HAL_OK;
}
 8003a5e:	2000      	movs	r0, #0
 8003a60:	4770      	bx	lr
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8003a62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a70:	f083 0310 	eor.w	r3, r3, #16
 8003a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003a80:	e7ed      	b.n	8003a5e <USB_EPSetStall+0x4a>

08003a82 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8003a82:	784b      	ldrb	r3, [r1, #1]
 8003a84:	b31b      	cbz	r3, 8003ace <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a86:	780a      	ldrb	r2, [r1, #0]
 8003a88:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003a90:	d00b      	beq.n	8003aaa <USB_EPClearStall+0x28>
 8003a92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9a:	051b      	lsls	r3, r3, #20
 8003a9c:	0d1b      	lsrs	r3, r3, #20
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003aa6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003aaa:	780a      	ldrb	r2, [r1, #0]
 8003aac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aba:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }
  return HAL_OK;
}
 8003aca:	2000      	movs	r0, #0
 8003acc:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ace:	780a      	ldrb	r2, [r1, #0]
 8003ad0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ad4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003ad8:	d00b      	beq.n	8003af2 <USB_EPClearStall+0x70>
 8003ada:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae2:	051b      	lsls	r3, r3, #20
 8003ae4:	0d1b      	lsrs	r3, r3, #20
 8003ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003af2:	780a      	ldrb	r2, [r1, #0]
 8003af4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b02:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b0e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003b12:	e7da      	b.n	8003aca <USB_EPClearStall+0x48>

08003b14 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8003b14:	b911      	cbnz	r1, 8003b1c <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8003b16:	2380      	movs	r3, #128	; 0x80
 8003b18:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	4770      	bx	lr

08003b20 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8003b20:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003b24:	4770      	bx	lr

08003b26 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003b26:	2000      	movs	r0, #0
 8003b28:	4770      	bx	lr

08003b2a <USB_WritePMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	105b      	asrs	r3, r3, #1
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003b2e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003b32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8003b36:	b163      	cbz	r3, 8003b52 <USB_WritePMA+0x28>
{
 8003b38:	b410      	push	{r4}
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003b3a:	780c      	ldrb	r4, [r1, #0]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 8003b3c:	7848      	ldrb	r0, [r1, #1]
 8003b3e:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    *pdwVal++ = temp2;
 8003b42:	f822 4b04 	strh.w	r4, [r2], #4
    pdwVal++;
    pbUsrBuf++;
 8003b46:	3102      	adds	r1, #2
  for (index = nbytes; index != 0; index--)
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f5      	bne.n	8003b3a <USB_WritePMA+0x10>
  }
}
 8003b4e:	bc10      	pop	{r4}
 8003b50:	4770      	bx	lr
 8003b52:	4770      	bx	lr

08003b54 <USB_EPStartXfer>:
{
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t len = ep->xfer_len;
 8003b56:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8003b58:	784d      	ldrb	r5, [r1, #1]
 8003b5a:	2d01      	cmp	r5, #1
 8003b5c:	d034      	beq.n	8003bc8 <USB_EPStartXfer+0x74>
    if (ep->xfer_len > ep->maxpacket)
 8003b5e:	690b      	ldr	r3, [r1, #16]
 8003b60:	4293      	cmp	r3, r2
 8003b62:	f080 80ea 	bcs.w	8003d3a <USB_EPStartXfer+0x1e6>
      ep->xfer_len-=len; 
 8003b66:	1ad2      	subs	r2, r2, r3
 8003b68:	618a      	str	r2, [r1, #24]
    if (ep->doublebuffer == 0) 
 8003b6a:	7a8a      	ldrb	r2, [r1, #10]
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	f040 80f4 	bne.w	8003d5a <USB_EPStartXfer+0x206>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003b72:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003b76:	780c      	ldrb	r4, [r1, #0]
 8003b78:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8003b7c:	3206      	adds	r2, #6
 8003b7e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003b82:	2b3e      	cmp	r3, #62	; 0x3e
 8003b84:	f240 80dd 	bls.w	8003d42 <USB_EPStartXfer+0x1ee>
 8003b88:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8003b8c:	f013 0f1f 	tst.w	r3, #31
 8003b90:	d101      	bne.n	8003b96 <USB_EPStartXfer+0x42>
 8003b92:	3c01      	subs	r4, #1
 8003b94:	b2a4      	uxth	r4, r4
 8003b96:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003b9a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003b9e:	b2a4      	uxth	r4, r4
 8003ba0:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ba4:	780a      	ldrb	r2, [r1, #0]
 8003ba6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bb4:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
}
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 8003bc8:	690f      	ldr	r7, [r1, #16]
 8003bca:	4297      	cmp	r7, r2
 8003bcc:	d225      	bcs.n	8003c1a <USB_EPStartXfer+0xc6>
      ep->xfer_len-=len; 
 8003bce:	1bd2      	subs	r2, r2, r7
 8003bd0:	618a      	str	r2, [r1, #24]
 8003bd2:	460e      	mov	r6, r1
 8003bd4:	4604      	mov	r4, r0
    if (ep->doublebuffer == 0) 
 8003bd6:	7a8b      	ldrb	r3, [r1, #10]
 8003bd8:	b31b      	cbz	r3, 8003c22 <USB_EPStartXfer+0xce>
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8003bda:	780b      	ldrb	r3, [r1, #0]
 8003bdc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8003be0:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003be4:	d069      	beq.n	8003cba <USB_EPStartXfer+0x166>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003be6:	2d00      	cmp	r5, #0
 8003be8:	d137      	bne.n	8003c5a <USB_EPStartXfer+0x106>
 8003bea:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003bee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003bf2:	3306      	adds	r3, #6
 8003bf4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003bf8:	2f3e      	cmp	r7, #62	; 0x3e
 8003bfa:	d922      	bls.n	8003c42 <USB_EPStartXfer+0xee>
 8003bfc:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8003c00:	f017 0f1f 	tst.w	r7, #31
 8003c04:	d101      	bne.n	8003c0a <USB_EPStartXfer+0xb6>
 8003c06:	3a01      	subs	r2, #1
 8003c08:	b292      	uxth	r2, r2
 8003c0a:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003c0e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003c12:	b292      	uxth	r2, r2
 8003c14:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8003c18:	e028      	b.n	8003c6c <USB_EPStartXfer+0x118>
      ep->xfer_len =0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8003c1e:	4617      	mov	r7, r2
 8003c20:	e7d7      	b.n	8003bd2 <USB_EPStartXfer+0x7e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8003c22:	b2bb      	uxth	r3, r7
 8003c24:	888a      	ldrh	r2, [r1, #4]
 8003c26:	6949      	ldr	r1, [r1, #20]
 8003c28:	f7ff ff7f 	bl	8003b2a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003c2c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8003c30:	7832      	ldrb	r2, [r6, #0]
 8003c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c36:	3302      	adds	r3, #2
 8003c38:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003c3c:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
 8003c40:	e02a      	b.n	8003c98 <USB_EPStartXfer+0x144>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c42:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8003c46:	f017 0f01 	tst.w	r7, #1
 8003c4a:	d001      	beq.n	8003c50 <USB_EPStartXfer+0xfc>
 8003c4c:	3201      	adds	r2, #1
 8003c4e:	b292      	uxth	r2, r2
 8003c50:	0292      	lsls	r2, r2, #10
 8003c52:	b292      	uxth	r2, r2
 8003c54:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8003c58:	e008      	b.n	8003c6c <USB_EPStartXfer+0x118>
 8003c5a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003c5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c62:	3302      	adds	r3, #2
 8003c64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003c68:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8003c6c:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8003c6e:	b2bb      	uxth	r3, r7
 8003c70:	6971      	ldr	r1, [r6, #20]
 8003c72:	4620      	mov	r0, r4
 8003c74:	f7ff ff59 	bl	8003b2a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003c78:	7873      	ldrb	r3, [r6, #1]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d14d      	bne.n	8003d1a <USB_EPStartXfer+0x1c6>
 8003c7e:	7832      	ldrb	r2, [r6, #0]
 8003c80:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003c84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c88:	051b      	lsls	r3, r3, #20
 8003c8a:	0d1b      	lsrs	r3, r3, #20
 8003c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c94:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003c98:	7832      	ldrb	r2, [r6, #0]
 8003c9a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca8:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb4:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003cb8:	e784      	b.n	8003bc4 <USB_EPStartXfer+0x70>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003cba:	bb1d      	cbnz	r5, 8003d04 <USB_EPStartXfer+0x1b0>
 8003cbc:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003cca:	2f3e      	cmp	r7, #62	; 0x3e
 8003ccc:	d90e      	bls.n	8003cec <USB_EPStartXfer+0x198>
 8003cce:	f3c7 124f 	ubfx	r2, r7, #5, #16
 8003cd2:	f017 0f1f 	tst.w	r7, #31
 8003cd6:	d101      	bne.n	8003cdc <USB_EPStartXfer+0x188>
 8003cd8:	3a01      	subs	r2, #1
 8003cda:	b292      	uxth	r2, r2
 8003cdc:	ea6f 62c2 	mvn.w	r2, r2, lsl #27
 8003ce0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003ce4:	b292      	uxth	r2, r2
 8003ce6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8003cea:	e014      	b.n	8003d16 <USB_EPStartXfer+0x1c2>
 8003cec:	f3c7 024f 	ubfx	r2, r7, #1, #16
 8003cf0:	f017 0f01 	tst.w	r7, #1
 8003cf4:	d001      	beq.n	8003cfa <USB_EPStartXfer+0x1a6>
 8003cf6:	3201      	adds	r2, #1
 8003cf8:	b292      	uxth	r2, r2
 8003cfa:	0292      	lsls	r2, r2, #10
 8003cfc:	b292      	uxth	r2, r2
 8003cfe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8003d02:	e008      	b.n	8003d16 <USB_EPStartXfer+0x1c2>
 8003d04:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003d0c:	3302      	adds	r3, #2
 8003d0e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8003d12:	f8c3 7400 	str.w	r7, [r3, #1024]	; 0x400
        pmabuffer = ep->pmaaddr0;
 8003d16:	88f2      	ldrh	r2, [r6, #6]
 8003d18:	e7a9      	b.n	8003c6e <USB_EPStartXfer+0x11a>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d1bc      	bne.n	8003c98 <USB_EPStartXfer+0x144>
 8003d1e:	7832      	ldrb	r2, [r6, #0]
 8003d20:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003d24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d28:	051b      	lsls	r3, r3, #20
 8003d2a:	0d1b      	lsrs	r3, r3, #20
 8003d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d34:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 8003d38:	e7ae      	b.n	8003c98 <USB_EPStartXfer+0x144>
      ep->xfer_len =0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	618b      	str	r3, [r1, #24]
      len=ep->xfer_len;
 8003d3e:	4613      	mov	r3, r2
 8003d40:	e713      	b.n	8003b6a <USB_EPStartXfer+0x16>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d42:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8003d46:	f013 0f01 	tst.w	r3, #1
 8003d4a:	d001      	beq.n	8003d50 <USB_EPStartXfer+0x1fc>
 8003d4c:	3401      	adds	r4, #1
 8003d4e:	b2a4      	uxth	r4, r4
 8003d50:	02a4      	lsls	r4, r4, #10
 8003d52:	b2a4      	uxth	r4, r4
 8003d54:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003d58:	e724      	b.n	8003ba4 <USB_EPStartXfer+0x50>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003d5a:	b9bd      	cbnz	r5, 8003d8c <USB_EPStartXfer+0x238>
 8003d5c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d60:	780c      	ldrb	r4, [r1, #0]
 8003d62:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8003d66:	3202      	adds	r2, #2
 8003d68:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003d6c:	2b3e      	cmp	r3, #62	; 0x3e
 8003d6e:	d928      	bls.n	8003dc2 <USB_EPStartXfer+0x26e>
 8003d70:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8003d74:	f013 0f1f 	tst.w	r3, #31
 8003d78:	d101      	bne.n	8003d7e <USB_EPStartXfer+0x22a>
 8003d7a:	3c01      	subs	r4, #1
 8003d7c:	b2a4      	uxth	r4, r4
 8003d7e:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003d82:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003d86:	b2a4      	uxth	r4, r4
 8003d88:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003d8c:	784a      	ldrb	r2, [r1, #1]
 8003d8e:	bb82      	cbnz	r2, 8003df2 <USB_EPStartXfer+0x29e>
 8003d90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003d94:	780c      	ldrb	r4, [r1, #0]
 8003d96:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8003d9a:	3206      	adds	r2, #6
 8003d9c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003da0:	2b3e      	cmp	r3, #62	; 0x3e
 8003da2:	d91a      	bls.n	8003dda <USB_EPStartXfer+0x286>
 8003da4:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8003da8:	f013 0f1f 	tst.w	r3, #31
 8003dac:	d101      	bne.n	8003db2 <USB_EPStartXfer+0x25e>
 8003dae:	3c01      	subs	r4, #1
 8003db0:	b2a4      	uxth	r4, r4
 8003db2:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8003db6:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003dba:	b2a4      	uxth	r4, r4
 8003dbc:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003dc0:	e6f0      	b.n	8003ba4 <USB_EPStartXfer+0x50>
 8003dc2:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8003dc6:	f013 0f01 	tst.w	r3, #1
 8003dca:	d001      	beq.n	8003dd0 <USB_EPStartXfer+0x27c>
 8003dcc:	3401      	adds	r4, #1
 8003dce:	b2a4      	uxth	r4, r4
 8003dd0:	02a4      	lsls	r4, r4, #10
 8003dd2:	b2a4      	uxth	r4, r4
 8003dd4:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003dd8:	e7d8      	b.n	8003d8c <USB_EPStartXfer+0x238>
 8003dda:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8003dde:	f013 0f01 	tst.w	r3, #1
 8003de2:	d001      	beq.n	8003de8 <USB_EPStartXfer+0x294>
 8003de4:	3401      	adds	r4, #1
 8003de6:	b2a4      	uxth	r4, r4
 8003de8:	02a4      	lsls	r4, r4, #10
 8003dea:	b2a4      	uxth	r4, r4
 8003dec:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
 8003df0:	e6d8      	b.n	8003ba4 <USB_EPStartXfer+0x50>
 8003df2:	2a01      	cmp	r2, #1
 8003df4:	f47f aed6 	bne.w	8003ba4 <USB_EPStartXfer+0x50>
 8003df8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8003dfc:	780c      	ldrb	r4, [r1, #0]
 8003dfe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8003e02:	3202      	adds	r2, #2
 8003e04:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003e08:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8003e0c:	e6ca      	b.n	8003ba4 <USB_EPStartXfer+0x50>

08003e0e <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8003e0e:	3301      	adds	r3, #1
 8003e10:	105b      	asrs	r3, r3, #1
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8003e12:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  for (index = nbytes; index != 0; index--)
 8003e1a:	e004      	b.n	8003e26 <USB_ReadPMA+0x18>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003e1c:	6810      	ldr	r0, [r2, #0]
 8003e1e:	f821 0b02 	strh.w	r0, [r1], #2
  for (index = nbytes; index != 0; index--)
 8003e22:	3b01      	subs	r3, #1
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003e24:	3204      	adds	r2, #4
  for (index = nbytes; index != 0; index--)
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f8      	bne.n	8003e1c <USB_ReadPMA+0xe>
    pbUsrBuf++;
  }
}
 8003e2a:	4770      	bx	lr

08003e2c <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003e2c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
 8003e30:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8003e34:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 8003e38:	2000      	movs	r0, #0
 8003e3a:	4770      	bx	lr

08003e3c <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003e3c:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003e40:	b18a      	cbz	r2, 8003e66 <USBD_CDC_TransmitPacket+0x2a>
{      
 8003e42:	b508      	push	{r3, lr}
  {
    if(hcdc->TxState == 0)
 8003e44:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8003e48:	b10b      	cbz	r3, 8003e4e <USBD_CDC_TransmitPacket+0x12>
      
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8003e4a:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8003e4c:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      USBD_LL_Transmit(pdev,
 8003e54:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8003e58:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8003e5c:	2181      	movs	r1, #129	; 0x81
 8003e5e:	f001 f865 	bl	8004f2c <USBD_LL_Transmit>
      return USBD_OK;
 8003e62:	2000      	movs	r0, #0
 8003e64:	e7f2      	b.n	8003e4c <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8003e66:	2002      	movs	r0, #2
}
 8003e68:	4770      	bx	lr

08003e6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e6a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003e6c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e70:	b133      	cbz	r3, 8003e80 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4798      	blx	r3
 8003e76:	b908      	cbnz	r0, 8003e7c <USBD_SetClassConfig+0x12>
    {
      ret = USBD_OK;
 8003e78:	2000      	movs	r0, #0
    }
  }
  return ret; 
}
 8003e7a:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	e7fc      	b.n	8003e7a <USBD_SetClassConfig+0x10>
 8003e80:	2002      	movs	r0, #2
 8003e82:	e7fa      	b.n	8003e7a <USBD_SetClassConfig+0x10>

08003e84 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003e84:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003e86:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	4798      	blx	r3
  return USBD_OK;
}
 8003e8e:	2000      	movs	r0, #0
 8003e90:	bd08      	pop	{r3, pc}

08003e92 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003e92:	b538      	push	{r3, r4, r5, lr}
 8003e94:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003e96:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f000 f902 	bl	80040a4 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003ea6:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003eaa:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003eae:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
 8003eb2:	f001 031f 	and.w	r3, r1, #31
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d00e      	beq.n	8003ed8 <USBD_LL_SetupStage+0x46>
 8003eba:	b13b      	cbz	r3, 8003ecc <USBD_LL_SetupStage+0x3a>
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d010      	beq.n	8003ee2 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003ec0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	f000 fff4 	bl	8004eb2 <USBD_LL_StallEP>
    break;
 8003eca:	e003      	b.n	8003ed4 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 fa61 	bl	8004396 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003ed8:	4629      	mov	r1, r5
 8003eda:	4620      	mov	r0, r4
 8003edc:	f000 fa7f 	bl	80043de <USBD_StdItfReq>
    break;
 8003ee0:	e7f8      	b.n	8003ed4 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f000 fa96 	bl	8004416 <USBD_StdEPReq>
    break;
 8003eea:	e7f3      	b.n	8003ed4 <USBD_LL_SetupStage+0x42>

08003eec <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003eec:	b510      	push	{r4, lr}
 8003eee:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003ef0:	bb21      	cbnz	r1, 8003f3c <USBD_LL_DataOutStage+0x50>
 8003ef2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003ef4:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003ef8:	2a03      	cmp	r2, #3
 8003efa:	d001      	beq.n	8003f00 <USBD_LL_DataOutStage+0x14>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003efc:	2000      	movs	r0, #0
 8003efe:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8003f00:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8003f04:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8003f08:	4291      	cmp	r1, r2
 8003f0a:	d80c      	bhi.n	8003f26 <USBD_LL_DataOutStage+0x3a>
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003f0c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	b123      	cbz	r3, 8003f1e <USBD_LL_DataOutStage+0x32>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f14:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003f18:	2a03      	cmp	r2, #3
 8003f1a:	d100      	bne.n	8003f1e <USBD_LL_DataOutStage+0x32>
          pdev->pClass->EP0_RxReady(pdev); 
 8003f1c:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 fb22 	bl	8004568 <USBD_CtlSendStatus>
 8003f24:	e7ea      	b.n	8003efc <USBD_LL_DataOutStage+0x10>
        pep->rem_length -=  pep->maxpacket;
 8003f26:	1a89      	subs	r1, r1, r2
 8003f28:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
                            MIN(pep->rem_length ,pep->maxpacket));
 8003f2c:	428a      	cmp	r2, r1
 8003f2e:	bf28      	it	cs
 8003f30:	460a      	movcs	r2, r1
        USBD_CtlContinueRx (pdev, 
 8003f32:	b292      	uxth	r2, r2
 8003f34:	4619      	mov	r1, r3
 8003f36:	f000 fb0f 	bl	8004558 <USBD_CtlContinueRx>
 8003f3a:	e7df      	b.n	8003efc <USBD_LL_DataOutStage+0x10>
 8003f3c:	460a      	mov	r2, r1
  else if((pdev->pClass->DataOut != NULL)&&
 8003f3e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0d9      	beq.n	8003efc <USBD_LL_DataOutStage+0x10>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f48:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8003f4c:	2903      	cmp	r1, #3
 8003f4e:	d1d5      	bne.n	8003efc <USBD_LL_DataOutStage+0x10>
    pdev->pClass->DataOut(pdev, epnum); 
 8003f50:	4611      	mov	r1, r2
 8003f52:	4798      	blx	r3
 8003f54:	e7d2      	b.n	8003efc <USBD_LL_DataOutStage+0x10>

08003f56 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003f56:	b510      	push	{r4, lr}
 8003f58:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003f5a:	2900      	cmp	r1, #0
 8003f5c:	d146      	bne.n	8003fec <USBD_LL_DataInStage+0x96>
 8003f5e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003f60:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003f64:	2a02      	cmp	r2, #2
 8003f66:	d005      	beq.n	8003f74 <USBD_LL_DataInStage+0x1e>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003f68:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d039      	beq.n	8003fe4 <USBD_LL_DataInStage+0x8e>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8003f70:	2000      	movs	r0, #0
 8003f72:	bd10      	pop	{r4, pc}
      if(pep->rem_length > pep->maxpacket)
 8003f74:	69c1      	ldr	r1, [r0, #28]
 8003f76:	6a02      	ldr	r2, [r0, #32]
 8003f78:	4291      	cmp	r1, r2
 8003f7a:	d819      	bhi.n	8003fb0 <USBD_LL_DataInStage+0x5a>
        if((pep->total_length % pep->maxpacket == 0) &&
 8003f7c:	6981      	ldr	r1, [r0, #24]
 8003f7e:	fbb1 f3f2 	udiv	r3, r1, r2
 8003f82:	fb02 1313 	mls	r3, r2, r3, r1
 8003f86:	b92b      	cbnz	r3, 8003f94 <USBD_LL_DataInStage+0x3e>
 8003f88:	428a      	cmp	r2, r1
 8003f8a:	d803      	bhi.n	8003f94 <USBD_LL_DataInStage+0x3e>
             (pep->total_length < pdev->ep0_data_len ))
 8003f8c:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8003f90:	4299      	cmp	r1, r3
 8003f92:	d31a      	bcc.n	8003fca <USBD_LL_DataInStage+0x74>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003f94:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	b12b      	cbz	r3, 8003fa8 <USBD_LL_DataInStage+0x52>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003f9c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003fa0:	2a03      	cmp	r2, #3
 8003fa2:	d101      	bne.n	8003fa8 <USBD_LL_DataInStage+0x52>
            pdev->pClass->EP0_TxSent(pdev); 
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f000 fae8 	bl	800457e <USBD_CtlReceiveStatus>
 8003fae:	e7db      	b.n	8003f68 <USBD_LL_DataInStage+0x12>
        pep->rem_length -=  pep->maxpacket;
 8003fb0:	1a8a      	subs	r2, r1, r2
 8003fb2:	61c2      	str	r2, [r0, #28]
        USBD_CtlContinueSendData (pdev, 
 8003fb4:	b292      	uxth	r2, r2
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	f000 fac6 	bl	8004548 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive (pdev,
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	f000 ffc0 	bl	8004f48 <USBD_LL_PrepareReceive>
 8003fc8:	e7ce      	b.n	8003f68 <USBD_LL_DataInStage+0x12>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003fca:	2200      	movs	r2, #0
 8003fcc:	4611      	mov	r1, r2
 8003fce:	f000 fabb 	bl	8004548 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f8c4 11f8 	str.w	r1, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003fd8:	460b      	mov	r3, r1
 8003fda:	460a      	mov	r2, r1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	f000 ffb3 	bl	8004f48 <USBD_LL_PrepareReceive>
 8003fe2:	e7c1      	b.n	8003f68 <USBD_LL_DataInStage+0x12>
      pdev->dev_test_mode = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8003fea:	e7c1      	b.n	8003f70 <USBD_LL_DataInStage+0x1a>
 8003fec:	460a      	mov	r2, r1
  else if((pdev->pClass->DataIn != NULL)&& 
 8003fee:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0bb      	beq.n	8003f70 <USBD_LL_DataInStage+0x1a>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003ff8:	f890 11fc 	ldrb.w	r1, [r0, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8003ffc:	2903      	cmp	r1, #3
 8003ffe:	d1b7      	bne.n	8003f70 <USBD_LL_DataInStage+0x1a>
    pdev->pClass->DataIn(pdev, epnum); 
 8004000:	4611      	mov	r1, r2
 8004002:	4798      	blx	r3
 8004004:	e7b4      	b.n	8003f70 <USBD_LL_DataInStage+0x1a>

08004006 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004006:	b538      	push	{r3, r4, r5, lr}
 8004008:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	2200      	movs	r2, #0
 800400e:	4611      	mov	r1, r2
 8004010:	f000 ff3e 	bl	8004e90 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004014:	2540      	movs	r5, #64	; 0x40
 8004016:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800401a:	462b      	mov	r3, r5
 800401c:	2200      	movs	r2, #0
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	4620      	mov	r0, r4
 8004022:	f000 ff35 	bl	8004e90 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004026:	6225      	str	r5, [r4, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004028:	2301      	movs	r3, #1
 800402a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800402e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8004032:	b12b      	cbz	r3, 8004040 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004034:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	7921      	ldrb	r1, [r4, #4]
 800403c:	4620      	mov	r0, r4
 800403e:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8004040:	2000      	movs	r0, #0
 8004042:	bd38      	pop	{r3, r4, r5, pc}

08004044 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004044:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8004046:	2000      	movs	r0, #0
 8004048:	4770      	bx	lr

0800404a <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800404a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800404e:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004052:	2304      	movs	r3, #4
 8004054:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004058:	2000      	movs	r0, #0
 800405a:	4770      	bx	lr

0800405c <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800405c:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8004060:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8004064:	2000      	movs	r0, #0
 8004066:	4770      	bx	lr

08004068 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004068:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800406a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800406e:	2b03      	cmp	r3, #3
 8004070:	d001      	beq.n	8004076 <USBD_LL_SOF+0xe>
    {
      pdev->pClass->SOF(pdev);
    }
  }
  return USBD_OK;
}
 8004072:	2000      	movs	r0, #0
 8004074:	bd08      	pop	{r3, pc}
    if(pdev->pClass->SOF != NULL)
 8004076:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f8      	beq.n	8004072 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8004080:	4798      	blx	r3
 8004082:	e7f6      	b.n	8004072 <USBD_LL_SOF+0xa>

08004084 <USBD_SetFeature>:
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004084:	884b      	ldrh	r3, [r1, #2]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10b      	bne.n	80040a2 <USBD_SetFeature+0x1e>
{
 800408a:	b510      	push	{r4, lr}
 800408c:	4604      	mov	r4, r0
  {
    pdev->dev_remote_wakeup = 1;  
 800408e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 8004092:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800409a:	4620      	mov	r0, r4
 800409c:	f000 fa64 	bl	8004568 <USBD_CtlSendStatus>
  }

}
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	4770      	bx	lr

080040a4 <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 80040a4:	780b      	ldrb	r3, [r1, #0]
 80040a6:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80040a8:	784b      	ldrb	r3, [r1, #1]
 80040aa:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80040ac:	788b      	ldrb	r3, [r1, #2]
 80040ae:	78ca      	ldrb	r2, [r1, #3]
 80040b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040b4:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80040b6:	790b      	ldrb	r3, [r1, #4]
 80040b8:	794a      	ldrb	r2, [r1, #5]
 80040ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040be:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80040c0:	798b      	ldrb	r3, [r1, #6]
 80040c2:	79ca      	ldrb	r2, [r1, #7]
 80040c4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80040c8:	80c3      	strh	r3, [r0, #6]

}
 80040ca:	4770      	bx	lr

080040cc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80040cc:	b510      	push	{r4, lr}
 80040ce:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	f000 feee 	bl	8004eb2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 80040d6:	2100      	movs	r1, #0
 80040d8:	4620      	mov	r0, r4
 80040da:	f000 feea 	bl	8004eb2 <USBD_LL_StallEP>
}
 80040de:	bd10      	pop	{r4, pc}

080040e0 <USBD_GetDescriptor>:
{
 80040e0:	b530      	push	{r4, r5, lr}
 80040e2:	b083      	sub	sp, #12
 80040e4:	4604      	mov	r4, r0
 80040e6:	460d      	mov	r5, r1
  switch (req->wValue >> 8)
 80040e8:	884a      	ldrh	r2, [r1, #2]
 80040ea:	0a13      	lsrs	r3, r2, #8
 80040ec:	3b01      	subs	r3, #1
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	f200 8081 	bhi.w	80041f6 <USBD_GetDescriptor+0x116>
 80040f4:	e8df f003 	tbb	[pc, r3]
 80040f8:	7f271304 	.word	0x7f271304
 80040fc:	637f      	.short	0x637f
 80040fe:	70          	.byte	0x70
 80040ff:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004100:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f10d 0106 	add.w	r1, sp, #6
 800410a:	7c00      	ldrb	r0, [r0, #16]
 800410c:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800410e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004112:	b112      	cbz	r2, 800411a <USBD_GetDescriptor+0x3a>
 8004114:	88eb      	ldrh	r3, [r5, #6]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d171      	bne.n	80041fe <USBD_GetDescriptor+0x11e>
}
 800411a:	b003      	add	sp, #12
 800411c:	bd30      	pop	{r4, r5, pc}
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800411e:	7c03      	ldrb	r3, [r0, #16]
 8004120:	b943      	cbnz	r3, 8004134 <USBD_GetDescriptor+0x54>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004122:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	f10d 0006 	add.w	r0, sp, #6
 800412c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800412e:	2302      	movs	r3, #2
 8004130:	7043      	strb	r3, [r0, #1]
 8004132:	e7ec      	b.n	800410e <USBD_GetDescriptor+0x2e>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004134:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	f10d 0006 	add.w	r0, sp, #6
 800413e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004140:	2302      	movs	r3, #2
 8004142:	7043      	strb	r3, [r0, #1]
 8004144:	e7e3      	b.n	800410e <USBD_GetDescriptor+0x2e>
    switch ((uint8_t)(req->wValue))
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	2a05      	cmp	r2, #5
 800414a:	d834      	bhi.n	80041b6 <USBD_GetDescriptor+0xd6>
 800414c:	e8df f002 	tbb	[pc, r2]
 8004150:	1b130b03 	.word	0x1b130b03
 8004154:	2b23      	.short	0x2b23
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004156:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f10d 0106 	add.w	r1, sp, #6
 8004160:	7c00      	ldrb	r0, [r0, #16]
 8004162:	4798      	blx	r3
      break;
 8004164:	e7d3      	b.n	800410e <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004166:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f10d 0106 	add.w	r1, sp, #6
 8004170:	7c00      	ldrb	r0, [r0, #16]
 8004172:	4798      	blx	r3
      break;
 8004174:	e7cb      	b.n	800410e <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004176:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	f10d 0106 	add.w	r1, sp, #6
 8004180:	7c00      	ldrb	r0, [r0, #16]
 8004182:	4798      	blx	r3
      break;
 8004184:	e7c3      	b.n	800410e <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004186:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f10d 0106 	add.w	r1, sp, #6
 8004190:	7c00      	ldrb	r0, [r0, #16]
 8004192:	4798      	blx	r3
      break;
 8004194:	e7bb      	b.n	800410e <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004196:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	f10d 0106 	add.w	r1, sp, #6
 80041a0:	7c00      	ldrb	r0, [r0, #16]
 80041a2:	4798      	blx	r3
      break;
 80041a4:	e7b3      	b.n	800410e <USBD_GetDescriptor+0x2e>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80041a6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f10d 0106 	add.w	r1, sp, #6
 80041b0:	7c00      	ldrb	r0, [r0, #16]
 80041b2:	4798      	blx	r3
      break;
 80041b4:	e7ab      	b.n	800410e <USBD_GetDescriptor+0x2e>
       USBD_CtlError(pdev , req);
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7ff ff88 	bl	80040cc <USBD_CtlError>
      return;
 80041bc:	e7ad      	b.n	800411a <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80041be:	7c03      	ldrb	r3, [r0, #16]
 80041c0:	b933      	cbnz	r3, 80041d0 <USBD_GetDescriptor+0xf0>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80041c2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80041c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c8:	f10d 0006 	add.w	r0, sp, #6
 80041cc:	4798      	blx	r3
      break;
 80041ce:	e79e      	b.n	800410e <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 80041d0:	4629      	mov	r1, r5
 80041d2:	f7ff ff7b 	bl	80040cc <USBD_CtlError>
      return;
 80041d6:	e7a0      	b.n	800411a <USBD_GetDescriptor+0x3a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80041d8:	7c03      	ldrb	r3, [r0, #16]
 80041da:	b943      	cbnz	r3, 80041ee <USBD_GetDescriptor+0x10e>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80041dc:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f10d 0006 	add.w	r0, sp, #6
 80041e6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80041e8:	2307      	movs	r3, #7
 80041ea:	7043      	strb	r3, [r0, #1]
      break; 
 80041ec:	e78f      	b.n	800410e <USBD_GetDescriptor+0x2e>
      USBD_CtlError(pdev , req);
 80041ee:	4629      	mov	r1, r5
 80041f0:	f7ff ff6c 	bl	80040cc <USBD_CtlError>
      return;
 80041f4:	e791      	b.n	800411a <USBD_GetDescriptor+0x3a>
     USBD_CtlError(pdev , req);
 80041f6:	4629      	mov	r1, r5
 80041f8:	f7ff ff68 	bl	80040cc <USBD_CtlError>
    return;
 80041fc:	e78d      	b.n	800411a <USBD_GetDescriptor+0x3a>
    len = MIN(len , req->wLength);
 80041fe:	429a      	cmp	r2, r3
 8004200:	bf28      	it	cs
 8004202:	461a      	movcs	r2, r3
 8004204:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8004208:	4601      	mov	r1, r0
 800420a:	4620      	mov	r0, r4
 800420c:	f000 f98f 	bl	800452e <USBD_CtlSendData>
 8004210:	e783      	b.n	800411a <USBD_GetDescriptor+0x3a>

08004212 <USBD_SetAddress>:
{
 8004212:	b538      	push	{r3, r4, r5, lr}
 8004214:	4604      	mov	r4, r0
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004216:	888b      	ldrh	r3, [r1, #4]
 8004218:	b9e3      	cbnz	r3, 8004254 <USBD_SetAddress+0x42>
 800421a:	88cb      	ldrh	r3, [r1, #6]
 800421c:	b9d3      	cbnz	r3, 8004254 <USBD_SetAddress+0x42>
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800421e:	788d      	ldrb	r5, [r1, #2]
 8004220:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004224:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004228:	2b03      	cmp	r3, #3
 800422a:	d00c      	beq.n	8004246 <USBD_SetAddress+0x34>
      pdev->dev_address = dev_addr;
 800422c:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004230:	4629      	mov	r1, r5
 8004232:	f000 fe6d 	bl	8004f10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8004236:	4620      	mov	r0, r4
 8004238:	f000 f996 	bl	8004568 <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 800423c:	b135      	cbz	r5, 800424c <USBD_SetAddress+0x3a>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800423e:	2302      	movs	r3, #2
 8004240:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8004244:	e009      	b.n	800425a <USBD_SetAddress+0x48>
      USBD_CtlError(pdev , req);
 8004246:	f7ff ff41 	bl	80040cc <USBD_CtlError>
 800424a:	e006      	b.n	800425a <USBD_SetAddress+0x48>
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800424c:	2301      	movs	r3, #1
 800424e:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 8004252:	e002      	b.n	800425a <USBD_SetAddress+0x48>
     USBD_CtlError(pdev , req);                        
 8004254:	4620      	mov	r0, r4
 8004256:	f7ff ff39 	bl	80040cc <USBD_CtlError>
}
 800425a:	bd38      	pop	{r3, r4, r5, pc}

0800425c <USBD_SetConfig>:
{
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	4604      	mov	r4, r0
 8004260:	460d      	mov	r5, r1
  cfgidx = (uint8_t)(req->wValue);                 
 8004262:	7889      	ldrb	r1, [r1, #2]
 8004264:	4b25      	ldr	r3, [pc, #148]	; (80042fc <USBD_SetConfig+0xa0>)
 8004266:	7019      	strb	r1, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004268:	2901      	cmp	r1, #1
 800426a:	d809      	bhi.n	8004280 <USBD_SetConfig+0x24>
    switch (pdev->dev_state) 
 800426c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004270:	2b02      	cmp	r3, #2
 8004272:	d009      	beq.n	8004288 <USBD_SetConfig+0x2c>
 8004274:	2b03      	cmp	r3, #3
 8004276:	d01c      	beq.n	80042b2 <USBD_SetConfig+0x56>
       USBD_CtlError(pdev , req);                     
 8004278:	4629      	mov	r1, r5
 800427a:	f7ff ff27 	bl	80040cc <USBD_CtlError>
      break;
 800427e:	e002      	b.n	8004286 <USBD_SetConfig+0x2a>
     USBD_CtlError(pdev , req);                              
 8004280:	4629      	mov	r1, r5
 8004282:	f7ff ff23 	bl	80040cc <USBD_CtlError>
}
 8004286:	bd38      	pop	{r3, r4, r5, pc}
      if (cfgidx) 
 8004288:	b181      	cbz	r1, 80042ac <USBD_SetConfig+0x50>
        pdev->dev_config = cfgidx;
 800428a:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800428c:	2303      	movs	r3, #3
 800428e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8004292:	f7ff fdea 	bl	8003e6a <USBD_SetClassConfig>
 8004296:	2802      	cmp	r0, #2
 8004298:	d003      	beq.n	80042a2 <USBD_SetConfig+0x46>
        USBD_CtlSendStatus(pdev);
 800429a:	4620      	mov	r0, r4
 800429c:	f000 f964 	bl	8004568 <USBD_CtlSendStatus>
 80042a0:	e7f1      	b.n	8004286 <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 80042a2:	4629      	mov	r1, r5
 80042a4:	4620      	mov	r0, r4
 80042a6:	f7ff ff11 	bl	80040cc <USBD_CtlError>
          return;
 80042aa:	e7ec      	b.n	8004286 <USBD_SetConfig+0x2a>
         USBD_CtlSendStatus(pdev);
 80042ac:	f000 f95c 	bl	8004568 <USBD_CtlSendStatus>
 80042b0:	e7e9      	b.n	8004286 <USBD_SetConfig+0x2a>
      if (cfgidx == 0) 
 80042b2:	b189      	cbz	r1, 80042d8 <USBD_SetConfig+0x7c>
      else  if (cfgidx != pdev->dev_config) 
 80042b4:	6843      	ldr	r3, [r0, #4]
 80042b6:	4299      	cmp	r1, r3
 80042b8:	d01d      	beq.n	80042f6 <USBD_SetConfig+0x9a>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80042ba:	b2d9      	uxtb	r1, r3
 80042bc:	f7ff fde2 	bl	8003e84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <USBD_SetConfig+0xa0>)
 80042c2:	7819      	ldrb	r1, [r3, #0]
 80042c4:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80042c6:	4620      	mov	r0, r4
 80042c8:	f7ff fdcf 	bl	8003e6a <USBD_SetClassConfig>
 80042cc:	2802      	cmp	r0, #2
 80042ce:	d00d      	beq.n	80042ec <USBD_SetConfig+0x90>
        USBD_CtlSendStatus(pdev);
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 f949 	bl	8004568 <USBD_CtlSendStatus>
 80042d6:	e7d6      	b.n	8004286 <USBD_SetConfig+0x2a>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80042d8:	2302      	movs	r3, #2
 80042da:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80042de:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80042e0:	f7ff fdd0 	bl	8003e84 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80042e4:	4620      	mov	r0, r4
 80042e6:	f000 f93f 	bl	8004568 <USBD_CtlSendStatus>
 80042ea:	e7cc      	b.n	8004286 <USBD_SetConfig+0x2a>
          USBD_CtlError(pdev , req);  
 80042ec:	4629      	mov	r1, r5
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7ff feec 	bl	80040cc <USBD_CtlError>
          return;
 80042f4:	e7c7      	b.n	8004286 <USBD_SetConfig+0x2a>
        USBD_CtlSendStatus(pdev);
 80042f6:	f000 f937 	bl	8004568 <USBD_CtlSendStatus>
 80042fa:	e7c4      	b.n	8004286 <USBD_SetConfig+0x2a>
 80042fc:	20000234 	.word	0x20000234

08004300 <USBD_GetConfig>:
{
 8004300:	b508      	push	{r3, lr}
  if (req->wLength != 1) 
 8004302:	88cb      	ldrh	r3, [r1, #6]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d108      	bne.n	800431a <USBD_GetConfig+0x1a>
    switch (pdev->dev_state )  
 8004308:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800430c:	2b02      	cmp	r3, #2
 800430e:	d007      	beq.n	8004320 <USBD_GetConfig+0x20>
 8004310:	2b03      	cmp	r3, #3
 8004312:	d00d      	beq.n	8004330 <USBD_GetConfig+0x30>
       USBD_CtlError(pdev , req);
 8004314:	f7ff feda 	bl	80040cc <USBD_CtlError>
}
 8004318:	e001      	b.n	800431e <USBD_GetConfig+0x1e>
     USBD_CtlError(pdev , req);
 800431a:	f7ff fed7 	bl	80040cc <USBD_CtlError>
}
 800431e:	bd08      	pop	{r3, pc}
      pdev->dev_default_config = 0;
 8004320:	4601      	mov	r1, r0
 8004322:	2300      	movs	r3, #0
 8004324:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8004328:	2201      	movs	r2, #1
 800432a:	f000 f900 	bl	800452e <USBD_CtlSendData>
      break;
 800432e:	e7f6      	b.n	800431e <USBD_GetConfig+0x1e>
      USBD_CtlSendData (pdev, 
 8004330:	2201      	movs	r2, #1
 8004332:	1d01      	adds	r1, r0, #4
 8004334:	f000 f8fb 	bl	800452e <USBD_CtlSendData>
      break;
 8004338:	e7f1      	b.n	800431e <USBD_GetConfig+0x1e>

0800433a <USBD_GetStatus>:
{
 800433a:	b508      	push	{r3, lr}
  switch (pdev->dev_state) 
 800433c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004340:	3b02      	subs	r3, #2
 8004342:	2b01      	cmp	r3, #1
 8004344:	d80c      	bhi.n	8004360 <USBD_GetStatus+0x26>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004346:	2301      	movs	r3, #1
 8004348:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 800434a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800434e:	b10b      	cbz	r3, 8004354 <USBD_GetStatus+0x1a>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8004350:	2303      	movs	r3, #3
 8004352:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8004354:	2202      	movs	r2, #2
 8004356:	f100 010c 	add.w	r1, r0, #12
 800435a:	f000 f8e8 	bl	800452e <USBD_CtlSendData>
}
 800435e:	bd08      	pop	{r3, pc}
    USBD_CtlError(pdev , req);                        
 8004360:	f7ff feb4 	bl	80040cc <USBD_CtlError>
}
 8004364:	e7fb      	b.n	800435e <USBD_GetStatus+0x24>

08004366 <USBD_ClrFeature>:
{
 8004366:	b510      	push	{r4, lr}
 8004368:	4604      	mov	r4, r0
  switch (pdev->dev_state)
 800436a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800436e:	3b02      	subs	r3, #2
 8004370:	2b01      	cmp	r3, #1
 8004372:	d80d      	bhi.n	8004390 <USBD_ClrFeature+0x2a>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8004374:	884b      	ldrh	r3, [r1, #2]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d109      	bne.n	800438e <USBD_ClrFeature+0x28>
      pdev->dev_remote_wakeup = 0; 
 800437a:	2300      	movs	r3, #0
 800437c:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8004380:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004388:	4620      	mov	r0, r4
 800438a:	f000 f8ed 	bl	8004568 <USBD_CtlSendStatus>
}
 800438e:	bd10      	pop	{r4, pc}
     USBD_CtlError(pdev , req);
 8004390:	f7ff fe9c 	bl	80040cc <USBD_CtlError>
}
 8004394:	e7fb      	b.n	800438e <USBD_ClrFeature+0x28>

08004396 <USBD_StdDevReq>:
{
 8004396:	b508      	push	{r3, lr}
  switch (req->bRequest) 
 8004398:	784b      	ldrb	r3, [r1, #1]
 800439a:	2b09      	cmp	r3, #9
 800439c:	d81c      	bhi.n	80043d8 <USBD_StdDevReq+0x42>
 800439e:	e8df f003 	tbb	[pc, r3]
 80043a2:	1812      	.short	0x1812
 80043a4:	091b151b 	.word	0x091b151b
 80043a8:	0c0f1b05 	.word	0x0c0f1b05
    USBD_GetDescriptor (pdev, req) ;
 80043ac:	f7ff fe98 	bl	80040e0 <USBD_GetDescriptor>
}
 80043b0:	2000      	movs	r0, #0
 80043b2:	bd08      	pop	{r3, pc}
    USBD_SetAddress(pdev, req);
 80043b4:	f7ff ff2d 	bl	8004212 <USBD_SetAddress>
    break;
 80043b8:	e7fa      	b.n	80043b0 <USBD_StdDevReq+0x1a>
    USBD_SetConfig (pdev , req);
 80043ba:	f7ff ff4f 	bl	800425c <USBD_SetConfig>
    break;
 80043be:	e7f7      	b.n	80043b0 <USBD_StdDevReq+0x1a>
    USBD_GetConfig (pdev , req);
 80043c0:	f7ff ff9e 	bl	8004300 <USBD_GetConfig>
    break;
 80043c4:	e7f4      	b.n	80043b0 <USBD_StdDevReq+0x1a>
    USBD_GetStatus (pdev , req);
 80043c6:	f7ff ffb8 	bl	800433a <USBD_GetStatus>
    break;
 80043ca:	e7f1      	b.n	80043b0 <USBD_StdDevReq+0x1a>
    USBD_SetFeature (pdev , req);    
 80043cc:	f7ff fe5a 	bl	8004084 <USBD_SetFeature>
    break;
 80043d0:	e7ee      	b.n	80043b0 <USBD_StdDevReq+0x1a>
    USBD_ClrFeature (pdev , req);
 80043d2:	f7ff ffc8 	bl	8004366 <USBD_ClrFeature>
    break;
 80043d6:	e7eb      	b.n	80043b0 <USBD_StdDevReq+0x1a>
    USBD_CtlError(pdev , req);
 80043d8:	f7ff fe78 	bl	80040cc <USBD_CtlError>
    break;
 80043dc:	e7e8      	b.n	80043b0 <USBD_StdDevReq+0x1a>

080043de <USBD_StdItfReq>:
{
 80043de:	b538      	push	{r3, r4, r5, lr}
 80043e0:	4604      	mov	r4, r0
 80043e2:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80043e4:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80043e8:	2b03      	cmp	r3, #3
 80043ea:	d111      	bne.n	8004410 <USBD_StdItfReq+0x32>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80043ec:	790b      	ldrb	r3, [r1, #4]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d80b      	bhi.n	800440a <USBD_StdItfReq+0x2c>
      pdev->pClass->Setup (pdev, req); 
 80043f2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80043fa:	88eb      	ldrh	r3, [r5, #6]
 80043fc:	b10b      	cbz	r3, 8004402 <USBD_StdItfReq+0x24>
}
 80043fe:	2000      	movs	r0, #0
 8004400:	bd38      	pop	{r3, r4, r5, pc}
         USBD_CtlSendStatus(pdev);
 8004402:	4620      	mov	r0, r4
 8004404:	f000 f8b0 	bl	8004568 <USBD_CtlSendStatus>
 8004408:	e7f9      	b.n	80043fe <USBD_StdItfReq+0x20>
       USBD_CtlError(pdev , req);
 800440a:	f7ff fe5f 	bl	80040cc <USBD_CtlError>
 800440e:	e7f6      	b.n	80043fe <USBD_StdItfReq+0x20>
     USBD_CtlError(pdev , req);
 8004410:	f7ff fe5c 	bl	80040cc <USBD_CtlError>
    break;
 8004414:	e7f3      	b.n	80043fe <USBD_StdItfReq+0x20>

08004416 <USBD_StdEPReq>:
{
 8004416:	b538      	push	{r3, r4, r5, lr}
 8004418:	4605      	mov	r5, r0
 800441a:	460c      	mov	r4, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800441c:	888a      	ldrh	r2, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800441e:	780b      	ldrb	r3, [r1, #0]
 8004420:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004424:	2b20      	cmp	r3, #32
 8004426:	d105      	bne.n	8004434 <USBD_StdEPReq+0x1e>
    pdev->pClass->Setup (pdev, req);
 8004428:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	4798      	blx	r3
}
 8004430:	2000      	movs	r0, #0
 8004432:	bd38      	pop	{r3, r4, r5, pc}
 8004434:	b2d1      	uxtb	r1, r2
  switch (req->bRequest) 
 8004436:	7863      	ldrb	r3, [r4, #1]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d025      	beq.n	8004488 <USBD_StdEPReq+0x72>
 800443c:	2b00      	cmp	r3, #0
 800443e:	d047      	beq.n	80044d0 <USBD_StdEPReq+0xba>
 8004440:	2b03      	cmp	r3, #3
 8004442:	d1f5      	bne.n	8004430 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8004444:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004448:	2b02      	cmp	r3, #2
 800444a:	d005      	beq.n	8004458 <USBD_StdEPReq+0x42>
 800444c:	2b03      	cmp	r3, #3
 800444e:	d00a      	beq.n	8004466 <USBD_StdEPReq+0x50>
      USBD_CtlError(pdev , req);
 8004450:	4621      	mov	r1, r4
 8004452:	f7ff fe3b 	bl	80040cc <USBD_CtlError>
      break;    
 8004456:	e7eb      	b.n	8004430 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004458:	2900      	cmp	r1, #0
 800445a:	d0e9      	beq.n	8004430 <USBD_StdEPReq+0x1a>
 800445c:	2980      	cmp	r1, #128	; 0x80
 800445e:	d0e7      	beq.n	8004430 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 8004460:	f000 fd27 	bl	8004eb2 <USBD_LL_StallEP>
 8004464:	e7e4      	b.n	8004430 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004466:	8863      	ldrh	r3, [r4, #2]
 8004468:	b923      	cbnz	r3, 8004474 <USBD_StdEPReq+0x5e>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800446a:	b119      	cbz	r1, 8004474 <USBD_StdEPReq+0x5e>
 800446c:	2980      	cmp	r1, #128	; 0x80
 800446e:	d001      	beq.n	8004474 <USBD_StdEPReq+0x5e>
          USBD_LL_StallEP(pdev , ep_addr);
 8004470:	f000 fd1f 	bl	8004eb2 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004474:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4621      	mov	r1, r4
 800447c:	4628      	mov	r0, r5
 800447e:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004480:	4628      	mov	r0, r5
 8004482:	f000 f871 	bl	8004568 <USBD_CtlSendStatus>
      break;
 8004486:	e7d3      	b.n	8004430 <USBD_StdEPReq+0x1a>
    switch (pdev->dev_state) 
 8004488:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800448c:	2b02      	cmp	r3, #2
 800448e:	d005      	beq.n	800449c <USBD_StdEPReq+0x86>
 8004490:	2b03      	cmp	r3, #3
 8004492:	d00a      	beq.n	80044aa <USBD_StdEPReq+0x94>
      USBD_CtlError(pdev , req);
 8004494:	4621      	mov	r1, r4
 8004496:	f7ff fe19 	bl	80040cc <USBD_CtlError>
      break;    
 800449a:	e7c9      	b.n	8004430 <USBD_StdEPReq+0x1a>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800449c:	2900      	cmp	r1, #0
 800449e:	d0c7      	beq.n	8004430 <USBD_StdEPReq+0x1a>
 80044a0:	2980      	cmp	r1, #128	; 0x80
 80044a2:	d0c5      	beq.n	8004430 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 80044a4:	f000 fd05 	bl	8004eb2 <USBD_LL_StallEP>
 80044a8:	e7c2      	b.n	8004430 <USBD_StdEPReq+0x1a>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80044aa:	8863      	ldrh	r3, [r4, #2]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1bf      	bne.n	8004430 <USBD_StdEPReq+0x1a>
        if ((ep_addr & 0x7F) != 0x00) 
 80044b0:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80044b4:	d103      	bne.n	80044be <USBD_StdEPReq+0xa8>
        USBD_CtlSendStatus(pdev);
 80044b6:	4628      	mov	r0, r5
 80044b8:	f000 f856 	bl	8004568 <USBD_CtlSendStatus>
 80044bc:	e7b8      	b.n	8004430 <USBD_StdEPReq+0x1a>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80044be:	f000 fd06 	bl	8004ece <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80044c2:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4621      	mov	r1, r4
 80044ca:	4628      	mov	r0, r5
 80044cc:	4798      	blx	r3
 80044ce:	e7f2      	b.n	80044b6 <USBD_StdEPReq+0xa0>
    switch (pdev->dev_state) 
 80044d0:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d005      	beq.n	80044e4 <USBD_StdEPReq+0xce>
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d009      	beq.n	80044f0 <USBD_StdEPReq+0xda>
      USBD_CtlError(pdev , req);
 80044dc:	4621      	mov	r1, r4
 80044de:	f7ff fdf5 	bl	80040cc <USBD_CtlError>
      break;
 80044e2:	e7a5      	b.n	8004430 <USBD_StdEPReq+0x1a>
      if ((ep_addr & 0x7F) != 0x00) 
 80044e4:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 80044e8:	d0a2      	beq.n	8004430 <USBD_StdEPReq+0x1a>
        USBD_LL_StallEP(pdev , ep_addr);
 80044ea:	f000 fce2 	bl	8004eb2 <USBD_LL_StallEP>
 80044ee:	e79f      	b.n	8004430 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80044f0:	f012 0f80 	tst.w	r2, #128	; 0x80
 80044f4:	d111      	bne.n	800451a <USBD_StdEPReq+0x104>
                                         &pdev->ep_out[ep_addr & 0x7F];
 80044f6:	f001 047f 	and.w	r4, r1, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80044fa:	3410      	adds	r4, #16
 80044fc:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8004500:	3404      	adds	r4, #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004502:	4628      	mov	r0, r5
 8004504:	f000 fcf1 	bl	8004eea <USBD_LL_IsStallEP>
 8004508:	b170      	cbz	r0, 8004528 <USBD_StdEPReq+0x112>
        pep->status = 0x0001;     
 800450a:	2301      	movs	r3, #1
 800450c:	6023      	str	r3, [r4, #0]
      USBD_CtlSendData (pdev,
 800450e:	2202      	movs	r2, #2
 8004510:	4621      	mov	r1, r4
 8004512:	4628      	mov	r0, r5
 8004514:	f000 f80b 	bl	800452e <USBD_CtlSendData>
      break;
 8004518:	e78a      	b.n	8004430 <USBD_StdEPReq+0x1a>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800451a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
 800451e:	3401      	adds	r4, #1
 8004520:	eb00 1404 	add.w	r4, r0, r4, lsl #4
 8004524:	3404      	adds	r4, #4
 8004526:	e7ec      	b.n	8004502 <USBD_StdEPReq+0xec>
        pep->status = 0x0000;  
 8004528:	2300      	movs	r3, #0
 800452a:	6023      	str	r3, [r4, #0]
 800452c:	e7ef      	b.n	800450e <USBD_StdEPReq+0xf8>

0800452e <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800452e:	b510      	push	{r4, lr}
 8004530:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004532:	2202      	movs	r2, #2
 8004534:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8004538:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800453a:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800453c:	460a      	mov	r2, r1
 800453e:	2100      	movs	r1, #0
 8004540:	f000 fcf4 	bl	8004f2c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004544:	2000      	movs	r0, #0
 8004546:	bd10      	pop	{r4, pc}

08004548 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8004548:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800454a:	4613      	mov	r3, r2
 800454c:	460a      	mov	r2, r1
 800454e:	2100      	movs	r1, #0
 8004550:	f000 fcec 	bl	8004f2c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004554:	2000      	movs	r0, #0
 8004556:	bd08      	pop	{r3, pc}

08004558 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 8004558:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800455a:	4613      	mov	r3, r2
 800455c:	460a      	mov	r2, r1
 800455e:	2100      	movs	r1, #0
 8004560:	f000 fcf2 	bl	8004f48 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8004564:	2000      	movs	r0, #0
 8004566:	bd08      	pop	{r3, pc}

08004568 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 8004568:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800456a:	2304      	movs	r3, #4
 800456c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8004570:	2300      	movs	r3, #0
 8004572:	461a      	mov	r2, r3
 8004574:	4619      	mov	r1, r3
 8004576:	f000 fcd9 	bl	8004f2c <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800457a:	2000      	movs	r0, #0
 800457c:	bd08      	pop	{r3, pc}

0800457e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800457e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8004580:	2305      	movs	r3, #5
 8004582:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004586:	2300      	movs	r3, #0
 8004588:	461a      	mov	r2, r3
 800458a:	4619      	mov	r1, r3
 800458c:	f000 fcdc 	bl	8004f48 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004590:	2000      	movs	r0, #0
 8004592:	bd08      	pop	{r3, pc}

08004594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004594:	b570      	push	{r4, r5, r6, lr}
 8004596:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004598:	2400      	movs	r4, #0
 800459a:	940c      	str	r4, [sp, #48]	; 0x30
 800459c:	940d      	str	r4, [sp, #52]	; 0x34
 800459e:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045a0:	9405      	str	r4, [sp, #20]
 80045a2:	9406      	str	r4, [sp, #24]
 80045a4:	9407      	str	r4, [sp, #28]
 80045a6:	9408      	str	r4, [sp, #32]
 80045a8:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045aa:	9401      	str	r4, [sp, #4]
 80045ac:	9402      	str	r4, [sp, #8]
 80045ae:	9403      	str	r4, [sp, #12]
 80045b0:	9404      	str	r4, [sp, #16]

  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80045b2:	2309      	movs	r3, #9
 80045b4:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045ba:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045bc:	2501      	movs	r5, #1
 80045be:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80045c0:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c2:	2602      	movs	r6, #2
 80045c4:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045c6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80045c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045cc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045ce:	a80a      	add	r0, sp, #40	; 0x28
 80045d0:	f7fd fbfa 	bl	8001dc8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045d4:	230f      	movs	r3, #15
 80045d6:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045d8:	9606      	str	r6, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045da:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045e0:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045e2:	9409      	str	r4, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80045e4:	4629      	mov	r1, r5
 80045e6:	a805      	add	r0, sp, #20
 80045e8:	f7fd fe14 	bl	8002214 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 80045ec:	2313      	movs	r3, #19
 80045ee:	9301      	str	r3, [sp, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80045f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f4:	9302      	str	r3, [sp, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80045f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045fa:	9303      	str	r3, [sp, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80045fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004600:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004602:	a801      	add	r0, sp, #4
 8004604:	f7fd fefa 	bl	80023fc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004608:	b014      	add	sp, #80	; 0x50
 800460a:	bd70      	pop	{r4, r5, r6, pc}

0800460c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 800460c:	b570      	push	{r4, r5, r6, lr}
 800460e:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004610:	2500      	movs	r5, #0
 8004612:	9501      	str	r5, [sp, #4]
 8004614:	9502      	str	r5, [sp, #8]
 8004616:	9503      	str	r5, [sp, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Common config
  */
  hadc1.Instance = ADC1;
 8004618:	4c0c      	ldr	r4, [pc, #48]	; (800464c <MX_ADC1_Init+0x40>)
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <MX_ADC1_Init+0x44>)
 800461c:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800461e:	60a5      	str	r5, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004620:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004622:	6165      	str	r5, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004624:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8004628:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800462a:	6065      	str	r5, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 800462c:	2601      	movs	r6, #1
 800462e:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004630:	4620      	mov	r0, r4
 8004632:	f7fb fea9 	bl	8000388 <HAL_ADC_Init>
  {
    Error_Handler();
  }
  /**Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004636:	230c      	movs	r3, #12
 8004638:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800463a:	9602      	str	r6, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800463c:	9503      	str	r5, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800463e:	a901      	add	r1, sp, #4
 8004640:	4620      	mov	r0, r4
 8004642:	f7fb fddf 	bl	8000204 <HAL_ADC_ConfigChannel>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004646:	b004      	add	sp, #16
 8004648:	bd70      	pop	{r4, r5, r6, pc}
 800464a:	bf00      	nop
 800464c:	200003dc 	.word	0x200003dc
 8004650:	40012400 	.word	0x40012400

08004654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8004654:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004656:	4809      	ldr	r0, [pc, #36]	; (800467c <MX_I2C1_Init+0x28>)
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <MX_I2C1_Init+0x2c>)
 800465a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800465c:	4b09      	ldr	r3, [pc, #36]	; (8004684 <MX_I2C1_Init+0x30>)
 800465e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004660:	2300      	movs	r3, #0
 8004662:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004664:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004666:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800466a:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800466c:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800466e:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004670:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004672:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004674:	f7fc fa30 	bl	8000ad8 <HAL_I2C_Init>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004678:	bd08      	pop	{r3, pc}
 800467a:	bf00      	nop
 800467c:	20000388 	.word	0x20000388
 8004680:	40005400 	.word	0x40005400
 8004684:	000186a0 	.word	0x000186a0

08004688 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 8004688:	b530      	push	{r4, r5, lr}
 800468a:	b083      	sub	sp, #12

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800468c:	2400      	movs	r4, #0
 800468e:	f8ad 4004 	strh.w	r4, [sp, #4]
 8004692:	f88d 4006 	strb.w	r4, [sp, #6]
  RTC_DateTypeDef DateToUpdate = {0};
 8004696:	9400      	str	r4, [sp, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /**Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004698:	4d12      	ldr	r5, [pc, #72]	; (80046e4 <MX_RTC_Init+0x5c>)
 800469a:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <MX_RTC_Init+0x60>)
 800469c:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295
 80046a2:	606b      	str	r3, [r5, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80046a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046a8:	60ab      	str	r3, [r5, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046aa:	4628      	mov	r0, r5
 80046ac:	f7fe f968 	bl	8002980 <HAL_RTC_Init>

  /* USER CODE END Check_RTC_BKUP */

  /**Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80046b0:	f88d 4004 	strb.w	r4, [sp, #4]
  sTime.Minutes = 0x0;
 80046b4:	f88d 4005 	strb.w	r4, [sp, #5]
  sTime.Seconds = 0x0;
 80046b8:	f88d 4006 	strb.w	r4, [sp, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80046bc:	2201      	movs	r2, #1
 80046be:	a901      	add	r1, sp, #4
 80046c0:	4628      	mov	r0, r5
 80046c2:	f7fe f874 	bl	80027ae <HAL_RTC_SetTime>
  {
    Error_Handler();
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80046c6:	2201      	movs	r2, #1
 80046c8:	f88d 2000 	strb.w	r2, [sp]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80046cc:	f88d 2001 	strb.w	r2, [sp, #1]
  DateToUpdate.Date = 0x1;
 80046d0:	f88d 2002 	strb.w	r2, [sp, #2]
  DateToUpdate.Year = 0x0;
 80046d4:	f88d 4003 	strb.w	r4, [sp, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80046d8:	4669      	mov	r1, sp
 80046da:	4628      	mov	r0, r5
 80046dc:	f7fe f8c8 	bl	8002870 <HAL_RTC_SetDate>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80046e0:	b003      	add	sp, #12
 80046e2:	bd30      	pop	{r4, r5, pc}
 80046e4:	2000040c 	.word	0x2000040c
 80046e8:	40002800 	.word	0x40002800

080046ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI2_Init(void)
{
 80046ec:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80046ee:	480c      	ldr	r0, [pc, #48]	; (8004720 <MX_SPI2_Init+0x34>)
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <MX_SPI2_Init+0x38>)
 80046f2:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80046f4:	f44f 7382 	mov.w	r3, #260	; 0x104
 80046f8:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80046fa:	2300      	movs	r3, #0
 80046fc:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80046fe:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004700:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004702:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004708:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800470a:	2208      	movs	r2, #8
 800470c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800470e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004710:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004712:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004714:	230a      	movs	r3, #10
 8004716:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004718:	f7fe fb6d 	bl	8002df6 <HAL_SPI_Init>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800471c:	bd08      	pop	{r3, pc}
 800471e:	bf00      	nop
 8004720:	200002f0 	.word	0x200002f0
 8004724:	40003800 	.word	0x40003800

08004728 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8004728:	b530      	push	{r4, r5, lr}
 800472a:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800472c:	2400      	movs	r4, #0
 800472e:	9402      	str	r4, [sp, #8]
 8004730:	9403      	str	r4, [sp, #12]
 8004732:	9404      	str	r4, [sp, #16]
 8004734:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004736:	9400      	str	r4, [sp, #0]
 8004738:	9401      	str	r4, [sp, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800473a:	4d0f      	ldr	r5, [pc, #60]	; (8004778 <MX_TIM2_Init+0x50>)
 800473c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004740:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 479;
 8004742:	f240 13df 	movw	r3, #479	; 0x1df
 8004746:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004748:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1000000;
 800474a:	4b0c      	ldr	r3, [pc, #48]	; (800477c <MX_TIM2_Init+0x54>)
 800474c:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800474e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004750:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004752:	4628      	mov	r0, r5
 8004754:	f7fe fcaa 	bl	80030ac <HAL_TIM_Base_Init>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800475c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800475e:	a902      	add	r1, sp, #8
 8004760:	4628      	mov	r0, r5
 8004762:	f7fe fbe5 	bl	8002f30 <HAL_TIM_ConfigClockSource>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004766:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004768:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800476a:	4669      	mov	r1, sp
 800476c:	4628      	mov	r0, r5
 800476e:	f7fe fcb6 	bl	80030de <HAL_TIMEx_MasterConfigSynchronization>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004772:	b007      	add	sp, #28
 8004774:	bd30      	pop	{r4, r5, pc}
 8004776:	bf00      	nop
 8004778:	20000420 	.word	0x20000420
 800477c:	000f4240 	.word	0x000f4240

08004780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8004780:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004782:	4808      	ldr	r0, [pc, #32]	; (80047a4 <MX_USART3_UART_Init+0x24>)
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <MX_USART3_UART_Init+0x28>)
 8004786:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8004788:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800478c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800478e:	2300      	movs	r3, #0
 8004790:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004792:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004794:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004796:	220c      	movs	r2, #12
 8004798:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800479a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800479c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800479e:	f7fe fe10 	bl	80033c2 <HAL_UART_Init>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80047a2:	bd08      	pop	{r3, pc}
 80047a4:	20000348 	.word	0x20000348
 80047a8:	40004800 	.word	0x40004800

080047ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80047ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047b0:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b2:	2400      	movs	r4, #0
 80047b4:	9404      	str	r4, [sp, #16]
 80047b6:	9405      	str	r4, [sp, #20]
 80047b8:	9406      	str	r4, [sp, #24]
 80047ba:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047bc:	4b3a      	ldr	r3, [pc, #232]	; (80048a8 <MX_GPIO_Init+0xfc>)
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	f042 0210 	orr.w	r2, r2, #16
 80047c4:	619a      	str	r2, [r3, #24]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	f002 0210 	and.w	r2, r2, #16
 80047cc:	9200      	str	r2, [sp, #0]
 80047ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	f042 0220 	orr.w	r2, r2, #32
 80047d6:	619a      	str	r2, [r3, #24]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	f002 0220 	and.w	r2, r2, #32
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e2:	699a      	ldr	r2, [r3, #24]
 80047e4:	f042 0204 	orr.w	r2, r2, #4
 80047e8:	619a      	str	r2, [r3, #24]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	f002 0204 	and.w	r2, r2, #4
 80047f0:	9202      	str	r2, [sp, #8]
 80047f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	619a      	str	r2, [r3, #24]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	9303      	str	r3, [sp, #12]
 8004804:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8004806:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80048b4 <MX_GPIO_Init+0x108>
 800480a:	4622      	mov	r2, r4
 800480c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004810:	4648      	mov	r0, r9
 8004812:	f7fb fff2 	bl	80007fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STATUS_LED_Pin|DW_RESET_Pin|DW_NSS_Pin|DW_WKUP_Pin, GPIO_PIN_RESET);
 8004816:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80048b8 <MX_GPIO_Init+0x10c>
 800481a:	4622      	mov	r2, r4
 800481c:	f640 3104 	movw	r1, #2820	; 0xb04
 8004820:	4640      	mov	r0, r8
 8004822:	f7fb ffea 	bl	80007fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IR_GPIO_Port, IR_Pin, GPIO_PIN_RESET);
 8004826:	4e21      	ldr	r6, [pc, #132]	; (80048ac <MX_GPIO_Init+0x100>)
 8004828:	4622      	mov	r2, r4
 800482a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800482e:	4630      	mov	r0, r6
 8004830:	f7fb ffe3 	bl	80007fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8004834:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004838:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800483a:	2501      	movs	r5, #1
 800483c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004840:	2702      	movs	r7, #2
 8004842:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004844:	a904      	add	r1, sp, #16
 8004846:	4648      	mov	r0, r9
 8004848:	f7fb fee6 	bl	8000618 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_Pin */
  GPIO_InitStruct.Pin = BUT_Pin;
 800484c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 8004852:	a904      	add	r1, sp, #16
 8004854:	4640      	mov	r0, r8
 8004856:	f7fb fedf 	bl	8000618 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED_Pin DW_RESET_Pin DW_NSS_Pin DW_WKUP_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin|DW_RESET_Pin|DW_NSS_Pin|DW_WKUP_Pin;
 800485a:	f640 3304 	movw	r3, #2820	; 0xb04
 800485e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004860:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004862:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004864:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004866:	a904      	add	r1, sp, #16
 8004868:	4640      	mov	r0, r8
 800486a:	f7fb fed5 	bl	8000618 <HAL_GPIO_Init>

  /*Configure GPIO pin : DW_IRQn_Pin */
  GPIO_InitStruct.Pin = DW_IRQn_Pin;
 800486e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <MX_GPIO_Init+0x104>)
 8004872:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004874:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(DW_IRQn_GPIO_Port, &GPIO_InitStruct);
 8004876:	a904      	add	r1, sp, #16
 8004878:	4630      	mov	r0, r6
 800487a:	f7fb fecd 	bl	8000618 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_LED_Pin */
  GPIO_InitStruct.Pin = IR_Pin;
 800487e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004882:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004884:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004888:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(IR_GPIO_Port, &GPIO_InitStruct);
 800488a:	a904      	add	r1, sp, #16
 800488c:	4630      	mov	r0, r6
 800488e:	f7fb fec3 	bl	8000618 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8004892:	4622      	mov	r2, r4
 8004894:	4629      	mov	r1, r5
 8004896:	2006      	movs	r0, #6
 8004898:	f7fb fe10 	bl	80004bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800489c:	2006      	movs	r0, #6
 800489e:	f7fb fe41 	bl	8000524 <HAL_NVIC_EnableIRQ>

}
 80048a2:	b009      	add	sp, #36	; 0x24
 80048a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40010c00 	.word	0x40010c00
 80048b0:	10110000 	.word	0x10110000
 80048b4:	40011000 	.word	0x40011000
 80048b8:	40010800 	.word	0x40010800

080048bc <Start_Measuring_Time>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void Start_Measuring_Time()
{
 80048bc:	b508      	push	{r3, lr}
	TIM2->CNT = 0;
 80048be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048c2:	2200      	movs	r2, #0
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 80048c6:	4802      	ldr	r0, [pc, #8]	; (80048d0 <Start_Measuring_Time+0x14>)
 80048c8:	f7fe fb0e 	bl	8002ee8 <HAL_TIM_Base_Start>
}
 80048cc:	bd08      	pop	{r3, pc}
 80048ce:	bf00      	nop
 80048d0:	20000420 	.word	0x20000420

080048d4 <Stop_Measuring_Time>:

uint32_t Stop_Measuring_Time()
{
 80048d4:	b508      	push	{r3, lr}
	 HAL_TIM_Base_Stop(&htim2);
 80048d6:	4803      	ldr	r0, [pc, #12]	; (80048e4 <Stop_Measuring_Time+0x10>)
 80048d8:	f7fe fb13 	bl	8002f02 <HAL_TIM_Base_Stop>
	 return TIM2->CNT;
 80048dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80048e2:	bd08      	pop	{r3, pc}
 80048e4:	20000420 	.word	0x20000420

080048e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80048ec:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN 1 */
	uint8_t cnt = 0;
	char startBuf[] = {"Dobry"};
 80048ee:	4b4e      	ldr	r3, [pc, #312]	; (8004a28 <main+0x140>)
 80048f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048f4:	900a      	str	r0, [sp, #40]	; 0x28
 80048f6:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
	char usbBuf[20];
	GPIO_InitTypeDef ledDef;
	ledDef.Mode = GPIO_MODE_OUTPUT_PP;
 80048fa:	2401      	movs	r4, #1
 80048fc:	9407      	str	r4, [sp, #28]
	ledDef.Pin = LED_Pin;
 80048fe:	f44f 4580 	mov.w	r5, #16384	; 0x4000
 8004902:	9506      	str	r5, [sp, #24]
	ledDef.Pull = GPIO_NOPULL;
 8004904:	2600      	movs	r6, #0
 8004906:	9608      	str	r6, [sp, #32]
	ledDef.Speed = GPIO_SPEED_FREQ_LOW;
 8004908:	2302      	movs	r3, #2
 800490a:	9309      	str	r3, [sp, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800490c:	f7fb fc42 	bl	8000194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004910:	f7ff fe40 	bl	8004594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004914:	f7ff ff4a 	bl	80047ac <MX_GPIO_Init>
  MX_SPI2_Init();
 8004918:	f7ff fee8 	bl	80046ec <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800491c:	f7ff ff30 	bl	8004780 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8004920:	f7ff fe98 	bl	8004654 <MX_I2C1_Init>
  MX_RTC_Init();
 8004924:	f7ff feb0 	bl	8004688 <MX_RTC_Init>
  MX_TIM2_Init();
 8004928:	f7ff fefe 	bl	8004728 <MX_TIM2_Init>
  MX_ADC1_Init();
 800492c:	f7ff fe6e 	bl	800460c <MX_ADC1_Init>
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004930:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <main+0x144>)
 8004932:	699a      	ldr	r2, [r3, #24]
 8004934:	f042 0210 	orr.w	r2, r2, #16
 8004938:	619a      	str	r2, [r3, #24]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	f003 0310 	and.w	r3, r3, #16
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(LED_GPIO_Port, &ledDef);
 8004944:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8004a60 <main+0x178>
 8004948:	a906      	add	r1, sp, #24
 800494a:	4648      	mov	r0, r9
 800494c:	f7fb fe64 	bl	8000618 <HAL_GPIO_Init>

#ifdef NUCLEO
  ledDef.Pin = IR_Pin;
 8004950:	f44f 5880 	mov.w	r8, #4096	; 0x1000
 8004954:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(IR_GPIO_Port, &ledDef);
 8004958:	4f35      	ldr	r7, [pc, #212]	; (8004a30 <main+0x148>)
 800495a:	a906      	add	r1, sp, #24
 800495c:	4638      	mov	r0, r7
 800495e:	f7fb fe5b 	bl	8000618 <HAL_GPIO_Init>
#endif
  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8004962:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004966:	f7fd fa0d 	bl	8001d84 <HAL_PWR_DisableWakeUpPin>

  GPIO_InitTypeDef butDef;
  butDef.Pin = BUT_Pin;
 800496a:	9402      	str	r4, [sp, #8]
  butDef.Mode = GPIO_MODE_INPUT;
 800496c:	9603      	str	r6, [sp, #12]
  butDef.Pull = GPIO_PULLUP;
 800496e:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(BUT_GPIO_Port, &butDef);
 8004970:	a902      	add	r1, sp, #8
 8004972:	4830      	ldr	r0, [pc, #192]	; (8004a34 <main+0x14c>)
 8004974:	f7fb fe50 	bl	8000618 <HAL_GPIO_Init>


#ifdef POS_FUNCTIONS
#ifdef ANCHOR
  UWB_Anchor_Init();
 8004978:	f001 f9c6 	bl	8005d08 <UWB_Anchor_Init>
  globalUWBData.timeout = 2750;
 800497c:	4b2e      	ldr	r3, [pc, #184]	; (8004a38 <main+0x150>)
 800497e:	f640 22be 	movw	r2, #2750	; 0xabe
 8004982:	825a      	strh	r2, [r3, #18]
  oldTxDelay = newTxDelay;
#endif

#endif

  deviceID = dwt_readdevid();
 8004984:	f000 fb71 	bl	800506a <dwt_readdevid>
 8004988:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <main+0x154>)
 800498a:	6018      	str	r0, [r3, #0]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, LED_ACTIVE_STATE);
 800498c:	4622      	mov	r2, r4
 800498e:	4629      	mov	r1, r5
 8004990:	4648      	mov	r0, r9
 8004992:	f7fb ff32 	bl	80007fa <HAL_GPIO_WritePin>

#ifdef NUCLEO
  HAL_GPIO_WritePin(IR_GPIO_Port, IR_Pin, LED_ACTIVE_STATE);
 8004996:	4622      	mov	r2, r4
 8004998:	4641      	mov	r1, r8
 800499a:	4638      	mov	r0, r7
 800499c:	f7fb ff2d 	bl	80007fa <HAL_GPIO_WritePin>
#endif
  HAL_UART_Transmit(&huart3, startBuf, sizeof(startBuf), 100U);
 80049a0:	2364      	movs	r3, #100	; 0x64
 80049a2:	2206      	movs	r2, #6
 80049a4:	a90a      	add	r1, sp, #40	; 0x28
 80049a6:	4826      	ldr	r0, [pc, #152]	; (8004a40 <main+0x158>)
 80049a8:	f7fe fd3a 	bl	8003420 <HAL_UART_Transmit>
 80049ac:	e00f      	b.n	80049ce <main+0xe6>

    	  newTxDelay = atoi(usbRxBuffer);
    	  CDC_Transmit_FS(intBuf, sprintf(intBuf, "Nowy delay: %d \r \n", newTxDelay));
      }

      CDC_Transmit_FS(intBuf, sprintf(intBuf, " %ld \r \n", testTagDist));
 80049ae:	4c25      	ldr	r4, [pc, #148]	; (8004a44 <main+0x15c>)
 80049b0:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <main+0x160>)
 80049b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b6:	4925      	ldr	r1, [pc, #148]	; (8004a4c <main+0x164>)
 80049b8:	4620      	mov	r0, r4
 80049ba:	f001 fb33 	bl	8006024 <siprintf>
 80049be:	4601      	mov	r1, r0
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 fa0b 	bl	8004ddc <CDC_Transmit_FS>
      }



#endif //USE_IMU
      debugTimer = Stop_Measuring_Time();
 80049c6:	f7ff ff85 	bl	80048d4 <Stop_Measuring_Time>
 80049ca:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <main+0x154>)
 80049cc:	6098      	str	r0, [r3, #8]
	  Start_Measuring_Time();
 80049ce:	f7ff ff75 	bl	80048bc <Start_Measuring_Time>
	  UWB_Anchor_Get_Distance(&globalUWBData, 1);
 80049d2:	4c19      	ldr	r4, [pc, #100]	; (8004a38 <main+0x150>)
 80049d4:	2101      	movs	r1, #1
 80049d6:	4620      	mov	r0, r4
 80049d8:	f001 f9c0 	bl	8005d5c <UWB_Anchor_Get_Distance>
	  UWB_Anchor_Get_Distance(&globalUWBData, 2);
 80049dc:	2102      	movs	r1, #2
 80049de:	4620      	mov	r0, r4
 80049e0:	f001 f9bc 	bl	8005d5c <UWB_Anchor_Get_Distance>
      UWB_Anchor_Get_Distance(&globalUWBData, 3);
 80049e4:	2103      	movs	r1, #3
 80049e6:	4620      	mov	r0, r4
 80049e8:	f001 f9b8 	bl	8005d5c <UWB_Anchor_Get_Distance>
      UWB_Anchor_Get_Distance(&globalUWBData, 4);
 80049ec:	2104      	movs	r1, #4
 80049ee:	4620      	mov	r0, r4
 80049f0:	f001 f9b4 	bl	8005d5c <UWB_Anchor_Get_Distance>
      dwt_readdiagnostics(&rxdiag);
 80049f4:	4816      	ldr	r0, [pc, #88]	; (8004a50 <main+0x168>)
 80049f6:	f000 fb50 	bl	800509a <dwt_readdiagnostics>
      if(usbRxFlag == 1)
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <main+0x154>)
 80049fc:	791b      	ldrb	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d1d5      	bne.n	80049ae <main+0xc6>
    	  usbRxFlag = 0;
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <main+0x154>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	711a      	strb	r2, [r3, #4]
    	  newTxDelay = atoi(usbRxBuffer);
 8004a08:	4812      	ldr	r0, [pc, #72]	; (8004a54 <main+0x16c>)
 8004a0a:	f001 fad2 	bl	8005fb2 <atoi>
 8004a0e:	b282      	uxth	r2, r0
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <main+0x170>)
 8004a12:	801a      	strh	r2, [r3, #0]
    	  CDC_Transmit_FS(intBuf, sprintf(intBuf, "Nowy delay: %d \r \n", newTxDelay));
 8004a14:	4c0b      	ldr	r4, [pc, #44]	; (8004a44 <main+0x15c>)
 8004a16:	4911      	ldr	r1, [pc, #68]	; (8004a5c <main+0x174>)
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f001 fb03 	bl	8006024 <siprintf>
 8004a1e:	4601      	mov	r1, r0
 8004a20:	4620      	mov	r0, r4
 8004a22:	f000 f9db 	bl	8004ddc <CDC_Transmit_FS>
 8004a26:	e7c2      	b.n	80049ae <main+0xc6>
 8004a28:	08006b38 	.word	0x08006b38
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40010c00 	.word	0x40010c00
 8004a34:	40010800 	.word	0x40010800
 8004a38:	20000490 	.word	0x20000490
 8004a3c:	20000238 	.word	0x20000238
 8004a40:	20000348 	.word	0x20000348
 8004a44:	200004b8 	.word	0x200004b8
 8004a48:	200004b0 	.word	0x200004b0
 8004a4c:	08006b2c 	.word	0x08006b2c
 8004a50:	20000460 	.word	0x20000460
 8004a54:	200005dc 	.word	0x200005dc
 8004a58:	20000544 	.word	0x20000544
 8004a5c:	08006b18 	.word	0x08006b18
 8004a60:	40011000 	.word	0x40011000

08004a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a64:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_MspInit+0x38>)
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	619a      	str	r2, [r3, #24]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	f002 0201 	and.w	r2, r2, #1
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	69da      	ldr	r2, [r3, #28]
 8004a7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a80:	61da      	str	r2, [r3, #28]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	9301      	str	r3, [sp, #4]
 8004a8a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /**ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State 
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HAL_MspInit+0x3c>)
 8004a8e:	6853      	ldr	r3, [r2, #4]
 8004a90:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a96:	b002      	add	sp, #8
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40010000 	.word	0x40010000

08004aa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004aa4:	b500      	push	{lr}
 8004aa6:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9302      	str	r3, [sp, #8]
 8004aac:	9303      	str	r3, [sp, #12]
 8004aae:	9304      	str	r3, [sp, #16]
 8004ab0:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8004ab2:	6802      	ldr	r2, [r0, #0]
 8004ab4:	4b11      	ldr	r3, [pc, #68]	; (8004afc <HAL_ADC_MspInit+0x58>)
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d002      	beq.n	8004ac0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004aba:	b007      	add	sp, #28
 8004abc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004ac0:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aca:	619a      	str	r2, [r3, #24]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004ad2:	9200      	str	r2, [sp, #0]
 8004ad4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	f042 0210 	orr.w	r2, r2, #16
 8004adc:	619a      	str	r2, [r3, #24]
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004ae8:	230c      	movs	r3, #12
 8004aea:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aec:	2303      	movs	r3, #3
 8004aee:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004af0:	a902      	add	r1, sp, #8
 8004af2:	4803      	ldr	r0, [pc, #12]	; (8004b00 <HAL_ADC_MspInit+0x5c>)
 8004af4:	f7fb fd90 	bl	8000618 <HAL_GPIO_Init>
}
 8004af8:	e7df      	b.n	8004aba <HAL_ADC_MspInit+0x16>
 8004afa:	bf00      	nop
 8004afc:	40012400 	.word	0x40012400
 8004b00:	40011000 	.word	0x40011000

08004b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b04:	b510      	push	{r4, lr}
 8004b06:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	9304      	str	r3, [sp, #16]
 8004b10:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8004b12:	6802      	ldr	r2, [r0, #0]
 8004b14:	4b19      	ldr	r3, [pc, #100]	; (8004b7c <HAL_I2C_MspInit+0x78>)
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b1a:	b006      	add	sp, #24
 8004b1c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b1e:	4c18      	ldr	r4, [pc, #96]	; (8004b80 <HAL_I2C_MspInit+0x7c>)
 8004b20:	69a3      	ldr	r3, [r4, #24]
 8004b22:	f043 0308 	orr.w	r3, r3, #8
 8004b26:	61a3      	str	r3, [r4, #24]
 8004b28:	69a3      	ldr	r3, [r4, #24]
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8004b32:	23c0      	movs	r3, #192	; 0xc0
 8004b34:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b36:	2312      	movs	r3, #18
 8004b38:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b3e:	a902      	add	r1, sp, #8
 8004b40:	4810      	ldr	r0, [pc, #64]	; (8004b84 <HAL_I2C_MspInit+0x80>)
 8004b42:	f7fb fd69 	bl	8000618 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004b46:	69e3      	ldr	r3, [r4, #28]
 8004b48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b4c:	61e3      	str	r3, [r4, #28]
 8004b4e:	69e3      	ldr	r3, [r4, #28]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2102      	movs	r1, #2
 8004b5c:	201f      	movs	r0, #31
 8004b5e:	f7fb fcad 	bl	80004bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004b62:	201f      	movs	r0, #31
 8004b64:	f7fb fcde 	bl	8000524 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	2020      	movs	r0, #32
 8004b6e:	f7fb fca5 	bl	80004bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004b72:	2020      	movs	r0, #32
 8004b74:	f7fb fcd6 	bl	8000524 <HAL_NVIC_EnableIRQ>
}
 8004b78:	e7cf      	b.n	8004b1a <HAL_I2C_MspInit+0x16>
 8004b7a:	bf00      	nop
 8004b7c:	40005400 	.word	0x40005400
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40010c00 	.word	0x40010c00

08004b88 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8004b88:	6802      	ldr	r2, [r0, #0]
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_RTC_MspInit+0x40>)
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d000      	beq.n	8004b92 <HAL_RTC_MspInit+0xa>
 8004b90:	4770      	bx	lr
{
 8004b92:	b500      	push	{lr}
 8004b94:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8004b96:	f7fd f8ef 	bl	8001d78 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <HAL_RTC_MspInit+0x44>)
 8004b9c:	69da      	ldr	r2, [r3, #28]
 8004b9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8004ba2:	61da      	str	r2, [r3, #28]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004baa:	9301      	str	r3, [sp, #4]
 8004bac:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bae:	2101      	movs	r1, #1
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <HAL_RTC_MspInit+0x48>)
 8004bb2:	6019      	str	r1, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	f7fb fc80 	bl	80004bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004bbc:	2003      	movs	r0, #3
 8004bbe:	f7fb fcb1 	bl	8000524 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bc2:	b003      	add	sp, #12
 8004bc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bc8:	40002800 	.word	0x40002800
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	4242043c 	.word	0x4242043c

08004bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9302      	str	r3, [sp, #8]
 8004bdc:	9303      	str	r3, [sp, #12]
 8004bde:	9304      	str	r3, [sp, #16]
 8004be0:	9305      	str	r3, [sp, #20]
  if(hspi->Instance==SPI2)
 8004be2:	6802      	ldr	r2, [r0, #0]
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_SPI_MspInit+0x80>)
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d001      	beq.n	8004bee <HAL_SPI_MspInit+0x1a>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004bea:	b006      	add	sp, #24
 8004bec:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bee:	f503 33ec 	add.w	r3, r3, #120832	; 0x1d800
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf8:	61da      	str	r2, [r3, #28]
 8004bfa:	69da      	ldr	r2, [r3, #28]
 8004bfc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004c00:	9200      	str	r2, [sp, #0]
 8004c02:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	f042 0208 	orr.w	r2, r2, #8
 8004c0a:	619a      	str	r2, [r3, #24]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	9301      	str	r3, [sp, #4]
 8004c14:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DW_SCK_Pin|DW_MOSI_Pin;
 8004c16:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004c1a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c1c:	2502      	movs	r5, #2
 8004c1e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c20:	2303      	movs	r3, #3
 8004c22:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c24:	4e0c      	ldr	r6, [pc, #48]	; (8004c58 <HAL_SPI_MspInit+0x84>)
 8004c26:	a902      	add	r1, sp, #8
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f7fb fcf5 	bl	8000618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DW_MISO_Pin;
 8004c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c32:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c34:	2400      	movs	r4, #0
 8004c36:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(DW_MISO_GPIO_Port, &GPIO_InitStruct);
 8004c3a:	a902      	add	r1, sp, #8
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f7fb fceb 	bl	8000618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8004c42:	4622      	mov	r2, r4
 8004c44:	4629      	mov	r1, r5
 8004c46:	2024      	movs	r0, #36	; 0x24
 8004c48:	f7fb fc38 	bl	80004bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004c4c:	2024      	movs	r0, #36	; 0x24
 8004c4e:	f7fb fc69 	bl	8000524 <HAL_NVIC_EnableIRQ>
}
 8004c52:	e7ca      	b.n	8004bea <HAL_SPI_MspInit+0x16>
 8004c54:	40003800 	.word	0x40003800
 8004c58:	40010c00 	.word	0x40010c00

08004c5c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8004c5c:	6803      	ldr	r3, [r0, #0]
 8004c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c62:	d000      	beq.n	8004c66 <HAL_TIM_Base_MspInit+0xa>
 8004c64:	4770      	bx	lr
{
 8004c66:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c68:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	61da      	str	r2, [r3, #28]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	9301      	str	r3, [sp, #4]
 8004c7c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004c7e:	b002      	add	sp, #8
 8004c80:	4770      	bx	lr
	...

08004c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c84:	b530      	push	{r4, r5, lr}
 8004c86:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c88:	2300      	movs	r3, #0
 8004c8a:	9302      	str	r3, [sp, #8]
 8004c8c:	9303      	str	r3, [sp, #12]
 8004c8e:	9304      	str	r3, [sp, #16]
 8004c90:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART3)
 8004c92:	6802      	ldr	r2, [r0, #0]
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_UART_MspInit+0x80>)
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d001      	beq.n	8004c9e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004c9a:	b007      	add	sp, #28
 8004c9c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8004c9e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004ca8:	61da      	str	r2, [r3, #28]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8004cb0:	9200      	str	r2, [sp, #0]
 8004cb2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb4:	699a      	ldr	r2, [r3, #24]
 8004cb6:	f042 0208 	orr.w	r2, r2, #8
 8004cba:	619a      	str	r2, [r3, #24]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	9301      	str	r3, [sp, #4]
 8004cc4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin;
 8004cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cca:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 8004cd4:	4d0c      	ldr	r5, [pc, #48]	; (8004d08 <HAL_UART_MspInit+0x84>)
 8004cd6:	a902      	add	r1, sp, #8
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f7fb fc9d 	bl	8000618 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART_RX_Pin;
 8004cde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ce2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ce4:	2400      	movs	r4, #0
 8004ce6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce8:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 8004cea:	a902      	add	r1, sp, #8
 8004cec:	4628      	mov	r0, r5
 8004cee:	f7fb fc93 	bl	8000618 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	2027      	movs	r0, #39	; 0x27
 8004cf8:	f7fb fbe0 	bl	80004bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004cfc:	2027      	movs	r0, #39	; 0x27
 8004cfe:	f7fb fc11 	bl	8000524 <HAL_NVIC_EnableIRQ>
}
 8004d02:	e7ca      	b.n	8004c9a <HAL_UART_MspInit+0x16>
 8004d04:	40004800 	.word	0x40004800
 8004d08:	40010c00 	.word	0x40010c00

08004d0c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004d0c:	4770      	bx	lr

08004d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d0e:	e7fe      	b.n	8004d0e <HardFault_Handler>

08004d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d10:	e7fe      	b.n	8004d10 <MemManage_Handler>

08004d12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d12:	e7fe      	b.n	8004d12 <BusFault_Handler>

08004d14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d14:	e7fe      	b.n	8004d14 <UsageFault_Handler>

08004d16 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d16:	4770      	bx	lr

08004d18 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d18:	4770      	bx	lr

08004d1a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d1a:	4770      	bx	lr

08004d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d1e:	f7fb fa4b 	bl	80001b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d22:	bd08      	pop	{r3, pc}

08004d24 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8004d24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8004d26:	4802      	ldr	r0, [pc, #8]	; (8004d30 <RTC_IRQHandler+0xc>)
 8004d28:	f7fd fe8e 	bl	8002a48 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8004d2c:	bd08      	pop	{r3, pc}
 8004d2e:	bf00      	nop
 8004d30:	2000040c 	.word	0x2000040c

08004d34 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004d36:	2001      	movs	r0, #1
 8004d38:	f7fb fd6a 	bl	8000810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d3c:	bd08      	pop	{r3, pc}
	...

08004d40 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004d40:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004d42:	4802      	ldr	r0, [pc, #8]	; (8004d4c <USB_LP_CAN1_RX0_IRQHandler+0xc>)
 8004d44:	f7fc ff13 	bl	8001b6e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004d48:	bd08      	pop	{r3, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000828 	.word	0x20000828

08004d50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004d52:	4802      	ldr	r0, [pc, #8]	; (8004d5c <I2C1_EV_IRQHandler+0xc>)
 8004d54:	f7fc fb1e 	bl	8001394 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004d58:	bd08      	pop	{r3, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000388 	.word	0x20000388

08004d60 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004d60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004d62:	4802      	ldr	r0, [pc, #8]	; (8004d6c <I2C1_ER_IRQHandler+0xc>)
 8004d64:	f7fc fbca 	bl	80014fc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004d68:	bd08      	pop	{r3, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000388 	.word	0x20000388

08004d70 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004d70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004d72:	4802      	ldr	r0, [pc, #8]	; (8004d7c <SPI2_IRQHandler+0xc>)
 8004d74:	f7fd ffbe 	bl	8002cf4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004d78:	bd08      	pop	{r3, pc}
 8004d7a:	bf00      	nop
 8004d7c:	200002f0 	.word	0x200002f0

08004d80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004d80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004d82:	4802      	ldr	r0, [pc, #8]	; (8004d8c <USART3_IRQHandler+0xc>)
 8004d84:	f7fe fc1a 	bl	80035bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004d88:	bd08      	pop	{r3, pc}
 8004d8a:	bf00      	nop
 8004d8c:	20000348 	.word	0x20000348

08004d90 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004d90:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <SystemInit+0x40>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <SystemInit+0x44>)
 8004d9e:	400a      	ands	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004da8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004dac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004db4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004dbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004dc2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <SystemInit+0x48>)
 8004dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004dca:	609a      	str	r2, [r3, #8]
#endif 
}
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40021000 	.word	0x40021000
 8004dd4:	f8ff0000 	.word	0xf8ff0000
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <CDC_Transmit_FS+0x28>)
 8004dde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if (hcdc->TxState != 0){
 8004de2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004de6:	b10b      	cbz	r3, 8004dec <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8004de8:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8004dea:	4770      	bx	lr
{
 8004dec:	b510      	push	{r4, lr}
 8004dee:	460a      	mov	r2, r1
 8004df0:	4601      	mov	r1, r0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8004df2:	4c04      	ldr	r4, [pc, #16]	; (8004e04 <CDC_Transmit_FS+0x28>)
 8004df4:	4620      	mov	r0, r4
 8004df6:	f7ff f819 	bl	8003e2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7ff f81e 	bl	8003e3c <USBD_CDC_TransmitPacket>
}
 8004e00:	bd10      	pop	{r4, pc}
 8004e02:	bf00      	nop
 8004e04:	20000604 	.word	0x20000604

08004e08 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004e0a:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8004e0e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004e12:	f7ff f83e 	bl	8003e92 <USBD_LL_SetupStage>
}
 8004e16:	bd08      	pop	{r3, pc}

08004e18 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004e18:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004e1a:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004e1e:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8004e22:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004e26:	f7ff f861 	bl	8003eec <USBD_LL_DataOutStage>
}
 8004e2a:	bd08      	pop	{r3, pc}

08004e2c <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004e2c:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004e2e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e34:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004e38:	f7ff f88d 	bl	8003f56 <USBD_LL_DataInStage>
}
 8004e3c:	bd08      	pop	{r3, pc}

08004e3e <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004e3e:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004e40:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004e44:	f7ff f910 	bl	8004068 <USBD_LL_SOF>
}
 8004e48:	bd08      	pop	{r3, pc}

08004e4a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8004e4a:	b510      	push	{r4, lr}
 8004e4c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004e4e:	2101      	movs	r1, #1
 8004e50:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004e54:	f7ff f8f6 	bl	8004044 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004e58:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
 8004e5c:	f7ff f8d3 	bl	8004006 <USBD_LL_Reset>
}
 8004e60:	bd10      	pop	{r4, pc}
	...

08004e64 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004e64:	b510      	push	{r4, lr}
 8004e66:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8004e68:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004e6c:	f7ff f8ed 	bl	800404a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8004e70:	69a3      	ldr	r3, [r4, #24]
 8004e72:	b123      	cbz	r3, 8004e7e <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8004e74:	4a02      	ldr	r2, [pc, #8]	; (8004e80 <HAL_PCD_SuspendCallback+0x1c>)
 8004e76:	6913      	ldr	r3, [r2, #16]
 8004e78:	f043 0306 	orr.w	r3, r3, #6
 8004e7c:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8004e7e:	bd10      	pop	{r4, pc}
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004e84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8004e86:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8004e8a:	f7ff f8e7 	bl	800405c <USBD_LL_Resume>
}
 8004e8e:	bd08      	pop	{r3, pc}

08004e90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8004e90:	b510      	push	{r4, lr}
 8004e92:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8004e94:	4613      	mov	r3, r2
 8004e96:	4622      	mov	r2, r4
 8004e98:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004e9c:	f7fc fbdf 	bl	800165e <HAL_PCD_EP_Open>

  switch (hal_status) {
 8004ea0:	b118      	cbz	r0, 8004eaa <USBD_LL_OpenEP+0x1a>
 8004ea2:	2802      	cmp	r0, #2
 8004ea4:	d003      	beq.n	8004eae <USBD_LL_OpenEP+0x1e>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004ea6:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8004ea8:	bd10      	pop	{r4, pc}
      usb_status = USBD_OK;
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e7fc      	b.n	8004ea8 <USBD_LL_OpenEP+0x18>
      usb_status = USBD_BUSY;
 8004eae:	2001      	movs	r0, #1
    break;
 8004eb0:	e7fa      	b.n	8004ea8 <USBD_LL_OpenEP+0x18>

08004eb2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004eb2:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8004eb4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004eb8:	f7fc ff09 	bl	8001cce <HAL_PCD_EP_SetStall>

  switch (hal_status) {
 8004ebc:	b118      	cbz	r0, 8004ec6 <USBD_LL_StallEP+0x14>
 8004ebe:	2802      	cmp	r0, #2
 8004ec0:	d003      	beq.n	8004eca <USBD_LL_StallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004ec2:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004ec4:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	e7fc      	b.n	8004ec4 <USBD_LL_StallEP+0x12>
      usb_status = USBD_BUSY;
 8004eca:	2001      	movs	r0, #1
    break;
 8004ecc:	e7fa      	b.n	8004ec4 <USBD_LL_StallEP+0x12>

08004ece <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8004ece:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8004ed0:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004ed4:	f7fc ff29 	bl	8001d2a <HAL_PCD_EP_ClrStall>
     
  switch (hal_status) {
 8004ed8:	b118      	cbz	r0, 8004ee2 <USBD_LL_ClearStallEP+0x14>
 8004eda:	2802      	cmp	r0, #2
 8004edc:	d003      	beq.n	8004ee6 <USBD_LL_ClearStallEP+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004ede:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004ee0:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	e7fc      	b.n	8004ee0 <USBD_LL_ClearStallEP+0x12>
      usb_status = USBD_BUSY;
 8004ee6:	2001      	movs	r0, #1
    break;
 8004ee8:	e7fa      	b.n	8004ee0 <USBD_LL_ClearStallEP+0x12>

08004eea <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004eea:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  
  if((ep_addr & 0x80) == 0x80)
 8004eee:	f011 0f80 	tst.w	r1, #128	; 0x80
 8004ef2:	d106      	bne.n	8004f02 <USBD_LL_IsStallEP+0x18>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004ef4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004ef8:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004efc:	f891 022a 	ldrb.w	r0, [r1, #554]	; 0x22a
  }
}
 8004f00:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004f02:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8004f06:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004f0a:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
 8004f0e:	4770      	bx	lr

08004f10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004f10:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004f12:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004f16:	f7fc fb8e 	bl	8001636 <HAL_PCD_SetAddress>
     
  switch (hal_status) {
 8004f1a:	b118      	cbz	r0, 8004f24 <USBD_LL_SetUSBAddress+0x14>
 8004f1c:	2802      	cmp	r0, #2
 8004f1e:	d003      	beq.n	8004f28 <USBD_LL_SetUSBAddress+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004f20:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8004f22:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004f24:	2000      	movs	r0, #0
 8004f26:	e7fc      	b.n	8004f22 <USBD_LL_SetUSBAddress+0x12>
      usb_status = USBD_BUSY;
 8004f28:	2001      	movs	r0, #1
    break;
 8004f2a:	e7fa      	b.n	8004f22 <USBD_LL_SetUSBAddress+0x12>

08004f2c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004f2c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004f2e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004f32:	f7fc fbdc 	bl	80016ee <HAL_PCD_EP_Transmit>
     
  switch (hal_status) {
 8004f36:	b118      	cbz	r0, 8004f40 <USBD_LL_Transmit+0x14>
 8004f38:	2802      	cmp	r0, #2
 8004f3a:	d003      	beq.n	8004f44 <USBD_LL_Transmit+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004f3c:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8004f3e:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004f40:	2000      	movs	r0, #0
 8004f42:	e7fc      	b.n	8004f3e <USBD_LL_Transmit+0x12>
      usb_status = USBD_BUSY;
 8004f44:	2001      	movs	r0, #1
    break;
 8004f46:	e7fa      	b.n	8004f3e <USBD_LL_Transmit+0x12>

08004f48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8004f48:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004f4a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004f4e:	f7fc fbaf 	bl	80016b0 <HAL_PCD_EP_Receive>
     
  switch (hal_status) {
 8004f52:	b118      	cbz	r0, 8004f5c <USBD_LL_PrepareReceive+0x14>
 8004f54:	2802      	cmp	r0, #2
 8004f56:	d003      	beq.n	8004f60 <USBD_LL_PrepareReceive+0x18>
    case HAL_OK :
      usb_status = USBD_OK;
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8004f58:	2002      	movs	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8004f5a:	bd08      	pop	{r3, pc}
      usb_status = USBD_OK;
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e7fc      	b.n	8004f5a <USBD_LL_PrepareReceive+0x12>
      usb_status = USBD_BUSY;
 8004f60:	2001      	movs	r0, #1
    break;
 8004f62:	e7fa      	b.n	8004f5a <USBD_LL_PrepareReceive+0x12>

08004f64 <dwt_writetodevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    const uint8   *buffer
)
{
 8004f64:	b510      	push	{r4, lr}
 8004f66:	b082      	sub	sp, #8
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting WRITE operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8004f68:	b181      	cbz	r1, 8004f8c <dwt_writetodevice+0x28>
 8004f6a:	460c      	mov	r4, r1
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = 0xC0 | recordNumber ; // Bit-7 is WRITE operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8004f6c:	f060 003f 	orn	r0, r0, #63	; 0x3f
 8004f70:	f88d 0004 	strb.w	r0, [sp, #4]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8004f74:	297f      	cmp	r1, #127	; 0x7f
 8004f76:	d913      	bls.n	8004fa0 <dwt_writetodevice+0x3c>
        {
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8004f78:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004f7c:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8004f80:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8004f84:	f88d 4006 	strb.w	r4, [sp, #6]
 8004f88:	2003      	movs	r0, #3
 8004f8a:	e004      	b.n	8004f96 <dwt_writetodevice+0x32>
        header[cnt++] = 0x80 | recordNumber ; // Bit-7 is WRITE operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8004f8c:	f060 007f 	orn	r0, r0, #127	; 0x7f
 8004f90:	f88d 0004 	strb.w	r0, [sp, #4]
 8004f94:	2001      	movs	r0, #1
        }
    }

    // Write it to the SPI
    writetospi(cnt,header,length,buffer);
 8004f96:	a901      	add	r1, sp, #4
 8004f98:	f000 fcba 	bl	8005910 <writetospi>
} // end dwt_writetodevice()
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd10      	pop	{r4, pc}
            header[cnt++] = (uint8)index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8004fa0:	f88d 1005 	strb.w	r1, [sp, #5]
 8004fa4:	2002      	movs	r0, #2
 8004fa6:	e7f6      	b.n	8004f96 <dwt_writetodevice+0x32>

08004fa8 <dwt_writetxdata>:
    if ((txBufferOffset + txFrameLength) <= 1024)
 8004fa8:	1813      	adds	r3, r2, r0
 8004faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fae:	dc09      	bgt.n	8004fc4 <dwt_writetxdata+0x1c>
{
 8004fb0:	b510      	push	{r4, lr}
 8004fb2:	4614      	mov	r4, r2
 8004fb4:	460b      	mov	r3, r1
        dwt_writetodevice( TX_BUFFER_ID, txBufferOffset, txFrameLength-2, txFrameBytes);
 8004fb6:	1e82      	subs	r2, r0, #2
 8004fb8:	4621      	mov	r1, r4
 8004fba:	2009      	movs	r0, #9
 8004fbc:	f7ff ffd2 	bl	8004f64 <dwt_writetodevice>
        return DWT_SUCCESS;
 8004fc0:	2000      	movs	r0, #0
} // end dwt_writetxdata()
 8004fc2:	bd10      	pop	{r4, pc}
        return DWT_ERROR;
 8004fc4:	f04f 30ff 	mov.w	r0, #4294967295
} // end dwt_writetxdata()
 8004fc8:	4770      	bx	lr

08004fca <dwt_readfromdevice>:
    uint16  recordNumber,
    uint16  index,
    uint32        length,
    uint8         *buffer
)
{
 8004fca:	b510      	push	{r4, lr}
 8004fcc:	b082      	sub	sp, #8
#ifdef DWT_API_ERROR_CHECK
    assert(recordNumber <= 0x3F); // Record number is limited to 6-bits.
#endif

    // Write message header selecting READ operation and addresses as appropriate (this is one to three bytes long)
    if (index == 0) // For index of 0, no sub-index is required
 8004fce:	b181      	cbz	r1, 8004ff2 <dwt_readfromdevice+0x28>
 8004fd0:	460c      	mov	r4, r1
    else
    {
#ifdef DWT_API_ERROR_CHECK
        assert((index <= 0x7FFF) && ((index + length) <= 0x7FFF)); // Index and sub-addressable area are limited to 15-bits.
#endif
        header[cnt++] = (uint8)(0x40 | recordNumber) ; // Bit-7 zero is READ operation, bit-6 one=sub-address follows, bits 5-0 is reg file id
 8004fd2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8004fd6:	f88d 0004 	strb.w	r0, [sp, #4]

        if (index <= 127) // For non-zero index < 127, just a single sub-index byte is required
 8004fda:	297f      	cmp	r1, #127	; 0x7f
 8004fdc:	d911      	bls.n	8005002 <dwt_readfromdevice+0x38>
        {
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
        }
        else
        {
            header[cnt++] = 0x80 | (uint8)(index) ; // Bit-7 one means extended index, bits 6-0 is low seven bits of index.
 8004fde:	f061 017f 	orn	r1, r1, #127	; 0x7f
 8004fe2:	f88d 1005 	strb.w	r1, [sp, #5]
            header[cnt++] =  (uint8) (index >> 7) ; // 8-bit value = high eight bits of index.
 8004fe6:	f3c4 14c7 	ubfx	r4, r4, #7, #8
 8004fea:	f88d 4006 	strb.w	r4, [sp, #6]
 8004fee:	2003      	movs	r0, #3
 8004ff0:	e002      	b.n	8004ff8 <dwt_readfromdevice+0x2e>
        header[cnt++] = (uint8) recordNumber ; // Bit-7 zero is READ operation, bit-6 zero=NO sub-addressing, bits 5-0 is reg file id
 8004ff2:	f88d 0004 	strb.w	r0, [sp, #4]
 8004ff6:	2001      	movs	r0, #1
        }
    }

    // Do the read from the SPI
    readfromspi(cnt, header, length, buffer);  // result is stored in the buffer
 8004ff8:	a901      	add	r1, sp, #4
 8004ffa:	f000 fcbf 	bl	800597c <readfromspi>
} // end dwt_readfromdevice()
 8004ffe:	b002      	add	sp, #8
 8005000:	bd10      	pop	{r4, pc}
            header[cnt++] = (uint8) index ; // Bit-7 zero means no extension, bits 6-0 is index.
 8005002:	f88d 1005 	strb.w	r1, [sp, #5]
 8005006:	2002      	movs	r0, #2
 8005008:	e7f6      	b.n	8004ff8 <dwt_readfromdevice+0x2e>

0800500a <dwt_readrxdata>:
{
 800500a:	b510      	push	{r4, lr}
 800500c:	4614      	mov	r4, r2
    dwt_readfromdevice(RX_BUFFER_ID,rxBufferOffset,length,buffer) ;
 800500e:	4603      	mov	r3, r0
 8005010:	460a      	mov	r2, r1
 8005012:	4621      	mov	r1, r4
 8005014:	2011      	movs	r0, #17
 8005016:	f7ff ffd8 	bl	8004fca <dwt_readfromdevice>
}
 800501a:	bd10      	pop	{r4, pc}

0800501c <dwt_readtxtimestamp>:
{
 800501c:	b508      	push	{r3, lr}
    dwt_readfromdevice(TX_TIME_ID, TX_TIME_TX_STAMP_OFFSET, TX_TIME_TX_STAMP_LEN, timestamp) ; // Read bytes directly into buffer
 800501e:	4603      	mov	r3, r0
 8005020:	2205      	movs	r2, #5
 8005022:	2100      	movs	r1, #0
 8005024:	2017      	movs	r0, #23
 8005026:	f7ff ffd0 	bl	8004fca <dwt_readfromdevice>
}
 800502a:	bd08      	pop	{r3, pc}

0800502c <dwt_readrxtimestamp>:
{
 800502c:	b508      	push	{r3, lr}
    dwt_readfromdevice(RX_TIME_ID, RX_TIME_RX_STAMP_OFFSET, RX_TIME_RX_STAMP_LEN, timestamp) ; // Get the adjusted time of arrival
 800502e:	4603      	mov	r3, r0
 8005030:	2205      	movs	r2, #5
 8005032:	2100      	movs	r1, #0
 8005034:	2015      	movs	r0, #21
 8005036:	f7ff ffc8 	bl	8004fca <dwt_readfromdevice>
}
 800503a:	bd08      	pop	{r3, pc}

0800503c <dwt_read32bitoffsetreg>:
 * output parameters
 *
 * returns 32 bit register value
 */
uint32 dwt_read32bitoffsetreg(int regFileID, int regOffset)
{
 800503c:	b500      	push	{lr}
 800503e:	b083      	sub	sp, #12
    uint32  regval = 0 ;
    int     j ;
    uint8   buffer[4] ;

    dwt_readfromdevice(regFileID,regOffset,4,buffer); // Read 4 bytes (32-bits) register into buffer
 8005040:	ab01      	add	r3, sp, #4
 8005042:	2204      	movs	r2, #4
 8005044:	b289      	uxth	r1, r1
 8005046:	b280      	uxth	r0, r0
 8005048:	f7ff ffbf 	bl	8004fca <dwt_readfromdevice>

    for (j = 3 ; j >= 0 ; j --)
 800504c:	2303      	movs	r3, #3
    uint32  regval = 0 ;
 800504e:	2000      	movs	r0, #0
    for (j = 3 ; j >= 0 ; j --)
 8005050:	e006      	b.n	8005060 <dwt_read32bitoffsetreg+0x24>
    {
        regval = (regval << 8) + buffer[j] ;
 8005052:	aa02      	add	r2, sp, #8
 8005054:	441a      	add	r2, r3
 8005056:	f812 2c04 	ldrb.w	r2, [r2, #-4]
 800505a:	eb02 2000 	add.w	r0, r2, r0, lsl #8
    for (j = 3 ; j >= 0 ; j --)
 800505e:	3b01      	subs	r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	daf6      	bge.n	8005052 <dwt_read32bitoffsetreg+0x16>
    }
    return regval ;

} // end dwt_read32bitoffsetreg()
 8005064:	b003      	add	sp, #12
 8005066:	f85d fb04 	ldr.w	pc, [sp], #4

0800506a <dwt_readdevid>:
{
 800506a:	b508      	push	{r3, lr}
    return dwt_read32bitoffsetreg(DEV_ID_ID,0);
 800506c:	2100      	movs	r1, #0
 800506e:	4608      	mov	r0, r1
 8005070:	f7ff ffe4 	bl	800503c <dwt_read32bitoffsetreg>
}
 8005074:	bd08      	pop	{r3, pc}

08005076 <dwt_read16bitoffsetreg>:
 * output parameters
 *
 * returns 16 bit register value
 */
uint16 dwt_read16bitoffsetreg(int regFileID, int regOffset)
{
 8005076:	b500      	push	{lr}
 8005078:	b083      	sub	sp, #12
    uint16  regval = 0 ;
    uint8   buffer[2] ;

    dwt_readfromdevice(regFileID,regOffset,2,buffer); // Read 2 bytes (16-bits) register into buffer
 800507a:	ab01      	add	r3, sp, #4
 800507c:	2202      	movs	r2, #2
 800507e:	b289      	uxth	r1, r1
 8005080:	b280      	uxth	r0, r0
 8005082:	f7ff ffa2 	bl	8004fca <dwt_readfromdevice>

    regval = ((uint16)buffer[1] << 8) + buffer[0] ;
 8005086:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800508a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800508e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
    return regval ;

} // end dwt_read16bitoffsetreg()
 8005092:	b280      	uxth	r0, r0
 8005094:	b003      	add	sp, #12
 8005096:	f85d fb04 	ldr.w	pc, [sp], #4

0800509a <dwt_readdiagnostics>:
{
 800509a:	b510      	push	{r4, lr}
 800509c:	4604      	mov	r4, r0
    diagnostics->firstPath = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_INDEX_OFFSET);
 800509e:	2105      	movs	r1, #5
 80050a0:	2015      	movs	r0, #21
 80050a2:	f7ff ffe8 	bl	8005076 <dwt_read16bitoffsetreg>
 80050a6:	81e0      	strh	r0, [r4, #14]
    diagnostics->maxNoise = dwt_read16bitoffsetreg(LDE_IF_ID, LDE_THRESH_OFFSET);
 80050a8:	2100      	movs	r1, #0
 80050aa:	202e      	movs	r0, #46	; 0x2e
 80050ac:	f7ff ffe3 	bl	8005076 <dwt_read16bitoffsetreg>
 80050b0:	4623      	mov	r3, r4
 80050b2:	f823 0b04 	strh.w	r0, [r3], #4
    dwt_readfromdevice(RX_FQUAL_ID, 0x0, 8, (uint8*)&diagnostics->stdNoise);
 80050b6:	2208      	movs	r2, #8
 80050b8:	2100      	movs	r1, #0
 80050ba:	2012      	movs	r0, #18
 80050bc:	f7ff ff85 	bl	8004fca <dwt_readfromdevice>
    diagnostics->firstPathAmp1 = dwt_read16bitoffsetreg(RX_TIME_ID, RX_TIME_FP_AMPL1_OFFSET);
 80050c0:	2107      	movs	r1, #7
 80050c2:	2015      	movs	r0, #21
 80050c4:	f7ff ffd7 	bl	8005076 <dwt_read16bitoffsetreg>
 80050c8:	8060      	strh	r0, [r4, #2]
    diagnostics->rxPreamCount = (dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXPACC_MASK) >> RX_FINFO_RXPACC_SHIFT  ;
 80050ca:	2100      	movs	r1, #0
 80050cc:	2010      	movs	r0, #16
 80050ce:	f7ff ffb5 	bl	800503c <dwt_read32bitoffsetreg>
 80050d2:	0d00      	lsrs	r0, r0, #20
 80050d4:	81a0      	strh	r0, [r4, #12]
}
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <dwt_read8bitoffsetreg>:
 * output parameters
 *
 * returns 8-bit register value
 */
uint8 dwt_read8bitoffsetreg(int regFileID, int regOffset)
{
 80050d8:	b500      	push	{lr}
 80050da:	b083      	sub	sp, #12
    uint8 regval;

    dwt_readfromdevice(regFileID, regOffset, 1, &regval);
 80050dc:	f10d 0307 	add.w	r3, sp, #7
 80050e0:	2201      	movs	r2, #1
 80050e2:	b289      	uxth	r1, r1
 80050e4:	b280      	uxth	r0, r0
 80050e6:	f7ff ff70 	bl	8004fca <dwt_readfromdevice>

    return regval ;
}
 80050ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80050ee:	b003      	add	sp, #12
 80050f0:	f85d fb04 	ldr.w	pc, [sp], #4

080050f4 <dwt_write8bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write8bitoffsetreg(int regFileID, int regOffset, uint8 regval)
{
 80050f4:	b500      	push	{lr}
 80050f6:	b083      	sub	sp, #12
 80050f8:	ab02      	add	r3, sp, #8
 80050fa:	f803 2d01 	strb.w	r2, [r3, #-1]!
    dwt_writetodevice(regFileID, regOffset, 1, &regval);
 80050fe:	2201      	movs	r2, #1
 8005100:	b289      	uxth	r1, r1
 8005102:	b280      	uxth	r0, r0
 8005104:	f7ff ff2e 	bl	8004f64 <dwt_writetodevice>
}
 8005108:	b003      	add	sp, #12
 800510a:	f85d fb04 	ldr.w	pc, [sp], #4

0800510e <dwt_write16bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write16bitoffsetreg(int regFileID, int regOffset, uint16 regval)
{
 800510e:	b500      	push	{lr}
 8005110:	b083      	sub	sp, #12
    uint8   buffer[2] ;

    buffer[0] = regval & 0xFF;
 8005112:	f88d 2004 	strb.w	r2, [sp, #4]
    buffer[1] = regval >> 8 ;
 8005116:	0a12      	lsrs	r2, r2, #8
 8005118:	f88d 2005 	strb.w	r2, [sp, #5]

    dwt_writetodevice(regFileID,regOffset,2,buffer);
 800511c:	ab01      	add	r3, sp, #4
 800511e:	2202      	movs	r2, #2
 8005120:	b289      	uxth	r1, r1
 8005122:	b280      	uxth	r0, r0
 8005124:	f7ff ff1e 	bl	8004f64 <dwt_writetodevice>
} // end dwt_write16bitoffsetreg()
 8005128:	b003      	add	sp, #12
 800512a:	f85d fb04 	ldr.w	pc, [sp], #4

0800512e <dwt_setrxantennadelay>:
{
 800512e:	b508      	push	{r3, lr}
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_RXANTD_OFFSET, rxDelay);
 8005130:	4602      	mov	r2, r0
 8005132:	f641 0104 	movw	r1, #6148	; 0x1804
 8005136:	202e      	movs	r0, #46	; 0x2e
 8005138:	f7ff ffe9 	bl	800510e <dwt_write16bitoffsetreg>
}
 800513c:	bd08      	pop	{r3, pc}

0800513e <dwt_settxantennadelay>:
{
 800513e:	b508      	push	{r3, lr}
    dwt_write16bitoffsetreg(TX_ANTD_ID, TX_ANTD_OFFSET, txDelay);
 8005140:	4602      	mov	r2, r0
 8005142:	2100      	movs	r1, #0
 8005144:	2018      	movs	r0, #24
 8005146:	f7ff ffe2 	bl	800510e <dwt_write16bitoffsetreg>
}
 800514a:	bd08      	pop	{r3, pc}

0800514c <dwt_write32bitoffsetreg>:
 * output parameters
 *
 * no return value
 */
void dwt_write32bitoffsetreg(int regFileID, int regOffset, uint32 regval)
{
 800514c:	b510      	push	{r4, lr}
 800514e:	b082      	sub	sp, #8
    int     j ;
    uint8   buffer[4] ;

    for ( j = 0 ; j < 4 ; j++ )
 8005150:	2300      	movs	r3, #0
 8005152:	e005      	b.n	8005160 <dwt_write32bitoffsetreg+0x14>
    {
        buffer[j] = regval & 0xff ;
 8005154:	ac02      	add	r4, sp, #8
 8005156:	441c      	add	r4, r3
 8005158:	f804 2c04 	strb.w	r2, [r4, #-4]
        regval >>= 8 ;
 800515c:	0a12      	lsrs	r2, r2, #8
    for ( j = 0 ; j < 4 ; j++ )
 800515e:	3301      	adds	r3, #1
 8005160:	2b03      	cmp	r3, #3
 8005162:	ddf7      	ble.n	8005154 <dwt_write32bitoffsetreg+0x8>
    }

    dwt_writetodevice(regFileID,regOffset,4,buffer);
 8005164:	ab01      	add	r3, sp, #4
 8005166:	2204      	movs	r2, #4
 8005168:	b289      	uxth	r1, r1
 800516a:	b280      	uxth	r0, r0
 800516c:	f7ff fefa 	bl	8004f64 <dwt_writetodevice>
} // end dwt_write32bitoffsetreg()
 8005170:	b002      	add	sp, #8
 8005172:	bd10      	pop	{r4, pc}

08005174 <dwt_writetxfctrl>:
{
 8005174:	b508      	push	{r3, lr}
    uint32 reg32 = pdw1000local->txFCTRL | txFrameLength | ((uint32)txBufferOffset << TX_FCTRL_TXBOFFS_SHFT) | ((uint32)ranging << TX_FCTRL_TR_SHFT);
 8005176:	4b06      	ldr	r3, [pc, #24]	; (8005190 <dwt_writetxfctrl+0x1c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4318      	orrs	r0, r3
 800517e:	ea40 5081 	orr.w	r0, r0, r1, lsl #22
    dwt_write32bitreg(TX_FCTRL_ID, reg32);
 8005182:	ea40 32c2 	orr.w	r2, r0, r2, lsl #15
 8005186:	2100      	movs	r1, #0
 8005188:	2008      	movs	r0, #8
 800518a:	f7ff ffdf 	bl	800514c <dwt_write32bitoffsetreg>
} // end dwt_writetxfctrl()
 800518e:	bd08      	pop	{r3, pc}
 8005190:	2000000c 	.word	0x2000000c

08005194 <_dwt_otpread>:
 * output parameters
 *
 * returns the 32bit of read data
 */
uint32 _dwt_otpread(uint16 address)
{
 8005194:	b508      	push	{r3, lr}
    uint32 ret_data;

    // Write the address
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_ADDR, address);
 8005196:	4602      	mov	r2, r0
 8005198:	2104      	movs	r1, #4
 800519a:	202d      	movs	r0, #45	; 0x2d
 800519c:	f7ff ffb7 	bl	800510e <dwt_write16bitoffsetreg>

    // Perform OTP Read - Manual read mode has to be set
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_OTPREAD | OTP_CTRL_OTPRDEN);
 80051a0:	2203      	movs	r2, #3
 80051a2:	2106      	movs	r1, #6
 80051a4:	202d      	movs	r0, #45	; 0x2d
 80051a6:	f7ff ffa5 	bl	80050f4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(OTP_IF_ID, OTP_CTRL, 0x00); // OTPREAD is self clearing but OTPRDEN is not
 80051aa:	2200      	movs	r2, #0
 80051ac:	2106      	movs	r1, #6
 80051ae:	202d      	movs	r0, #45	; 0x2d
 80051b0:	f7ff ffa0 	bl	80050f4 <dwt_write8bitoffsetreg>

    // Read read data, available 40ns after rising edge of OTP_READ
    ret_data = dwt_read32bitoffsetreg(OTP_IF_ID, OTP_RDAT);
 80051b4:	210a      	movs	r1, #10
 80051b6:	202d      	movs	r0, #45	; 0x2d
 80051b8:	f7ff ff40 	bl	800503c <dwt_read32bitoffsetreg>

    // Return the 32bit of read data
    return ret_data;
}
 80051bc:	bd08      	pop	{r3, pc}

080051be <_dwt_aonarrayupload>:
 * output parameters
 *
 * no return value
 */
void _dwt_aonarrayupload(void)
{
 80051be:	b508      	push	{r3, lr}
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, 0x00); // Clear the register
 80051c0:	2200      	movs	r2, #0
 80051c2:	2102      	movs	r1, #2
 80051c4:	202c      	movs	r0, #44	; 0x2c
 80051c6:	f7ff ff95 	bl	80050f4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(AON_ID, AON_CTRL_OFFSET, AON_CTRL_SAVE);
 80051ca:	2202      	movs	r2, #2
 80051cc:	4611      	mov	r1, r2
 80051ce:	202c      	movs	r0, #44	; 0x2c
 80051d0:	f7ff ff90 	bl	80050f4 <dwt_write8bitoffsetreg>
}
 80051d4:	bd08      	pop	{r3, pc}

080051d6 <_dwt_configlde>:
 * output parameters
 *
 * no return value
 */
void _dwt_configlde(int prfIndex)
{
 80051d6:	b510      	push	{r4, lr}
 80051d8:	4604      	mov	r4, r0
    dwt_write8bitoffsetreg(LDE_IF_ID, LDE_CFG1_OFFSET, LDE_PARAM1); // 8-bit configuration register
 80051da:	226d      	movs	r2, #109	; 0x6d
 80051dc:	f640 0106 	movw	r1, #2054	; 0x806
 80051e0:	202e      	movs	r0, #46	; 0x2e
 80051e2:	f7ff ff87 	bl	80050f4 <dwt_write8bitoffsetreg>

    if(prfIndex)
 80051e6:	b93c      	cbnz	r4, 80051f8 <_dwt_configlde+0x22>
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
    }
    else
    {
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_16);
 80051e8:	f241 6207 	movw	r2, #5639	; 0x1607
 80051ec:	f641 0106 	movw	r1, #6150	; 0x1806
 80051f0:	202e      	movs	r0, #46	; 0x2e
 80051f2:	f7ff ff8c 	bl	800510e <dwt_write16bitoffsetreg>
    }
}
 80051f6:	bd10      	pop	{r4, pc}
        dwt_write16bitoffsetreg( LDE_IF_ID, LDE_CFG2_OFFSET, (uint16) LDE_PARAM3_64); // 16-bit LDE configuration tuning register
 80051f8:	f240 6207 	movw	r2, #1543	; 0x607
 80051fc:	f641 0106 	movw	r1, #6150	; 0x1806
 8005200:	202e      	movs	r0, #46	; 0x2e
 8005202:	f7ff ff84 	bl	800510e <dwt_write16bitoffsetreg>
 8005206:	e7f6      	b.n	80051f6 <_dwt_configlde+0x20>

08005208 <dwt_configure>:
{
 8005208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520c:	4604      	mov	r4, r0
    uint8 chan = config->chan ;
 800520e:	7805      	ldrb	r5, [r0, #0]
    uint16 reg16 = lde_replicaCoeff[config->rxCode];
 8005210:	7942      	ldrb	r2, [r0, #5]
 8005212:	4b79      	ldr	r3, [pc, #484]	; (80053f8 <dwt_configure+0x1f0>)
 8005214:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
    uint8 prfIndex = config->prf - DWT_PRF_16M;
 8005218:	7846      	ldrb	r6, [r0, #1]
 800521a:	3e01      	subs	r6, #1
 800521c:	b2f6      	uxtb	r6, r6
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 800521e:	2d04      	cmp	r5, #4
 8005220:	f000 80c6 	beq.w	80053b0 <dwt_configure+0x1a8>
 8005224:	2d07      	cmp	r5, #7
 8005226:	f000 80c1 	beq.w	80053ac <dwt_configure+0x1a4>
 800522a:	2700      	movs	r7, #0
    if(DWT_BR_110K == config->dataRate)
 800522c:	79e3      	ldrb	r3, [r4, #7]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 80c0 	bne.w	80053b4 <dwt_configure+0x1ac>
        pdw1000local->sysCFGreg |= SYS_CFG_RXM110K ;
 8005234:	4b71      	ldr	r3, [pc, #452]	; (80053fc <dwt_configure+0x1f4>)
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	6913      	ldr	r3, [r2, #16]
 800523a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800523e:	6113      	str	r3, [r2, #16]
        reg16 >>= 3; // lde_replicaCoeff must be divided by 8
 8005240:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    pdw1000local->longFrames = config->phrMode ;
 8005244:	4b6d      	ldr	r3, [pc, #436]	; (80053fc <dwt_configure+0x1f4>)
 8005246:	6819      	ldr	r1, [r3, #0]
 8005248:	7a23      	ldrb	r3, [r4, #8]
 800524a:	728b      	strb	r3, [r1, #10]
    pdw1000local->sysCFGreg &= ~SYS_CFG_PHR_MODE_11;
 800524c:	690a      	ldr	r2, [r1, #16]
 800524e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005252:	610a      	str	r2, [r1, #16]
    pdw1000local->sysCFGreg |= (SYS_CFG_PHR_MODE_11 & ((uint32)config->phrMode << SYS_CFG_PHR_MODE_SHFT));
 8005254:	7a23      	ldrb	r3, [r4, #8]
 8005256:	041b      	lsls	r3, r3, #16
 8005258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800525c:	431a      	orrs	r2, r3
 800525e:	610a      	str	r2, [r1, #16]
    dwt_write32bitreg(SYS_CFG_ID,pdw1000local->sysCFGreg) ;
 8005260:	2100      	movs	r1, #0
 8005262:	2004      	movs	r0, #4
 8005264:	f7ff ff72 	bl	800514c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(LDE_IF_ID, LDE_REPC_OFFSET, reg16) ;
 8005268:	4642      	mov	r2, r8
 800526a:	f642 0104 	movw	r1, #10244	; 0x2804
 800526e:	202e      	movs	r0, #46	; 0x2e
 8005270:	f7ff ff4d 	bl	800510e <dwt_write16bitoffsetreg>
    _dwt_configlde(prfIndex);
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff ffae 	bl	80051d6 <_dwt_configlde>
    dwt_write32bitoffsetreg(FS_CTRL_ID, FS_PLLCFG_OFFSET, fs_pll_cfg[chan_idx[chan]]);
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <dwt_configure+0x1f8>)
 800527c:	f813 8005 	ldrb.w	r8, [r3, r5]
 8005280:	4b60      	ldr	r3, [pc, #384]	; (8005404 <dwt_configure+0x1fc>)
 8005282:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8005286:	2107      	movs	r1, #7
 8005288:	202b      	movs	r0, #43	; 0x2b
 800528a:	f7ff ff5f 	bl	800514c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_PLLTUNE_OFFSET, fs_pll_tune[chan_idx[chan]]);
 800528e:	4b5e      	ldr	r3, [pc, #376]	; (8005408 <dwt_configure+0x200>)
 8005290:	f813 2008 	ldrb.w	r2, [r3, r8]
 8005294:	210b      	movs	r1, #11
 8005296:	202b      	movs	r0, #43	; 0x2b
 8005298:	f7ff ff2c 	bl	80050f4 <dwt_write8bitoffsetreg>
    dwt_write8bitoffsetreg(RF_CONF_ID, RF_RXCTRLH_OFFSET, rx_config[bw]);
 800529c:	b2ff      	uxtb	r7, r7
 800529e:	4b5b      	ldr	r3, [pc, #364]	; (800540c <dwt_configure+0x204>)
 80052a0:	5dda      	ldrb	r2, [r3, r7]
 80052a2:	210b      	movs	r1, #11
 80052a4:	2028      	movs	r0, #40	; 0x28
 80052a6:	f7ff ff25 	bl	80050f4 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(RF_CONF_ID, RF_TXCTRL_OFFSET, tx_config[chan_idx[chan]]);
 80052aa:	4b59      	ldr	r3, [pc, #356]	; (8005410 <dwt_configure+0x208>)
 80052ac:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 80052b0:	210c      	movs	r1, #12
 80052b2:	2028      	movs	r0, #40	; 0x28
 80052b4:	f7ff ff4a 	bl	800514c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE0b_OFFSET, sftsh[config->dataRate][config->nsSFD]);
 80052b8:	79e2      	ldrb	r2, [r4, #7]
 80052ba:	79a3      	ldrb	r3, [r4, #6]
 80052bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80052c0:	4a54      	ldr	r2, [pc, #336]	; (8005414 <dwt_configure+0x20c>)
 80052c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80052c6:	2102      	movs	r1, #2
 80052c8:	2027      	movs	r0, #39	; 0x27
 80052ca:	f7ff ff20 	bl	800510e <dwt_write16bitoffsetreg>
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1a_OFFSET, dtune1[prfIndex]);
 80052ce:	4b52      	ldr	r3, [pc, #328]	; (8005418 <dwt_configure+0x210>)
 80052d0:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
 80052d4:	2104      	movs	r1, #4
 80052d6:	2027      	movs	r0, #39	; 0x27
 80052d8:	f7ff ff19 	bl	800510e <dwt_write16bitoffsetreg>
    if(config->dataRate == DWT_BR_110K)
 80052dc:	79e3      	ldrb	r3, [r4, #7]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d06f      	beq.n	80053c2 <dwt_configure+0x1ba>
        if(config->txPreambLength == DWT_PLEN_64)
 80052e2:	78a3      	ldrb	r3, [r4, #2]
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d072      	beq.n	80053ce <dwt_configure+0x1c6>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_850K_6M8);
 80052e8:	2220      	movs	r2, #32
 80052ea:	2106      	movs	r1, #6
 80052ec:	2027      	movs	r0, #39	; 0x27
 80052ee:	f7ff ff0e 	bl	800510e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE128PLUS);
 80052f2:	2228      	movs	r2, #40	; 0x28
 80052f4:	2126      	movs	r1, #38	; 0x26
 80052f6:	2027      	movs	r0, #39	; 0x27
 80052f8:	f7ff fefc 	bl	80050f4 <dwt_write8bitoffsetreg>
    dwt_write32bitoffsetreg(DRX_CONF_ID, DRX_TUNE2_OFFSET, digital_bb_config[prfIndex][config->rxPAC]);
 80052fc:	78e3      	ldrb	r3, [r4, #3]
 80052fe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8005302:	4a46      	ldr	r2, [pc, #280]	; (800541c <dwt_configure+0x214>)
 8005304:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005308:	2108      	movs	r1, #8
 800530a:	2027      	movs	r0, #39	; 0x27
 800530c:	f7ff ff1e 	bl	800514c <dwt_write32bitoffsetreg>
    if(config->sfdTO == 0)
 8005310:	8963      	ldrh	r3, [r4, #10]
 8005312:	b913      	cbnz	r3, 800531a <dwt_configure+0x112>
        config->sfdTO = DWT_SFDTOC_DEF;
 8005314:	f241 0341 	movw	r3, #4161	; 0x1041
 8005318:	8163      	strh	r3, [r4, #10]
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_SFDTOC_OFFSET, config->sfdTO);
 800531a:	8962      	ldrh	r2, [r4, #10]
 800531c:	2120      	movs	r1, #32
 800531e:	2027      	movs	r0, #39	; 0x27
 8005320:	f7ff fef5 	bl	800510e <dwt_write16bitoffsetreg>
    dwt_write32bitoffsetreg( AGC_CFG_STS_ID, 0xC, agc_config.lo32);
 8005324:	4f3e      	ldr	r7, [pc, #248]	; (8005420 <dwt_configure+0x218>)
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	210c      	movs	r1, #12
 800532a:	2023      	movs	r0, #35	; 0x23
 800532c:	f7ff ff0e 	bl	800514c <dwt_write32bitoffsetreg>
    dwt_write16bitoffsetreg( AGC_CFG_STS_ID, 0x4, agc_config.target[prfIndex]);
 8005330:	eb07 0646 	add.w	r6, r7, r6, lsl #1
 8005334:	88b2      	ldrh	r2, [r6, #4]
 8005336:	2104      	movs	r1, #4
 8005338:	2023      	movs	r0, #35	; 0x23
 800533a:	f7ff fee8 	bl	800510e <dwt_write16bitoffsetreg>
    if(config->nsSFD)
 800533e:	79a2      	ldrb	r2, [r4, #6]
 8005340:	2a00      	cmp	r2, #0
 8005342:	d14f      	bne.n	80053e4 <dwt_configure+0x1dc>
    uint8 useDWnsSFD = 0;
 8005344:	4610      	mov	r0, r2
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 8005346:	f005 030f 	and.w	r3, r5, #15
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 800534a:	012d      	lsls	r5, r5, #4
 800534c:	b2ed      	uxtb	r5, r5
    regval =  (CHAN_CTRL_TX_CHAN_MASK & (chan << CHAN_CTRL_TX_CHAN_SHIFT)) | // Transmit Channel
 800534e:	432b      	orrs	r3, r5
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8005350:	7861      	ldrb	r1, [r4, #1]
 8005352:	0489      	lsls	r1, r1, #18
 8005354:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
              (CHAN_CTRL_RX_CHAN_MASK & (chan << CHAN_CTRL_RX_CHAN_SHIFT)) | // Receive Channel
 8005358:	430b      	orrs	r3, r1
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 800535a:	0512      	lsls	r2, r2, #20
 800535c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
              (CHAN_CTRL_RXFPRF_MASK & ((uint32)config->prf << CHAN_CTRL_RXFPRF_SHIFT)) | // RX PRF
 8005360:	4313      	orrs	r3, r2
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8005362:	0440      	lsls	r0, r0, #17
 8005364:	f400 3200 	and.w	r2, r0, #131072	; 0x20000
              ((CHAN_CTRL_TNSSFD|CHAN_CTRL_RNSSFD) & ((uint32)nsSfd_result << CHAN_CTRL_TNSSFD_SHIFT)) | // nsSFD enable RX&TX
 8005368:	4313      	orrs	r3, r2
              (CHAN_CTRL_TX_PCOD_MASK & ((uint32)config->txCode << CHAN_CTRL_TX_PCOD_SHIFT)) | // TX Preamble Code
 800536a:	7922      	ldrb	r2, [r4, #4]
 800536c:	0592      	lsls	r2, r2, #22
 800536e:	f002 62f8 	and.w	r2, r2, #130023424	; 0x7c00000
              (CHAN_CTRL_DWSFD & ((uint32)useDWnsSFD << CHAN_CTRL_DWSFD_SHIFT)) | // Use DW nsSFD
 8005372:	4313      	orrs	r3, r2
              (CHAN_CTRL_RX_PCOD_MASK & ((uint32)config->rxCode << CHAN_CTRL_RX_PCOD_SHIFT)) ; // RX Preamble Code
 8005374:	7962      	ldrb	r2, [r4, #5]
    dwt_write32bitreg(CHAN_CTRL_ID,regval) ;
 8005376:	ea43 62c2 	orr.w	r2, r3, r2, lsl #27
 800537a:	2100      	movs	r1, #0
 800537c:	201f      	movs	r0, #31
 800537e:	f7ff fee5 	bl	800514c <dwt_write32bitoffsetreg>
    pdw1000local->txFCTRL = ((uint32)(config->txPreambLength | config->prf) << TX_FCTRL_TXPRF_SHFT) | ((uint32)config->dataRate << TX_FCTRL_TXBR_SHFT);
 8005382:	78a2      	ldrb	r2, [r4, #2]
 8005384:	7863      	ldrb	r3, [r4, #1]
 8005386:	4313      	orrs	r3, r2
 8005388:	79e2      	ldrb	r2, [r4, #7]
 800538a:	0352      	lsls	r2, r2, #13
 800538c:	491b      	ldr	r1, [pc, #108]	; (80053fc <dwt_configure+0x1f4>)
 800538e:	6809      	ldr	r1, [r1, #0]
 8005390:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005394:	60ca      	str	r2, [r1, #12]
    dwt_write32bitreg(TX_FCTRL_ID, pdw1000local->txFCTRL);
 8005396:	2100      	movs	r1, #0
 8005398:	2008      	movs	r0, #8
 800539a:	f7ff fed7 	bl	800514c <dwt_write32bitoffsetreg>
    dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, SYS_CTRL_TXSTRT | SYS_CTRL_TRXOFF); // Request TX start and TRX off at the same time
 800539e:	2242      	movs	r2, #66	; 0x42
 80053a0:	2100      	movs	r1, #0
 80053a2:	200d      	movs	r0, #13
 80053a4:	f7ff fea6 	bl	80050f4 <dwt_write8bitoffsetreg>
} // end dwt_configure()
 80053a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    uint8 bw = ((chan == 4) || (chan == 7)) ? 1 : 0 ; // Select wide or narrow band
 80053ac:	2701      	movs	r7, #1
 80053ae:	e73d      	b.n	800522c <dwt_configure+0x24>
 80053b0:	2701      	movs	r7, #1
 80053b2:	e73b      	b.n	800522c <dwt_configure+0x24>
        pdw1000local->sysCFGreg &= (~SYS_CFG_RXM110K) ;
 80053b4:	4b11      	ldr	r3, [pc, #68]	; (80053fc <dwt_configure+0x1f4>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	6913      	ldr	r3, [r2, #16]
 80053ba:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80053be:	6113      	str	r3, [r2, #16]
 80053c0:	e740      	b.n	8005244 <dwt_configure+0x3c>
        dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_110K);
 80053c2:	2264      	movs	r2, #100	; 0x64
 80053c4:	2106      	movs	r1, #6
 80053c6:	2027      	movs	r0, #39	; 0x27
 80053c8:	f7ff fea1 	bl	800510e <dwt_write16bitoffsetreg>
 80053cc:	e796      	b.n	80052fc <dwt_configure+0xf4>
            dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_TUNE1b_OFFSET, DRX_TUNE1b_6M8_PRE64);
 80053ce:	2210      	movs	r2, #16
 80053d0:	2106      	movs	r1, #6
 80053d2:	2027      	movs	r0, #39	; 0x27
 80053d4:	f7ff fe9b 	bl	800510e <dwt_write16bitoffsetreg>
            dwt_write8bitoffsetreg(DRX_CONF_ID, DRX_TUNE4H_OFFSET, DRX_TUNE4H_PRE64);
 80053d8:	2210      	movs	r2, #16
 80053da:	2126      	movs	r1, #38	; 0x26
 80053dc:	2027      	movs	r0, #39	; 0x27
 80053de:	f7ff fe89 	bl	80050f4 <dwt_write8bitoffsetreg>
 80053e2:	e78b      	b.n	80052fc <dwt_configure+0xf4>
        dwt_write8bitoffsetreg(USR_SFD_ID, 0x00, dwnsSFDlen[config->dataRate]);
 80053e4:	79e3      	ldrb	r3, [r4, #7]
 80053e6:	4a0f      	ldr	r2, [pc, #60]	; (8005424 <dwt_configure+0x21c>)
 80053e8:	5cd2      	ldrb	r2, [r2, r3]
 80053ea:	2100      	movs	r1, #0
 80053ec:	2021      	movs	r0, #33	; 0x21
 80053ee:	f7ff fe81 	bl	80050f4 <dwt_write8bitoffsetreg>
        useDWnsSFD = 1 ;
 80053f2:	2001      	movs	r0, #1
        nsSfd_result = 3 ;
 80053f4:	2203      	movs	r2, #3
 80053f6:	e7a6      	b.n	8005346 <dwt_configure+0x13e>
 80053f8:	08006a28 	.word	0x08006a28
 80053fc:	2000000c 	.word	0x2000000c
 8005400:	08006ad4 	.word	0x08006ad4
 8005404:	08006aa4 	.word	0x08006aa4
 8005408:	08006a9c 	.word	0x08006a9c
 800540c:	08006a98 	.word	0x08006a98
 8005410:	08006abc 	.word	0x08006abc
 8005414:	08006a80 	.word	0x08006a80
 8005418:	08006a7c 	.word	0x08006a7c
 800541c:	08006a5c 	.word	0x08006a5c
 8005420:	08006a90 	.word	0x08006a90
 8005424:	08006a8c 	.word	0x08006a8c

08005428 <dwt_setrxaftertxdelay>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxaftertxdelay(uint32 rxDelayTime)
{
 8005428:	b510      	push	{r4, lr}
 800542a:	4604      	mov	r4, r0
    uint32 val = dwt_read32bitreg(ACK_RESP_T_ID) ; // Read ACK_RESP_T_ID register
 800542c:	2100      	movs	r1, #0
 800542e:	201a      	movs	r0, #26
 8005430:	f7ff fe04 	bl	800503c <dwt_read32bitoffsetreg>

    val &= ~(ACK_RESP_T_W4R_TIM_MASK) ; // Clear the timer (19:0)
 8005434:	0d00      	lsrs	r0, r0, #20
 8005436:	0500      	lsls	r0, r0, #20

    val |= (rxDelayTime & ACK_RESP_T_W4R_TIM_MASK) ; // In UWB microseconds (e.g. turn the receiver on 20uus after TX)
 8005438:	f3c4 0213 	ubfx	r2, r4, #0, #20

    dwt_write32bitreg(ACK_RESP_T_ID, val) ;
 800543c:	4302      	orrs	r2, r0
 800543e:	2100      	movs	r1, #0
 8005440:	201a      	movs	r0, #26
 8005442:	f7ff fe83 	bl	800514c <dwt_write32bitoffsetreg>
}
 8005446:	bd10      	pop	{r4, pc}

08005448 <dwt_setleds>:
 * output parameters none
 *
 * no return value
 */
void dwt_setleds(uint8 mode)
{
 8005448:	b538      	push	{r3, r4, r5, lr}
    uint32 reg;

    if (mode & DWT_LEDS_ENABLE)
 800544a:	f010 0f01 	tst.w	r0, #1
 800544e:	d02a      	beq.n	80054a6 <dwt_setleds+0x5e>
 8005450:	4604      	mov	r4, r0
    {
        // Set up MFIO for LED output.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 8005452:	2100      	movs	r1, #0
 8005454:	2026      	movs	r0, #38	; 0x26
 8005456:	f7ff fdf1 	bl	800503c <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
 800545a:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
        reg |= (GPIO_PIN2_RXLED | GPIO_PIN3_TXLED);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 800545e:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8005462:	2100      	movs	r1, #0
 8005464:	2026      	movs	r0, #38	; 0x26
 8005466:	f7ff fe71 	bl	800514c <dwt_write32bitoffsetreg>

        // Enable LP Oscillator to run from counter and turn on de-bounce clock.
        reg = dwt_read32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET);
 800546a:	2100      	movs	r1, #0
 800546c:	2036      	movs	r0, #54	; 0x36
 800546e:	f7ff fde5 	bl	800503c <dwt_read32bitoffsetreg>
        reg |= (PMSC_CTRL0_GPDCE | PMSC_CTRL0_KHZCLEN);
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, reg);
 8005472:	f440 0204 	orr.w	r2, r0, #8650752	; 0x840000
 8005476:	2100      	movs	r1, #0
 8005478:	2036      	movs	r0, #54	; 0x36
 800547a:	f7ff fe67 	bl	800514c <dwt_write32bitoffsetreg>

        // Enable LEDs to blink and set default blink time.
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
        // Make LEDs blink once if requested.
        if (mode & DWT_LEDS_INIT_BLINK)
 800547e:	f014 0402 	ands.w	r4, r4, #2
 8005482:	d10e      	bne.n	80054a2 <dwt_setleds+0x5a>
        reg = PMSC_LEDC_BLNKEN | PMSC_LEDC_BLINK_TIME_DEF;
 8005484:	f44f 7588 	mov.w	r5, #272	; 0x110
        {
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
        }
        dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8005488:	462a      	mov	r2, r5
 800548a:	2128      	movs	r1, #40	; 0x28
 800548c:	2036      	movs	r0, #54	; 0x36
 800548e:	f7ff fe5d 	bl	800514c <dwt_write32bitoffsetreg>
        // Clear force blink bits if needed.
        if(mode & DWT_LEDS_INIT_BLINK)
 8005492:	b194      	cbz	r4, 80054ba <dwt_setleds+0x72>
        {
            reg &= ~PMSC_LEDC_BLINK_NOW_ALL;
            dwt_write32bitoffsetreg(PMSC_ID, PMSC_LEDC_OFFSET, reg);
 8005494:	f405 7288 	and.w	r2, r5, #272	; 0x110
 8005498:	2128      	movs	r1, #40	; 0x28
 800549a:	2036      	movs	r0, #54	; 0x36
 800549c:	f7ff fe56 	bl	800514c <dwt_write32bitoffsetreg>
 80054a0:	e00b      	b.n	80054ba <dwt_setleds+0x72>
            reg |= PMSC_LEDC_BLINK_NOW_ALL;
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <dwt_setleds+0x74>)
 80054a4:	e7f0      	b.n	8005488 <dwt_setleds+0x40>
        }
    }
    else
    {
        // Clear the GPIO bits that are used for LED control.
        reg = dwt_read32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET);
 80054a6:	2100      	movs	r1, #0
 80054a8:	2026      	movs	r0, #38	; 0x26
 80054aa:	f7ff fdc7 	bl	800503c <dwt_read32bitoffsetreg>
        reg &= ~(GPIO_MSGP2_MASK | GPIO_MSGP3_MASK);
        dwt_write32bitoffsetreg(GPIO_CTRL_ID, GPIO_MODE_OFFSET, reg);
 80054ae:	f420 5270 	bic.w	r2, r0, #15360	; 0x3c00
 80054b2:	2100      	movs	r1, #0
 80054b4:	2026      	movs	r0, #38	; 0x26
 80054b6:	f7ff fe49 	bl	800514c <dwt_write32bitoffsetreg>
    }
}
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	000f0110 	.word	0x000f0110

080054c0 <_dwt_enableclocks>:
 * output parameters none
 *
 * no return value
 */
void _dwt_enableclocks(int clocks)
{
 80054c0:	b510      	push	{r4, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	4604      	mov	r4, r0
    uint8 reg[2];

    dwt_readfromdevice(PMSC_ID, PMSC_CTRL0_OFFSET, 2, reg);
 80054c6:	ab01      	add	r3, sp, #4
 80054c8:	2202      	movs	r2, #2
 80054ca:	2100      	movs	r1, #0
 80054cc:	2036      	movs	r0, #54	; 0x36
 80054ce:	f7ff fd7c 	bl	8004fca <dwt_readfromdevice>
    switch(clocks)
 80054d2:	2c0e      	cmp	r4, #14
 80054d4:	d812      	bhi.n	80054fc <_dwt_enableclocks+0x3c>
 80054d6:	e8df f004 	tbb	[pc, r4]
 80054da:	0820      	.short	0x0820
 80054dc:	11111129 	.word	0x11111129
 80054e0:	11413211 	.word	0x11413211
 80054e4:	5c554e11 	.word	0x5c554e11
 80054e8:	65          	.byte	0x65
 80054e9:	00          	.byte	0x00
    {
        case ENABLE_ALL_SEQ:
        {
            reg[0] = 0x00 ;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = reg[1] & 0xfe;
 80054f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80054f4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80054f8:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
    }


    // Need to write lower byte separately before setting the higher byte(s)
    dwt_writetodevice(PMSC_ID, PMSC_CTRL0_OFFSET, 1, &reg[0]);
 80054fc:	ab01      	add	r3, sp, #4
 80054fe:	2201      	movs	r2, #1
 8005500:	2100      	movs	r1, #0
 8005502:	2036      	movs	r0, #54	; 0x36
 8005504:	f7ff fd2e 	bl	8004f64 <dwt_writetodevice>
    dwt_writetodevice(PMSC_ID, 0x1, 1, &reg[1]);
 8005508:	f10d 0305 	add.w	r3, sp, #5
 800550c:	2201      	movs	r2, #1
 800550e:	4611      	mov	r1, r2
 8005510:	2036      	movs	r0, #54	; 0x36
 8005512:	f7ff fd27 	bl	8004f64 <dwt_writetodevice>

} // end _dwt_enableclocks()
 8005516:	b002      	add	sp, #8
 8005518:	bd10      	pop	{r4, pc}
            reg[0] = 0x01 | (reg[0] & 0xfc);
 800551a:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800551e:	f023 0303 	bic.w	r3, r3, #3
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
 800552a:	e7e7      	b.n	80054fc <_dwt_enableclocks+0x3c>
            reg[0] = 0x02 | (reg[0] & 0xfc);
 800552c:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005530:	f023 0303 	bic.w	r3, r3, #3
 8005534:	f043 0302 	orr.w	r3, r3, #2
 8005538:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
 800553c:	e7de      	b.n	80054fc <_dwt_enableclocks+0x3c>
            reg[0] = 0x48 | (reg[0] & 0xb3);
 800553e:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005542:	f023 034c 	bic.w	r3, r3, #76	; 0x4c
 8005546:	f043 0348 	orr.w	r3, r3, #72	; 0x48
 800554a:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x80 | reg[1];
 800554e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005552:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005556:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 800555a:	e7cf      	b.n	80054fc <_dwt_enableclocks+0x3c>
            reg[0] = reg[0] & 0xb3;
 800555c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005560:	f003 03b3 	and.w	r3, r3, #179	; 0xb3
 8005564:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x7f & reg[1];
 8005568:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800556c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005570:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 8005574:	e7c2      	b.n	80054fc <_dwt_enableclocks+0x3c>
            reg[1] = 0x02 | reg[1];
 8005576:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800557a:	f043 0302 	orr.w	r3, r3, #2
 800557e:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 8005582:	e7bb      	b.n	80054fc <_dwt_enableclocks+0x3c>
            reg[1] = reg[1] & 0xfd;
 8005584:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005588:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800558c:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 8005590:	e7b4      	b.n	80054fc <_dwt_enableclocks+0x3c>
            reg[0] = 0x20 | (reg[0] & 0xcf);
 8005592:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8005596:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800559a:	f043 0320 	orr.w	r3, r3, #32
 800559e:	f88d 3004 	strb.w	r3, [sp, #4]
        break;
 80055a2:	e7ab      	b.n	80054fc <_dwt_enableclocks+0x3c>
            reg[0] = 0x01;
 80055a4:	2301      	movs	r3, #1
 80055a6:	f88d 3004 	strb.w	r3, [sp, #4]
            reg[1] = 0x03;
 80055aa:	2303      	movs	r3, #3
 80055ac:	f88d 3005 	strb.w	r3, [sp, #5]
        break;
 80055b0:	e7a4      	b.n	80054fc <_dwt_enableclocks+0x3c>

080055b2 <_dwt_loaducodefromrom>:
{
 80055b2:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_LDE);
 80055b4:	200e      	movs	r0, #14
 80055b6:	f7ff ff83 	bl	80054c0 <_dwt_enableclocks>
    dwt_write16bitoffsetreg(OTP_IF_ID, OTP_CTRL, OTP_CTRL_LDELOAD); // Set load LDE kick bit
 80055ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80055be:	2106      	movs	r1, #6
 80055c0:	202d      	movs	r0, #45	; 0x2d
 80055c2:	f7ff fda4 	bl	800510e <dwt_write16bitoffsetreg>
    deca_sleep(1); // Allow time for code to upload (should take up to 120 us)
 80055c6:	2001      	movs	r0, #1
 80055c8:	f000 f99e 	bl	8005908 <deca_sleep>
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 80055cc:	2001      	movs	r0, #1
 80055ce:	f7ff ff77 	bl	80054c0 <_dwt_enableclocks>
}
 80055d2:	bd08      	pop	{r3, pc}

080055d4 <_dwt_disablesequencing>:
 * output parameters none
 *
 * no return value
 */
void _dwt_disablesequencing(void) // Disable sequencing and go to state "INIT"
{
 80055d4:	b508      	push	{r3, lr}
    _dwt_enableclocks(FORCE_SYS_XTI); // Set system clock to XTI
 80055d6:	2000      	movs	r0, #0
 80055d8:	f7ff ff72 	bl	80054c0 <_dwt_enableclocks>

    dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET, PMSC_CTRL1_PKTSEQ_DISABLE); // Disable PMSC ctrl of RF and RX clk blocks
 80055dc:	2200      	movs	r2, #0
 80055de:	2104      	movs	r1, #4
 80055e0:	2036      	movs	r0, #54	; 0x36
 80055e2:	f7ff fd94 	bl	800510e <dwt_write16bitoffsetreg>
}
 80055e6:	bd08      	pop	{r3, pc}

080055e8 <dwt_setdelayedtrxtime>:
 * output parameters none
 *
 * no return value
 */
void dwt_setdelayedtrxtime(uint32 starttime)
{
 80055e8:	b508      	push	{r3, lr}
    dwt_write32bitoffsetreg(DX_TIME_ID, 1, starttime); // Write at offset 1 as the lower 9 bits of this register are ignored
 80055ea:	4602      	mov	r2, r0
 80055ec:	2101      	movs	r1, #1
 80055ee:	200a      	movs	r0, #10
 80055f0:	f7ff fdac 	bl	800514c <dwt_write32bitoffsetreg>

} // end dwt_setdelayedtrxtime()
 80055f4:	bd08      	pop	{r3, pc}
	...

080055f8 <dwt_starttx>:
 *
 * returns DWT_SUCCESS for success, or DWT_ERROR for error (e.g. a delayed transmission will be cancelled if the delayed time has passed)
 */

int dwt_starttx(uint8 mode)
{
 80055f8:	b508      	push	{r3, lr}
    int retval = DWT_ERROR;
    uint8 temp  = 0x00;
    uint16 checkTxOK = 0 ;

    if(mode & DWT_RESPONSE_EXPECTED)
 80055fa:	f010 0f02 	tst.w	r0, #2
 80055fe:	d016      	beq.n	800562e <dwt_starttx+0x36>
    {
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
        pdw1000local->wait4resp = 1;
 8005600:	4b14      	ldr	r3, [pc, #80]	; (8005654 <dwt_starttx+0x5c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2201      	movs	r2, #1
 8005606:	755a      	strb	r2, [r3, #21]
        temp = (uint8)SYS_CTRL_WAIT4RESP ; // Set wait4response bit
 8005608:	2280      	movs	r2, #128	; 0x80
    }

    if (mode & DWT_START_TX_DELAYED)
 800560a:	f010 0f01 	tst.w	r0, #1
 800560e:	d018      	beq.n	8005642 <dwt_starttx+0x4a>
    {
        // Both SYS_CTRL_TXSTRT and SYS_CTRL_TXDLYS to correctly enable TX
        temp |= (uint8)(SYS_CTRL_TXDLYS | SYS_CTRL_TXSTRT) ;
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8005610:	f042 0206 	orr.w	r2, r2, #6
 8005614:	2100      	movs	r1, #0
 8005616:	200d      	movs	r0, #13
 8005618:	f7ff fd6c 	bl	80050f4 <dwt_write8bitoffsetreg>
        checkTxOK = dwt_read16bitoffsetreg(SYS_STATUS_ID, 3); // Read at offset 3 to get the upper 2 bytes out of 5
 800561c:	2103      	movs	r1, #3
 800561e:	200f      	movs	r0, #15
 8005620:	f7ff fd29 	bl	8005076 <dwt_read16bitoffsetreg>
        if ((checkTxOK & SYS_STATUS_TXERR) == 0) // Transmit Delayed Send set over Half a Period away or Power Up error (there is enough time to send but not to power up individual blocks).
 8005624:	f410 6f81 	tst.w	r0, #1032	; 0x408
 8005628:	d103      	bne.n	8005632 <dwt_starttx+0x3a>
        {
            retval = DWT_SUCCESS ; // All okay
 800562a:	2000      	movs	r0, #0
       // retval = DWT_SUCCESS;
    }

    return retval;

} // end dwt_starttx()
 800562c:	bd08      	pop	{r3, pc}
    uint8 temp  = 0x00;
 800562e:	2200      	movs	r2, #0
 8005630:	e7eb      	b.n	800560a <dwt_starttx+0x12>
            dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, (uint8)SYS_CTRL_TRXOFF);
 8005632:	2240      	movs	r2, #64	; 0x40
 8005634:	2100      	movs	r1, #0
 8005636:	200d      	movs	r0, #13
 8005638:	f7ff fd5c 	bl	80050f4 <dwt_write8bitoffsetreg>
            retval = DWT_ERROR ; // Failed !
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	e7f4      	b.n	800562c <dwt_starttx+0x34>
        dwt_write8bitoffsetreg(SYS_CTRL_ID, SYS_CTRL_OFFSET, temp);
 8005642:	f042 0202 	orr.w	r2, r2, #2
 8005646:	2100      	movs	r1, #0
 8005648:	200d      	movs	r0, #13
 800564a:	f7ff fd53 	bl	80050f4 <dwt_write8bitoffsetreg>
    int retval = DWT_ERROR;
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	e7eb      	b.n	800562c <dwt_starttx+0x34>
 8005654:	2000000c 	.word	0x2000000c

08005658 <dwt_setrxtimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setrxtimeout(uint16 time)
{
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4605      	mov	r5, r0
    uint8 temp ;

    temp = dwt_read8bitoffsetreg(SYS_CFG_ID, 3); // Read at offset 3 to get the upper byte only
 800565c:	2103      	movs	r1, #3
 800565e:	2004      	movs	r0, #4
 8005660:	f7ff fd3a 	bl	80050d8 <dwt_read8bitoffsetreg>
 8005664:	4604      	mov	r4, r0

    if(time > 0)
 8005666:	b965      	cbnz	r5, 8005682 <dwt_setrxtimeout+0x2a>
    }
    else
    {
        temp &= ~((uint8)(SYS_CFG_RXWTOE>>24)); // Shift RXWTOE mask as we read the upper byte only
        // AND in inverted 32bit value (1 bit clear), I know this is in high byte.
        pdw1000local->sysCFGreg &= ~(SYS_CFG_RXWTOE);
 8005668:	4b0f      	ldr	r3, [pc, #60]	; (80056a8 <dwt_setrxtimeout+0x50>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	6913      	ldr	r3, [r2, #16]
 800566e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005672:	6113      	str	r3, [r2, #16]

        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 8005674:	f000 02ef 	and.w	r2, r0, #239	; 0xef
 8005678:	2103      	movs	r1, #3
 800567a:	2004      	movs	r0, #4
 800567c:	f7ff fd3a 	bl	80050f4 <dwt_write8bitoffsetreg>
    }

} // end dwt_setrxtimeout()
 8005680:	bd38      	pop	{r3, r4, r5, pc}
        dwt_write16bitoffsetreg(RX_FWTO_ID, RX_FWTO_OFFSET, time) ;
 8005682:	462a      	mov	r2, r5
 8005684:	2100      	movs	r1, #0
 8005686:	200c      	movs	r0, #12
 8005688:	f7ff fd41 	bl	800510e <dwt_write16bitoffsetreg>
        temp |= (uint8)(SYS_CFG_RXWTOE>>24); // Shift RXWTOE mask as we read the upper byte only
 800568c:	f044 0210 	orr.w	r2, r4, #16
        pdw1000local->sysCFGreg |= SYS_CFG_RXWTOE;
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <dwt_setrxtimeout+0x50>)
 8005692:	6819      	ldr	r1, [r3, #0]
 8005694:	690b      	ldr	r3, [r1, #16]
 8005696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800569a:	610b      	str	r3, [r1, #16]
        dwt_write8bitoffsetreg(SYS_CFG_ID, 3, temp); // Write at offset 3 to write the upper byte only
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	2103      	movs	r1, #3
 80056a0:	2004      	movs	r0, #4
 80056a2:	f7ff fd27 	bl	80050f4 <dwt_write8bitoffsetreg>
 80056a6:	e7eb      	b.n	8005680 <dwt_setrxtimeout+0x28>
 80056a8:	2000000c 	.word	0x2000000c

080056ac <dwt_setpreambledetecttimeout>:
 * output parameters
 *
 * no return value
 */
void dwt_setpreambledetecttimeout(uint16 timeout)
{
 80056ac:	b508      	push	{r3, lr}
    dwt_write16bitoffsetreg(DRX_CONF_ID, DRX_PRETOC_OFFSET, timeout);
 80056ae:	4602      	mov	r2, r0
 80056b0:	2124      	movs	r1, #36	; 0x24
 80056b2:	2027      	movs	r0, #39	; 0x27
 80056b4:	f7ff fd2b 	bl	800510e <dwt_write16bitoffsetreg>
}
 80056b8:	bd08      	pop	{r3, pc}

080056ba <dwt_rxreset>:
 * output parameters
 *
 * no return value
 */
void dwt_rxreset(void)
{
 80056ba:	b508      	push	{r3, lr}
    // Set RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_RX);
 80056bc:	22e0      	movs	r2, #224	; 0xe0
 80056be:	2103      	movs	r1, #3
 80056c0:	2036      	movs	r0, #54	; 0x36
 80056c2:	f7ff fd17 	bl	80050f4 <dwt_write8bitoffsetreg>

    // Clear RX reset
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 80056c6:	22f0      	movs	r2, #240	; 0xf0
 80056c8:	2103      	movs	r1, #3
 80056ca:	2036      	movs	r0, #54	; 0x36
 80056cc:	f7ff fd12 	bl	80050f4 <dwt_write8bitoffsetreg>
}
 80056d0:	bd08      	pop	{r3, pc}
	...

080056d4 <dwt_softreset>:
 * output parameters
 *
 * no return value
 */
void dwt_softreset(void)
{
 80056d4:	b508      	push	{r3, lr}
    _dwt_disablesequencing();
 80056d6:	f7ff ff7d 	bl	80055d4 <_dwt_disablesequencing>

    // Clear any AON auto download bits (as reset will trigger AON download)
    dwt_write16bitoffsetreg(AON_ID, AON_WCFG_OFFSET, 0x00);
 80056da:	2200      	movs	r2, #0
 80056dc:	4611      	mov	r1, r2
 80056de:	202c      	movs	r0, #44	; 0x2c
 80056e0:	f7ff fd15 	bl	800510e <dwt_write16bitoffsetreg>
    // Clear the wake-up configuration
    dwt_write8bitoffsetreg(AON_ID, AON_CFG0_OFFSET, 0x00);
 80056e4:	2200      	movs	r2, #0
 80056e6:	2106      	movs	r1, #6
 80056e8:	202c      	movs	r0, #44	; 0x2c
 80056ea:	f7ff fd03 	bl	80050f4 <dwt_write8bitoffsetreg>
    // Upload the new configuration
    _dwt_aonarrayupload();
 80056ee:	f7ff fd66 	bl	80051be <_dwt_aonarrayupload>

    // Reset HIF, TX, RX and PMSC (set the reset bits)
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_ALL);
 80056f2:	2200      	movs	r2, #0
 80056f4:	2103      	movs	r1, #3
 80056f6:	2036      	movs	r0, #54	; 0x36
 80056f8:	f7ff fcfc 	bl	80050f4 <dwt_write8bitoffsetreg>

    // DW1000 needs a 10us sleep to let clk PLL lock after reset - the PLL will automatically lock after the reset
    // Could also have polled the PLL lock flag, but then the SPI needs to be < 3MHz !! So a simple delay is easier
    deca_sleep(1);
 80056fc:	2001      	movs	r0, #1
 80056fe:	f000 f903 	bl	8005908 <deca_sleep>

    // Clear the reset bits
    dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_SOFTRESET_OFFSET, PMSC_CTRL0_RESET_CLEAR);
 8005702:	22f0      	movs	r2, #240	; 0xf0
 8005704:	2103      	movs	r1, #3
 8005706:	2036      	movs	r0, #54	; 0x36
 8005708:	f7ff fcf4 	bl	80050f4 <dwt_write8bitoffsetreg>

    pdw1000local->wait4resp = 0;
 800570c:	4b02      	ldr	r3, [pc, #8]	; (8005718 <dwt_softreset+0x44>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2200      	movs	r2, #0
 8005712:	755a      	strb	r2, [r3, #21]
}
 8005714:	bd08      	pop	{r3, pc}
 8005716:	bf00      	nop
 8005718:	2000000c 	.word	0x2000000c

0800571c <dwt_setxtaltrim>:
 * output parameters
 *
 * no return value
 */
void dwt_setxtaltrim(uint8 value)
{
 800571c:	b508      	push	{r3, lr}
    // The 3 MSb in this 8-bit register must be kept to 0b011 to avoid any malfunction.
    uint8 reg_val = (3 << 5) | (value & FS_XTALT_MASK);
 800571e:	f000 021f 	and.w	r2, r0, #31
    dwt_write8bitoffsetreg(FS_CTRL_ID, FS_XTALT_OFFSET, reg_val);
 8005722:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005726:	210e      	movs	r1, #14
 8005728:	202b      	movs	r0, #43	; 0x2b
 800572a:	f7ff fce3 	bl	80050f4 <dwt_write8bitoffsetreg>
}
 800572e:	bd08      	pop	{r3, pc}

08005730 <dwt_initialise>:
{
 8005730:	b570      	push	{r4, r5, r6, lr}
 8005732:	4604      	mov	r4, r0
    pdw1000local->dblbuffon = 0; // - set to 0 - meaning double buffer mode is off by default
 8005734:	4b6a      	ldr	r3, [pc, #424]	; (80058e0 <dwt_initialise+0x1b0>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2200      	movs	r2, #0
 800573a:	751a      	strb	r2, [r3, #20]
    pdw1000local->wait4resp = 0; // - set to 0 - meaning wait for response not active
 800573c:	755a      	strb	r2, [r3, #21]
    pdw1000local->sleep_mode = 0; // - set to 0 - meaning sleep mode has not been configured
 800573e:	82da      	strh	r2, [r3, #22]
    pdw1000local->cbTxDone = NULL;
 8005740:	629a      	str	r2, [r3, #40]	; 0x28
    pdw1000local->cbRxOk = NULL;
 8005742:	62da      	str	r2, [r3, #44]	; 0x2c
    pdw1000local->cbRxTo = NULL;
 8005744:	631a      	str	r2, [r3, #48]	; 0x30
    pdw1000local->cbRxErr = NULL;
 8005746:	635a      	str	r2, [r3, #52]	; 0x34
    if (DWT_DEVICE_ID != dwt_readdevid()) // MP IC ONLY (i.e. DW1000) FOR THIS CODE
 8005748:	f7ff fc8f 	bl	800506a <dwt_readdevid>
 800574c:	4b65      	ldr	r3, [pc, #404]	; (80058e4 <dwt_initialise+0x1b4>)
 800574e:	4298      	cmp	r0, r3
 8005750:	f040 80c2 	bne.w	80058d8 <dwt_initialise+0x1a8>
    if(!(DWT_DW_WAKE_UP & config)) // Don't reset the device if DWT_DW_WAKE_UP bit is set, e.g. when calling this API after wake up
 8005754:	f014 0502 	ands.w	r5, r4, #2
 8005758:	d01b      	beq.n	8005792 <dwt_initialise+0x62>
    if(!((DWT_DW_WAKE_UP & config) && ((DWT_READ_OTP_TMP | DWT_READ_OTP_BAT | DWT_READ_OTP_LID | DWT_READ_OTP_PID | DWT_DW_WUP_RD_OTPREV)& config)))
 800575a:	b115      	cbz	r5, 8005762 <dwt_initialise+0x32>
 800575c:	f014 0ff8 	tst.w	r4, #248	; 0xf8
 8005760:	d102      	bne.n	8005768 <dwt_initialise+0x38>
        _dwt_enableclocks(FORCE_SYS_XTI); // NOTE: set system clock to XTI - this is necessary to make sure the values read by _dwt_otpread are reliable
 8005762:	2000      	movs	r0, #0
 8005764:	f7ff feac 	bl	80054c0 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(EXT_SYNC_ID, EC_CTRL_OFFSET, EC_CTRL_PLLLCK);
 8005768:	2204      	movs	r2, #4
 800576a:	2100      	movs	r1, #0
 800576c:	2024      	movs	r0, #36	; 0x24
 800576e:	f7ff fcc1 	bl	80050f4 <dwt_write8bitoffsetreg>
    if(!(DWT_DW_WAKE_UP & config))
 8005772:	b9ed      	cbnz	r5, 80057b0 <dwt_initialise+0x80>
        ldo_tune = _dwt_otpread(LDOTUNE_ADDRESS);
 8005774:	2004      	movs	r0, #4
 8005776:	f7ff fd0d 	bl	8005194 <_dwt_otpread>
        if((ldo_tune & 0xFF) != 0)
 800577a:	b2c0      	uxtb	r0, r0
 800577c:	b960      	cbnz	r0, 8005798 <dwt_initialise+0x68>
    if((!(DWT_DW_WAKE_UP & config)) || ((DWT_DW_WAKE_UP & config) && (DWT_DW_WUP_RD_OTPREV & config)))
 800577e:	b32d      	cbz	r5, 80057cc <dwt_initialise+0x9c>
 8005780:	f004 030a 	and.w	r3, r4, #10
 8005784:	2b0a      	cmp	r3, #10
 8005786:	d021      	beq.n	80057cc <dwt_initialise+0x9c>
        pdw1000local->otprev = 0; // If OTP valuse are not used, if this API is called after DW1000 IC has been woken up
 8005788:	4b55      	ldr	r3, [pc, #340]	; (80058e0 <dwt_initialise+0x1b0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2000      	movs	r0, #0
 800578e:	72d8      	strb	r0, [r3, #11]
 8005790:	e024      	b.n	80057dc <dwt_initialise+0xac>
        dwt_softreset(); // Make sure the device is completely reset before starting initialisation
 8005792:	f7ff ff9f 	bl	80056d4 <dwt_softreset>
 8005796:	e7e0      	b.n	800575a <dwt_initialise+0x2a>
            dwt_write8bitoffsetreg(OTP_IF_ID, OTP_SF, OTP_SF_LDO_KICK); // Set load LDO kick bit
 8005798:	2202      	movs	r2, #2
 800579a:	2112      	movs	r1, #18
 800579c:	202d      	movs	r0, #45	; 0x2d
 800579e:	f7ff fca9 	bl	80050f4 <dwt_write8bitoffsetreg>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO; // LDO tune must be kicked at wake-up
 80057a2:	4b4f      	ldr	r3, [pc, #316]	; (80058e0 <dwt_initialise+0x1b0>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	8ad3      	ldrh	r3, [r2, #22]
 80057a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057ac:	82d3      	strh	r3, [r2, #22]
 80057ae:	e7e6      	b.n	800577e <dwt_initialise+0x4e>
        if(dwt_read32bitoffsetreg(RF_CONF_ID, LDOTUNE) != LDOTUNE_DEFAULT)
 80057b0:	2130      	movs	r1, #48	; 0x30
 80057b2:	2028      	movs	r0, #40	; 0x28
 80057b4:	f7ff fc42 	bl	800503c <dwt_read32bitoffsetreg>
 80057b8:	f1b0 3f88 	cmp.w	r0, #2290649224	; 0x88888888
 80057bc:	d0df      	beq.n	800577e <dwt_initialise+0x4e>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDO;
 80057be:	4b48      	ldr	r3, [pc, #288]	; (80058e0 <dwt_initialise+0x1b0>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	8ad3      	ldrh	r3, [r2, #22]
 80057c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057c8:	82d3      	strh	r3, [r2, #22]
 80057ca:	e7d8      	b.n	800577e <dwt_initialise+0x4e>
        otp_xtaltrim_and_rev = _dwt_otpread(XTRIM_ADDRESS) & 0xffff;        // Read 32 bit value, XTAL trim val is in low octet-0 (5 bits)
 80057cc:	201e      	movs	r0, #30
 80057ce:	f7ff fce1 	bl	8005194 <_dwt_otpread>
 80057d2:	b280      	uxth	r0, r0
        pdw1000local->otprev = (otp_xtaltrim_and_rev >> 8) & 0xff;          // OTP revision is the next byte
 80057d4:	4b42      	ldr	r3, [pc, #264]	; (80058e0 <dwt_initialise+0x1b0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	0a02      	lsrs	r2, r0, #8
 80057da:	72da      	strb	r2, [r3, #11]
    if(!(DWT_DW_WAKE_UP & config))
 80057dc:	b935      	cbnz	r5, 80057ec <dwt_initialise+0xbc>
        if ((otp_xtaltrim_and_rev & 0x1F) == 0) // A value of 0 means that the crystal has not been trimmed
 80057de:	f010 0f1f 	tst.w	r0, #31
 80057e2:	d100      	bne.n	80057e6 <dwt_initialise+0xb6>
            otp_xtaltrim_and_rev = FS_XTALT_MIDRANGE ; // Set to mid-range if no calibration value inside
 80057e4:	2010      	movs	r0, #16
        dwt_setxtaltrim((uint8)otp_xtaltrim_and_rev);
 80057e6:	b2c0      	uxtb	r0, r0
 80057e8:	f7ff ff98 	bl	800571c <dwt_setxtaltrim>
    if(DWT_READ_OTP_PID & config)
 80057ec:	f014 0f10 	tst.w	r4, #16
 80057f0:	d140      	bne.n	8005874 <dwt_initialise+0x144>
        pdw1000local->partID = 0;
 80057f2:	4b3b      	ldr	r3, [pc, #236]	; (80058e0 <dwt_initialise+0x1b0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]
    if(DWT_READ_OTP_LID & config)
 80057fa:	f014 0f20 	tst.w	r4, #32
 80057fe:	d140      	bne.n	8005882 <dwt_initialise+0x152>
        pdw1000local->lotID = 0;
 8005800:	4b37      	ldr	r3, [pc, #220]	; (80058e0 <dwt_initialise+0x1b0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
    if(DWT_READ_OTP_BAT & config)
 8005808:	f014 0f40 	tst.w	r4, #64	; 0x40
 800580c:	d140      	bne.n	8005890 <dwt_initialise+0x160>
        pdw1000local->vBatP = 0;
 800580e:	4b34      	ldr	r3, [pc, #208]	; (80058e0 <dwt_initialise+0x1b0>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2200      	movs	r2, #0
 8005814:	721a      	strb	r2, [r3, #8]
    if(DWT_READ_OTP_TMP & config)
 8005816:	f014 0f80 	tst.w	r4, #128	; 0x80
 800581a:	d140      	bne.n	800589e <dwt_initialise+0x16e>
        pdw1000local->tempP = 0;
 800581c:	4b30      	ldr	r3, [pc, #192]	; (80058e0 <dwt_initialise+0x1b0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2200      	movs	r2, #0
 8005822:	725a      	strb	r2, [r3, #9]
    if(!(DWT_DW_WAKE_UP & config))
 8005824:	2d00      	cmp	r5, #0
 8005826:	d14d      	bne.n	80058c4 <dwt_initialise+0x194>
        if(DWT_LOADUCODE & config)
 8005828:	f014 0f01 	tst.w	r4, #1
 800582c:	d03e      	beq.n	80058ac <dwt_initialise+0x17c>
            _dwt_loaducodefromrom();
 800582e:	f7ff fec0 	bl	80055b2 <_dwt_loaducodefromrom>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE; // microcode must be loaded at wake-up if loaded on initialisation
 8005832:	4b2b      	ldr	r3, [pc, #172]	; (80058e0 <dwt_initialise+0x1b0>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	8ad3      	ldrh	r3, [r2, #22]
 8005838:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800583c:	82d3      	strh	r3, [r2, #22]
    _dwt_enableclocks(ENABLE_ALL_SEQ); // Enable clocks for sequencing
 800583e:	2001      	movs	r0, #1
 8005840:	f7ff fe3e 	bl	80054c0 <_dwt_enableclocks>
    dwt_write8bitoffsetreg(AON_ID, AON_CFG1_OFFSET, 0x00);
 8005844:	2200      	movs	r2, #0
 8005846:	210a      	movs	r1, #10
 8005848:	202c      	movs	r0, #44	; 0x2c
 800584a:	f7ff fc53 	bl	80050f4 <dwt_write8bitoffsetreg>
    pdw1000local->sysCFGreg = dwt_read32bitreg(SYS_CFG_ID) ; // Read sysconfig register
 800584e:	4c24      	ldr	r4, [pc, #144]	; (80058e0 <dwt_initialise+0x1b0>)
 8005850:	6825      	ldr	r5, [r4, #0]
 8005852:	2100      	movs	r1, #0
 8005854:	2004      	movs	r0, #4
 8005856:	f7ff fbf1 	bl	800503c <dwt_read32bitoffsetreg>
 800585a:	6128      	str	r0, [r5, #16]
    pdw1000local->longFrames = (pdw1000local->sysCFGreg & SYS_CFG_PHR_MODE_11) >> SYS_CFG_PHR_MODE_SHFT ; //configure longFrames
 800585c:	6824      	ldr	r4, [r4, #0]
 800585e:	8a63      	ldrh	r3, [r4, #18]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	72a3      	strb	r3, [r4, #10]
    pdw1000local->txFCTRL = dwt_read32bitreg(TX_FCTRL_ID) ;
 8005866:	2100      	movs	r1, #0
 8005868:	2008      	movs	r0, #8
 800586a:	f7ff fbe7 	bl	800503c <dwt_read32bitoffsetreg>
 800586e:	60e0      	str	r0, [r4, #12]
    return DWT_SUCCESS ;
 8005870:	2000      	movs	r0, #0
} // end dwt_initialise()
 8005872:	bd70      	pop	{r4, r5, r6, pc}
        pdw1000local->partID = _dwt_otpread(PARTID_ADDRESS);
 8005874:	4b1a      	ldr	r3, [pc, #104]	; (80058e0 <dwt_initialise+0x1b0>)
 8005876:	681e      	ldr	r6, [r3, #0]
 8005878:	2006      	movs	r0, #6
 800587a:	f7ff fc8b 	bl	8005194 <_dwt_otpread>
 800587e:	6030      	str	r0, [r6, #0]
 8005880:	e7bb      	b.n	80057fa <dwt_initialise+0xca>
        pdw1000local->lotID = _dwt_otpread(LOTID_ADDRESS);
 8005882:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <dwt_initialise+0x1b0>)
 8005884:	681e      	ldr	r6, [r3, #0]
 8005886:	2007      	movs	r0, #7
 8005888:	f7ff fc84 	bl	8005194 <_dwt_otpread>
 800588c:	6070      	str	r0, [r6, #4]
 800588e:	e7bb      	b.n	8005808 <dwt_initialise+0xd8>
        pdw1000local->vBatP = _dwt_otpread(VBAT_ADDRESS) & 0xff;
 8005890:	2008      	movs	r0, #8
 8005892:	f7ff fc7f 	bl	8005194 <_dwt_otpread>
 8005896:	4b12      	ldr	r3, [pc, #72]	; (80058e0 <dwt_initialise+0x1b0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	7218      	strb	r0, [r3, #8]
 800589c:	e7bb      	b.n	8005816 <dwt_initialise+0xe6>
        pdw1000local->tempP = _dwt_otpread(VTEMP_ADDRESS) & 0xff;
 800589e:	2009      	movs	r0, #9
 80058a0:	f7ff fc78 	bl	8005194 <_dwt_otpread>
 80058a4:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <dwt_initialise+0x1b0>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	7258      	strb	r0, [r3, #9]
 80058aa:	e7bb      	b.n	8005824 <dwt_initialise+0xf4>
            uint16 rega = dwt_read16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1) ;
 80058ac:	2105      	movs	r1, #5
 80058ae:	2036      	movs	r0, #54	; 0x36
 80058b0:	f7ff fbe1 	bl	8005076 <dwt_read16bitoffsetreg>
            rega &= 0xFDFF ; // Clear LDERUN bit
 80058b4:	f420 7200 	bic.w	r2, r0, #512	; 0x200
 80058b8:	b292      	uxth	r2, r2
            dwt_write16bitoffsetreg(PMSC_ID, PMSC_CTRL1_OFFSET+1, rega) ;
 80058ba:	2105      	movs	r1, #5
 80058bc:	2036      	movs	r0, #54	; 0x36
 80058be:	f7ff fc26 	bl	800510e <dwt_write16bitoffsetreg>
 80058c2:	e7bc      	b.n	800583e <dwt_initialise+0x10e>
        if((DWT_DW_WUP_NO_UCODE & config) == 0)
 80058c4:	f014 0f04 	tst.w	r4, #4
 80058c8:	d1b9      	bne.n	800583e <dwt_initialise+0x10e>
            pdw1000local->sleep_mode |= AON_WCFG_ONW_LLDE;
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <dwt_initialise+0x1b0>)
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	8ad3      	ldrh	r3, [r2, #22]
 80058d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058d4:	82d3      	strh	r3, [r2, #22]
 80058d6:	e7b2      	b.n	800583e <dwt_initialise+0x10e>
        return DWT_ERROR ;
 80058d8:	f04f 30ff 	mov.w	r0, #4294967295
 80058dc:	e7c9      	b.n	8005872 <dwt_initialise+0x142>
 80058de:	bf00      	nop
 80058e0:	2000000c 	.word	0x2000000c
 80058e4:	deca0130 	.word	0xdeca0130

080058e8 <decamutexon>:
 * output parameters
 *
 * returns the state of the DW1000 interrupt
 */
decaIrqStatus_t decamutexon(void)           
{
 80058e8:	b510      	push	{r4, lr}
	decaIrqStatus_t s = port_GetEXT_IRQStatus();
 80058ea:	f000 f9a7 	bl	8005c3c <port_GetEXT_IRQStatus>

	if(s) {
 80058ee:	4604      	mov	r4, r0
 80058f0:	b908      	cbnz	r0, 80058f6 <decamutexon+0xe>
		port_DisableEXT_IRQ(); //disable the external interrupt line
	}
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
}
 80058f2:	4620      	mov	r0, r4
 80058f4:	bd10      	pop	{r4, pc}
		port_DisableEXT_IRQ(); //disable the external interrupt line
 80058f6:	f000 f993 	bl	8005c20 <port_DisableEXT_IRQ>
	return s ;   // return state before disable, value is used to re-enable in decamutexoff call
 80058fa:	e7fa      	b.n	80058f2 <decamutexon+0xa>

080058fc <decamutexoff>:
 *
 * returns the state of the DW1000 interrupt
 */
void decamutexoff(decaIrqStatus_t s)        // put a function here that re-enables the interrupt at the end of the critical section
{
	if(s) { //need to check the port state as we can't use level sensitive interrupt on the STM ARM
 80058fc:	b900      	cbnz	r0, 8005900 <decamutexoff+0x4>
 80058fe:	4770      	bx	lr
{
 8005900:	b508      	push	{r3, lr}
		port_EnableEXT_IRQ();
 8005902:	f000 f994 	bl	8005c2e <port_EnableEXT_IRQ>
	}
}
 8005906:	bd08      	pop	{r3, pc}

08005908 <deca_sleep>:
#include "sleep.h"
#include "port.h"

/* Wrapper function to be used by decadriver. Declared in deca_device_api.h */
__INLINE void deca_sleep(unsigned int time_ms)
{
 8005908:	b508      	push	{r3, lr}
	Sleep(time_ms);
 800590a:	f000 f8c0 	bl	8005a8e <Sleep>
}
 800590e:	bd08      	pop	{r3, pc}

08005910 <writetospi>:
#pragma GCC optimize ("O3")
int writetospi(uint16_t headerLength,
               const    uint8_t *headerBuffer,
               uint32_t bodyLength,
               const    uint8_t *bodyBuffer)
{
 8005910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	4682      	mov	sl, r0
 8005916:	4689      	mov	r9, r1
 8005918:	4690      	mov	r8, r2
 800591a:	461f      	mov	r7, r3
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 800591c:	f7ff ffe4 	bl	80058e8 <decamutexon>
 8005920:	4606      	mov	r6, r0

    while (HAL_SPI_GetState(&dwhspi) != HAL_SPI_STATE_READY);
 8005922:	4d14      	ldr	r5, [pc, #80]	; (8005974 <writetospi+0x64>)
 8005924:	4628      	mov	r0, r5
 8005926:	f7fd fa63 	bl	8002df0 <HAL_SPI_GetState>
 800592a:	2801      	cmp	r0, #1
 800592c:	4604      	mov	r4, r0
 800592e:	d1f9      	bne.n	8005924 <writetospi+0x14>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 8005930:	2200      	movs	r2, #0
 8005932:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005936:	4810      	ldr	r0, [pc, #64]	; (8005978 <writetospi+0x68>)
 8005938:	f7fa ff5f 	bl	80007fa <HAL_GPIO_WritePin>

    HAL_SPI_Transmit(&dwhspi, (uint8_t *)&headerBuffer[0], headerLength, HAL_MAX_DELAY);    /* Send header in polling mode */
 800593c:	4652      	mov	r2, sl
 800593e:	4649      	mov	r1, r9
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	480b      	ldr	r0, [pc, #44]	; (8005974 <writetospi+0x64>)
 8005946:	f7fd f900 	bl	8002b4a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&dwhspi, (uint8_t *)&bodyBuffer[0], bodyLength, HAL_MAX_DELAY);        /* Send data in polling mode */
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
 800594e:	fa1f f288 	uxth.w	r2, r8
 8005952:	4639      	mov	r1, r7
 8005954:	4807      	ldr	r0, [pc, #28]	; (8005974 <writetospi+0x64>)
 8005956:	f7fd f8f8 	bl	8002b4a <HAL_SPI_Transmit>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 800595a:	4622      	mov	r2, r4
 800595c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005960:	4805      	ldr	r0, [pc, #20]	; (8005978 <writetospi+0x68>)
 8005962:	f7fa ff4a 	bl	80007fa <HAL_GPIO_WritePin>

    decamutexoff(stat);
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff ffc8 	bl	80058fc <decamutexoff>

    return 0;
} // end writetospi()
 800596c:	2000      	movs	r0, #0
 800596e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005972:	bf00      	nop
 8005974:	200002f0 	.word	0x200002f0
 8005978:	40010800 	.word	0x40010800

0800597c <readfromspi>:
#pragma GCC optimize ("O3")
int readfromspi(uint16_t headerLength,
                const uint8_t *headerBuffer,
                uint32_t readlength,
                uint8_t *readBuffer)
{
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	4680      	mov	r8, r0
 8005982:	460c      	mov	r4, r1
 8005984:	4617      	mov	r7, r2
 8005986:	461d      	mov	r5, r3
    int i;
    decaIrqStatus_t  stat ;
    stat = decamutexon() ;
 8005988:	f7ff ffae 	bl	80058e8 <decamutexon>
 800598c:	4606      	mov	r6, r0

    /* Blocking: Check whether previous transfer has been finished */
    while (HAL_SPI_GetState(&dwhspi) != HAL_SPI_STATE_READY);
 800598e:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005a08 <readfromspi+0x8c>
 8005992:	4648      	mov	r0, r9
 8005994:	f7fd fa2c 	bl	8002df0 <HAL_SPI_GetState>
 8005998:	2801      	cmp	r0, #1
 800599a:	d1fa      	bne.n	8005992 <readfromspi+0x16>

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_RESET); /**< Put chip select line low */
 800599c:	2200      	movs	r2, #0
 800599e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059a2:	4818      	ldr	r0, [pc, #96]	; (8005a04 <readfromspi+0x88>)
 80059a4:	f7fa ff29 	bl	80007fa <HAL_GPIO_WritePin>

    /* Send header */
    for(i=0; i<headerLength; i++)
 80059a8:	f1b8 0f00 	cmp.w	r8, #0
 80059ac:	d00c      	beq.n	80059c8 <readfromspi+0x4c>
    {
        HAL_SPI_Transmit(&dwhspi, &headerBuffer[i], 1, HAL_MAX_DELAY); //No timeout
 80059ae:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8005a08 <readfromspi+0x8c>
 80059b2:	44a0      	add	r8, r4
 80059b4:	2201      	movs	r2, #1
 80059b6:	4621      	mov	r1, r4
 80059b8:	f04f 33ff 	mov.w	r3, #4294967295
 80059bc:	4414      	add	r4, r2
 80059be:	4648      	mov	r0, r9
 80059c0:	f7fd f8c3 	bl	8002b4a <HAL_SPI_Transmit>
    for(i=0; i<headerLength; i++)
 80059c4:	4544      	cmp	r4, r8
 80059c6:	d1f5      	bne.n	80059b4 <readfromspi+0x38>
    }

    /* for the data buffer use LL functions directly as the HAL SPI read function
     * has issue reading single bytes */
    while(readlength-- > 0)
 80059c8:	b17f      	cbz	r7, 80059ea <readfromspi+0x6e>
        /* Wait until TXE flag is set to send data */
        while(__HAL_SPI_GET_FLAG(&dwhspi, SPI_FLAG_TXE) == RESET)
        {
        }

        dwhspi.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80059ca:	2400      	movs	r4, #0
 80059cc:	480e      	ldr	r0, [pc, #56]	; (8005a08 <readfromspi+0x8c>)
 80059ce:	19e9      	adds	r1, r5, r7
        while(__HAL_SPI_GET_FLAG(&dwhspi, SPI_FLAG_TXE) == RESET)
 80059d0:	6803      	ldr	r3, [r0, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	0797      	lsls	r7, r2, #30
 80059d6:	d5fc      	bpl.n	80059d2 <readfromspi+0x56>
        dwhspi.Instance->DR = 0; /* set output to 0 (MOSI), this is necessary for
 80059d8:	60dc      	str	r4, [r3, #12]
        e.g. when waking up DW1000 from DEEPSLEEP via dwt_spicswakeup() function.
        */

        /* Wait until RXNE flag is set to read data */
        while(__HAL_SPI_GET_FLAG(&dwhspi, SPI_FLAG_RXNE) == RESET)
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	07d2      	lsls	r2, r2, #31
 80059de:	d5fc      	bpl.n	80059da <readfromspi+0x5e>
        {
        }

        (*readBuffer++) = dwhspi.Instance->DR;  //copy data read form (MISO)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f805 3b01 	strb.w	r3, [r5], #1
    while(readlength-- > 0)
 80059e6:	428d      	cmp	r5, r1
 80059e8:	d1f2      	bne.n	80059d0 <readfromspi+0x54>
    }

    HAL_GPIO_WritePin(DW_NSS_GPIO_Port, DW_NSS_Pin, GPIO_PIN_SET); /**< Put chip select line high */
 80059ea:	2201      	movs	r2, #1
 80059ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059f0:	4804      	ldr	r0, [pc, #16]	; (8005a04 <readfromspi+0x88>)
 80059f2:	f7fa ff02 	bl	80007fa <HAL_GPIO_WritePin>

    decamutexoff(stat);
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7ff ff80 	bl	80058fc <decamutexoff>

    return 0;
} // end readfromspi()
 80059fc:	2000      	movs	r0, #0
 80059fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a02:	bf00      	nop
 8005a04:	40010800 	.word	0x40010800
 8005a08:	200002f0 	.word	0x200002f0

08005a0c <NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005a0c:	f000 021f 	and.w	r2, r0, #31
 8005a10:	0940      	lsrs	r0, r0, #5
 8005a12:	2301      	movs	r3, #1
 8005a14:	4093      	lsls	r3, r2
 8005a16:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <NVIC_EnableIRQ+0x14>)
 8005a18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	e000e100 	.word	0xe000e100

08005a24 <NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005a24:	f000 021f 	and.w	r2, r0, #31
 8005a28:	0940      	lsrs	r0, r0, #5
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	4093      	lsls	r3, r2
 8005a2e:	3020      	adds	r0, #32
 8005a30:	4a01      	ldr	r2, [pc, #4]	; (8005a38 <NVIC_DisableIRQ+0x14>)
 8005a32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8005a36:	4770      	bx	lr
 8005a38:	e000e100 	.word	0xe000e100

08005a3c <usleep>:
/* @fn    usleep
 * @brief precise usleep() delay
 * */
#pragma GCC optimize ("O0")
int usleep(useconds_t usec)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
    int i,j;
#pragma GCC ivdep
    for(i=0;i<usec;i++)
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e012      	b.n	8005a70 <usleep+0x34>
    {
#pragma GCC ivdep
        for(j=0;j<2;j++)
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	e004      	b.n	8005a5a <usleep+0x1e>
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	3301      	adds	r3, #1
 8005a58:	60bb      	str	r3, [r7, #8]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	bfd4      	ite	le
 8005a60:	2301      	movle	r3, #1
 8005a62:	2300      	movgt	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1f2      	bne.n	8005a50 <usleep+0x14>
    for(i=0;i<usec;i++)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	bf8c      	ite	hi
 8005a78:	2301      	movhi	r3, #1
 8005a7a:	2300      	movls	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e3      	bne.n	8005a4a <usleep+0xe>
        {
            __NOP();
            __NOP();
        }
    }
    return 0;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr

08005a8e <Sleep>:
/* @fn    Sleep
 * @brief Sleep delay in ms using SysTick timer
 * */
__INLINE void
Sleep(uint32_t x)
{
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b082      	sub	sp, #8
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    HAL_Delay(x);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fa fba0 	bl	80001dc <HAL_Delay>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <EXTI_GetITEnStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The "enable" state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITEnStatus(uint32_t x)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
    return ((NVIC->ISER[(((uint32_t)x) >> 5UL)] &\
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <EXTI_GetITEnStatus+0x34>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            (uint32_t)(1UL << (((uint32_t)x) & 0x1FUL)) ) == (uint32_t)RESET)?(RESET):(SET);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f003 031f 	and.w	r3, r3, #31
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bf14      	ite	ne
 8005ac8:	2301      	movne	r3, #1
 8005aca:	2300      	moveq	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	e000e100 	.word	0xe000e100

08005adc <reset_DW1000>:
 *          In general it is output, but it also can be used to reset the digital
 *          part of DW1000 by driving this pin low.
 *          Note, the DW_RESET pin should not be driven high externally.
 * */
void reset_DW1000(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef    GPIO_InitStruct;

    // Enable GPIO used for DW1000 reset as open collector output
    GPIO_InitStruct.Pin = DW_RESET_Pin;
 8005ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ae6:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005ae8:	2311      	movs	r3, #17
 8005aea:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aec:	2302      	movs	r3, #2
 8005aee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8005af0:	463b      	mov	r3, r7
 8005af2:	4619      	mov	r1, r3
 8005af4:	480a      	ldr	r0, [pc, #40]	; (8005b20 <reset_DW1000+0x44>)
 8005af6:	f7fa fd8f 	bl	8000618 <HAL_GPIO_Init>

    //drive the RSTn pin low
    HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_RESET);
 8005afa:	2200      	movs	r2, #0
 8005afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b00:	4807      	ldr	r0, [pc, #28]	; (8005b20 <reset_DW1000+0x44>)
 8005b02:	f7fa fe7a 	bl	80007fa <HAL_GPIO_WritePin>

    usleep(1);
 8005b06:	2001      	movs	r0, #1
 8005b08:	f7ff ff98 	bl	8005a3c <usleep>

    //put the pin back to output open-drain (not active)
    //TODO obczaj przerwania IRQ
    setup_DW1000RSTnIRQ(0);
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	f000 f809 	bl	8005b24 <setup_DW1000RSTnIRQ>



    Sleep(2);
 8005b12:	2002      	movs	r0, #2
 8005b14:	f7ff ffbb 	bl	8005a8e <Sleep>
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40010800 	.word	0x40010800

08005b24 <setup_DW1000RSTnIRQ>:
 * @brief   setup the DW_RESET pin mode
 *          0 - output Open collector mode
 *          !0 - input mode with connected EXTI0 IRQ
 * */
void setup_DW1000RSTnIRQ(int enable)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct;

    if(enable)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d015      	beq.n	8005b5e <setup_DW1000RSTnIRQ+0x3a>
    {
        // Enable GPIO used as DECA RESET for interrupt
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8005b32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b36:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b38:	4b17      	ldr	r3, [pc, #92]	; (8005b98 <setup_DW1000RSTnIRQ+0x74>)
 8005b3a:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8005b40:	f107 0308 	add.w	r3, r7, #8
 8005b44:	4619      	mov	r1, r3
 8005b46:	4815      	ldr	r0, [pc, #84]	; (8005b9c <setup_DW1000RSTnIRQ+0x78>)
 8005b48:	f7fa fd66 	bl	8000618 <HAL_GPIO_Init>

        HAL_NVIC_EnableIRQ(EXTI0_IRQn);     //pin #0 -> EXTI #0
 8005b4c:	2006      	movs	r0, #6
 8005b4e:	f7fa fce9 	bl	8000524 <HAL_NVIC_EnableIRQ>
        HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8005b52:	2200      	movs	r2, #0
 8005b54:	2105      	movs	r1, #5
 8005b56:	2006      	movs	r0, #6
 8005b58:	f7fa fcb0 	bl	80004bc <HAL_NVIC_SetPriority>
        GPIO_InitStruct.Pull = GPIO_NOPULL;
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
    }
}
 8005b5c:	e017      	b.n	8005b8e <setup_DW1000RSTnIRQ+0x6a>
        HAL_NVIC_DisableIRQ(EXTI0_IRQn);    //pin #0 -> EXTI #0
 8005b5e:	2006      	movs	r0, #6
 8005b60:	f7fa fcec 	bl	800053c <HAL_NVIC_DisableIRQ>
        GPIO_InitStruct.Pin = DW_RESET_Pin;
 8005b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b68:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005b6a:	2311      	movs	r3, #17
 8005b6c:	60fb      	str	r3, [r7, #12]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005b72:	2303      	movs	r3, #3
 8005b74:	617b      	str	r3, [r7, #20]
        HAL_GPIO_Init(DW_RESET_GPIO_Port, &GPIO_InitStruct);
 8005b76:	f107 0308 	add.w	r3, r7, #8
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4807      	ldr	r0, [pc, #28]	; (8005b9c <setup_DW1000RSTnIRQ+0x78>)
 8005b7e:	f7fa fd4b 	bl	8000618 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(DW_RESET_GPIO_Port, DW_RESET_Pin, GPIO_PIN_SET);
 8005b82:	2201      	movs	r2, #1
 8005b84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b88:	4804      	ldr	r0, [pc, #16]	; (8005b9c <setup_DW1000RSTnIRQ+0x78>)
 8005b8a:	f7fa fe36 	bl	80007fa <HAL_GPIO_WritePin>
}
 8005b8e:	bf00      	nop
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	10110000 	.word	0x10110000
 8005b9c:	40010800 	.word	0x40010800

08005ba0 <port_set_dw1000_slowrate>:
 * @brief   set 2.25MHz
 *          note: hspi1 is clocked from 72MHz
 *          //MG: NIE MOJE
 * */
void port_set_dw1000_slowrate(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
    dwhspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8005ba4:	4b03      	ldr	r3, [pc, #12]	; (8005bb4 <port_set_dw1000_slowrate+0x14>)
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&dwhspi);
 8005baa:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <port_set_dw1000_slowrate+0x14>)
 8005bac:	f7fd f923 	bl	8002df6 <HAL_SPI_Init>
}
 8005bb0:	bf00      	nop
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	200002f0 	.word	0x200002f0

08005bb8 <port_set_dw1000_fastrate>:
/* @fn      port_set_dw1000_fastrate
 * @brief   set 18MHz
 *          note: hspi1 is clocked from 72MHz
 * */
void port_set_dw1000_fastrate(void)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	af00      	add	r7, sp, #0
    dwhspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <port_set_dw1000_fastrate+0x14>)
 8005bbe:	2208      	movs	r2, #8
 8005bc0:	61da      	str	r2, [r3, #28]
    HAL_SPI_Init(&dwhspi);
 8005bc2:	4802      	ldr	r0, [pc, #8]	; (8005bcc <port_set_dw1000_fastrate+0x14>)
 8005bc4:	f7fd f917 	bl	8002df6 <HAL_SPI_Init>
}
 8005bc8:	bf00      	nop
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	200002f0 	.word	0x200002f0

08005bd0 <HAL_GPIO_EXTI_Callback>:
/* @fn      HAL_GPIO_EXTI_Callback
 * @brief   IRQ HAL call-back for all EXTI configured lines
 *          i.e. DW_RESET_Pin and DW_IRQn_Pin
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == DW_RESET_Pin)
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be0:	d103      	bne.n	8005bea <HAL_GPIO_EXTI_Callback+0x1a>
    {
        signalResetDone = 1;
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_GPIO_EXTI_Callback+0x2c>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	601a      	str	r2, [r3, #0]
        process_deca_irq();
    }
    else
    {
    }
}
 8005be8:	e004      	b.n	8005bf4 <HAL_GPIO_EXTI_Callback+0x24>
    else if (GPIO_Pin == DW_IRQn_Pin)
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_GPIO_EXTI_Callback+0x24>
        process_deca_irq();
 8005bf0:	f000 f806 	bl	8005c00 <process_deca_irq>
}
 8005bf4:	bf00      	nop
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200002ac 	.word	0x200002ac

08005c00 <process_deca_irq>:
 * @brief   main call-back for processing of DW1000 IRQ
 *          it re-enters the IRQ routing and processes all events.
 *          After processing of all events, DW1000 will clear the IRQ line.
 * */
__INLINE void process_deca_irq(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
    while(port_CheckEXT_IRQ() != 0)
 8005c04:	e002      	b.n	8005c0c <process_deca_irq+0xc>
    {

        port_deca_isr();
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <process_deca_irq+0x1c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4798      	blx	r3
    while(port_CheckEXT_IRQ() != 0)
 8005c0c:	f000 f81e 	bl	8005c4c <port_CheckEXT_IRQ>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f7      	bne.n	8005c06 <process_deca_irq+0x6>

    } //while DW1000 IRQ line active
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200002a8 	.word	0x200002a8

08005c20 <port_DisableEXT_IRQ>:
/* @fn      port_DisableEXT_IRQ
 * @brief   wrapper to disable DW_IRQ pin IRQ
 *          in current implementation it disables all IRQ from lines 5:9
 * */
__INLINE void port_DisableEXT_IRQ(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
    NVIC_DisableIRQ(DECAIRQ_EXTI_IRQn);
 8005c24:	2017      	movs	r0, #23
 8005c26:	f7ff fefd 	bl	8005a24 <NVIC_DisableIRQ>
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <port_EnableEXT_IRQ>:
/* @fn      port_EnableEXT_IRQ
 * @brief   wrapper to enable DW_IRQ pin IRQ
 *          in current implementation it enables all IRQ from lines 5:9
 * */
__INLINE void port_EnableEXT_IRQ(void)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	af00      	add	r7, sp, #0
    NVIC_EnableIRQ(DECAIRQ_EXTI_IRQn);
 8005c32:	2017      	movs	r0, #23
 8005c34:	f7ff feea 	bl	8005a0c <NVIC_EnableIRQ>
}
 8005c38:	bf00      	nop
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <port_GetEXT_IRQStatus>:

/* @fn      port_GetEXT_IRQStatus
 * @brief   wrapper to read a DW_IRQ pin IRQ status
 * */
__INLINE uint32_t port_GetEXT_IRQStatus(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
    return EXTI_GetITEnStatus(DECAIRQ_EXTI_IRQn);
 8005c40:	2017      	movs	r0, #23
 8005c42:	f7ff ff2f 	bl	8005aa4 <EXTI_GetITEnStatus>
 8005c46:	4603      	mov	r3, r0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <port_CheckEXT_IRQ>:

/* @fn      port_CheckEXT_IRQ
 * @brief   wrapper to read DW_IRQ input pin state
 * */
__INLINE uint32_t port_CheckEXT_IRQ(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(DECAIRQ_GPIO, DW_IRQn_Pin);
 8005c50:	2101      	movs	r1, #1
 8005c52:	4803      	ldr	r0, [pc, #12]	; (8005c60 <port_CheckEXT_IRQ+0x14>)
 8005c54:	f7fa fdca 	bl	80007ec <HAL_GPIO_ReadPin>
 8005c58:	4603      	mov	r3, r0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40010c00 	.word	0x40010c00

08005c64 <final_msg_set_ts>:
 * @return none
 */
static void final_msg_set_ts(uint8 *ts_field, uint64 ts)
{
    int i;
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8005c64:	2100      	movs	r1, #0
 8005c66:	e005      	b.n	8005c74 <final_msg_set_ts+0x10>
    {
        ts_field[i] = (uint8) ts;
 8005c68:	5442      	strb	r2, [r0, r1]
        ts >>= 8;
 8005c6a:	0a12      	lsrs	r2, r2, #8
 8005c6c:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8005c70:	0a1b      	lsrs	r3, r3, #8
    for (i = 0; i < FINAL_MSG_TS_LEN; i++)
 8005c72:	3101      	adds	r1, #1
 8005c74:	2903      	cmp	r1, #3
 8005c76:	ddf7      	ble.n	8005c68 <final_msg_set_ts+0x4>
    }
}
 8005c78:	4770      	bx	lr

08005c7a <get_tx_timestamp_u64>:
{
 8005c7a:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8005c7e:	b083      	sub	sp, #12
    dwt_readtxtimestamp(ts_tab);
 8005c80:	4668      	mov	r0, sp
 8005c82:	f7ff f9cb 	bl	800501c <dwt_readtxtimestamp>
    for (i = 4; i >= 0; i--)
 8005c86:	2404      	movs	r4, #4
    uint64 ts = 0;
 8005c88:	f04f 0b00 	mov.w	fp, #0
 8005c8c:	f04f 0c00 	mov.w	ip, #0
    for (i = 4; i >= 0; i--)
 8005c90:	e00f      	b.n	8005cb2 <get_tx_timestamp_u64+0x38>
        ts <<= 8;
 8005c92:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8005c96:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8005c9a:	ea4f 220b 	mov.w	r2, fp, lsl #8
        ts |= ts_tab[i];
 8005c9e:	a902      	add	r1, sp, #8
 8005ca0:	4421      	add	r1, r4
 8005ca2:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	ea40 0b02 	orr.w	fp, r0, r2
 8005cac:	ea41 0c03 	orr.w	ip, r1, r3
    for (i = 4; i >= 0; i--)
 8005cb0:	3c01      	subs	r4, #1
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	daed      	bge.n	8005c92 <get_tx_timestamp_u64+0x18>
}
 8005cb6:	4658      	mov	r0, fp
 8005cb8:	4661      	mov	r1, ip
 8005cba:	b003      	add	sp, #12
 8005cbc:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}

08005cc0 <get_rx_timestamp_u64>:
{
 8005cc0:	e92d 4810 	stmdb	sp!, {r4, fp, lr}
 8005cc4:	b083      	sub	sp, #12
    dwt_readrxtimestamp(ts_tab);
 8005cc6:	4668      	mov	r0, sp
 8005cc8:	f7ff f9b0 	bl	800502c <dwt_readrxtimestamp>
    for (i = 4; i >= 0; i--)
 8005ccc:	2404      	movs	r4, #4
    uint64 ts = 0;
 8005cce:	f04f 0b00 	mov.w	fp, #0
 8005cd2:	f04f 0c00 	mov.w	ip, #0
    for (i = 4; i >= 0; i--)
 8005cd6:	e00f      	b.n	8005cf8 <get_rx_timestamp_u64+0x38>
        ts <<= 8;
 8005cd8:	ea4f 230c 	mov.w	r3, ip, lsl #8
 8005cdc:	ea43 631b 	orr.w	r3, r3, fp, lsr #24
 8005ce0:	ea4f 220b 	mov.w	r2, fp, lsl #8
        ts |= ts_tab[i];
 8005ce4:	a902      	add	r1, sp, #8
 8005ce6:	4421      	add	r1, r4
 8005ce8:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8005cec:	2100      	movs	r1, #0
 8005cee:	ea40 0b02 	orr.w	fp, r0, r2
 8005cf2:	ea41 0c03 	orr.w	ip, r1, r3
    for (i = 4; i >= 0; i--)
 8005cf6:	3c01      	subs	r4, #1
 8005cf8:	2c00      	cmp	r4, #0
 8005cfa:	daed      	bge.n	8005cd8 <get_rx_timestamp_u64+0x18>
}
 8005cfc:	4658      	mov	r0, fp
 8005cfe:	4661      	mov	r1, ip
 8005d00:	b003      	add	sp, #12
 8005d02:	e8bd 8810 	ldmia.w	sp!, {r4, fp, pc}
	...

08005d08 <UWB_Anchor_Init>:


void UWB_Anchor_Init()
{
 8005d08:	b508      	push	{r3, lr}
	  reset_DW1000(); /* Target specific drive of RSTn line into DW1000 low for a period. */
 8005d0a:	f7ff fee7 	bl	8005adc <reset_DW1000>
	    port_set_dw1000_slowrate();
 8005d0e:	f7ff ff47 	bl	8005ba0 <port_set_dw1000_slowrate>
	    if (dwt_initialise(DWT_LOADUCODE) == DWT_ERROR)
 8005d12:	2001      	movs	r0, #1
 8005d14:	f7ff fd0c 	bl	8005730 <dwt_initialise>
 8005d18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005d1c:	d100      	bne.n	8005d20 <UWB_Anchor_Init+0x18>
 8005d1e:	e7fe      	b.n	8005d1e <UWB_Anchor_Init+0x16>
	    {

	        while (1)
	        { };
	    }
	    port_set_dw1000_fastrate();
 8005d20:	f7ff ff4a 	bl	8005bb8 <port_set_dw1000_fastrate>

	    dwt_setleds(DWT_LEDS_ENABLE);
 8005d24:	2001      	movs	r0, #1
 8005d26:	f7ff fb8f 	bl	8005448 <dwt_setleds>
	    /* Configure DW1000. See NOTE 7 below. */
	    dwt_configure(&config);
 8005d2a:	480b      	ldr	r0, [pc, #44]	; (8005d58 <UWB_Anchor_Init+0x50>)
 8005d2c:	f7ff fa6c 	bl	8005208 <dwt_configure>

	    /* Apply default antenna delay value. See NOTE 1 below. */
	    dwt_setrxantennadelay(RX_ANT_DLY);
 8005d30:	f244 0060 	movw	r0, #16480	; 0x4060
 8005d34:	f7ff f9fb 	bl	800512e <dwt_setrxantennadelay>
	    dwt_settxantennadelay(TX_ANT_DLY);
 8005d38:	f244 0060 	movw	r0, #16480	; 0x4060
 8005d3c:	f7ff f9ff 	bl	800513e <dwt_settxantennadelay>

	    /* Set expected response's delay and timeout. See NOTE 4, 5 and 6 below.
	     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
	    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
 8005d40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005d44:	f7ff fb70 	bl	8005428 <dwt_setrxaftertxdelay>
	    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);
 8005d48:	f640 20be 	movw	r0, #2750	; 0xabe
 8005d4c:	f7ff fc84 	bl	8005658 <dwt_setrxtimeout>
	    dwt_setpreambledetecttimeout(PRE_TIMEOUT);
 8005d50:	2008      	movs	r0, #8
 8005d52:	f7ff fcab 	bl	80056ac <dwt_setpreambledetecttimeout>
}
 8005d56:	bd08      	pop	{r3, pc}
 8005d58:	20000010 	.word	0x20000010

08005d5c <UWB_Anchor_Get_Distance>:

void UWB_Anchor_Get_Distance(uwb_data_t *dataPtr, uint8_t anchor)
{
 8005d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d60:	b085      	sub	sp, #20
 8005d62:	4604      	mov	r4, r0

    uint8_t tx_selected_poll[sizeof(tx_poll_msg)];

    switch(anchor)
 8005d64:	3901      	subs	r1, #1
 8005d66:	2903      	cmp	r1, #3
 8005d68:	d809      	bhi.n	8005d7e <UWB_Anchor_Get_Distance+0x22>
 8005d6a:	e8df f001 	tbb	[pc, r1]
 8005d6e:	1a02      	.short	0x1a02
 8005d70:	2821      	.short	0x2821
    {
		case 1:
		{
			memcpy(tx_selected_poll, tx_poll_msg_1, sizeof(tx_poll_msg_1));
 8005d72:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <UWB_Anchor_Get_Distance+0x1d4>)
 8005d74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005d78:	ab04      	add	r3, sp, #16
 8005d7a:	e903 0007 	stmdb	r3, {r0, r1, r2}
		default:
		{
			break;
		}
    }
    tx_selected_poll[ALL_MSG_SN_IDX] = frame_seq_nb;
 8005d7e:	4b6d      	ldr	r3, [pc, #436]	; (8005f34 <UWB_Anchor_Get_Distance+0x1d8>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	f88d 3006 	strb.w	r3, [sp, #6]
    dwt_writetxdata(sizeof(tx_selected_poll), tx_selected_poll, 0); /* Zero offset in TX buffer. */
 8005d86:	2200      	movs	r2, #0
 8005d88:	a901      	add	r1, sp, #4
 8005d8a:	200c      	movs	r0, #12
 8005d8c:	f7ff f90c 	bl	8004fa8 <dwt_writetxdata>
    dwt_writetxfctrl(sizeof(tx_selected_poll), 0, 1); /* Zero offset in TX buffer, ranging. */
 8005d90:	2201      	movs	r2, #1
 8005d92:	2100      	movs	r1, #0
 8005d94:	200c      	movs	r0, #12
 8005d96:	f7ff f9ed 	bl	8005174 <dwt_writetxfctrl>
    //dwt_writetxdata(sizeof(tx_poll_msg), tx_poll_msg, 0); /* Zero offset in TX buffer. */
    //dwt_writetxfctrl(sizeof(tx_poll_msg), 0, 1); /* Zero offset in TX buffer, ranging. */

    /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
     * set by dwt_setrxaftertxdelay() has elapsed. */
    dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);
 8005d9a:	2002      	movs	r0, #2
 8005d9c:	f7ff fc2c 	bl	80055f8 <dwt_starttx>

    /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 9 below. */
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8005da0:	e016      	b.n	8005dd0 <UWB_Anchor_Get_Distance+0x74>
			memcpy(tx_selected_poll, tx_poll_msg_2, sizeof(tx_poll_msg_2));
 8005da2:	4b65      	ldr	r3, [pc, #404]	; (8005f38 <UWB_Anchor_Get_Distance+0x1dc>)
 8005da4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005da8:	ab04      	add	r3, sp, #16
 8005daa:	e903 0007 	stmdb	r3, {r0, r1, r2}
			break;
 8005dae:	e7e6      	b.n	8005d7e <UWB_Anchor_Get_Distance+0x22>
			memcpy(tx_selected_poll, tx_poll_msg_3, sizeof(tx_poll_msg_3));
 8005db0:	4b62      	ldr	r3, [pc, #392]	; (8005f3c <UWB_Anchor_Get_Distance+0x1e0>)
 8005db2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005db6:	ab04      	add	r3, sp, #16
 8005db8:	e903 0007 	stmdb	r3, {r0, r1, r2}
			break;
 8005dbc:	e7df      	b.n	8005d7e <UWB_Anchor_Get_Distance+0x22>
			memcpy(tx_selected_poll, tx_poll_msg_4, sizeof(tx_poll_msg_4));
 8005dbe:	4b60      	ldr	r3, [pc, #384]	; (8005f40 <UWB_Anchor_Get_Distance+0x1e4>)
 8005dc0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005dc4:	ab04      	add	r3, sp, #16
 8005dc6:	e903 0007 	stmdb	r3, {r0, r1, r2}
			break;
 8005dca:	e7d8      	b.n	8005d7e <UWB_Anchor_Get_Distance+0x22>
    {
  	 dataPtr->debugMsg = 0x15;
 8005dcc:	2315      	movs	r3, #21
 8005dce:	7423      	strb	r3, [r4, #16]
    while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	200f      	movs	r0, #15
 8005dd4:	f7ff f932 	bl	800503c <dwt_read32bitoffsetreg>
 8005dd8:	4b5a      	ldr	r3, [pc, #360]	; (8005f44 <UWB_Anchor_Get_Distance+0x1e8>)
 8005dda:	4003      	ands	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f5      	beq.n	8005dcc <UWB_Anchor_Get_Distance+0x70>
    };
    dataPtr->debugMsg = 0x20;
 8005de0:	2320      	movs	r3, #32
 8005de2:	7423      	strb	r3, [r4, #16]
    /* Increment frame sequence number after transmission of the poll message (modulo 256). */
    //TODO: frame_seq_nb++;

    if (status_reg & SYS_STATUS_RXFCG)
 8005de4:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8005de8:	f000 808f 	beq.w	8005f0a <UWB_Anchor_Get_Distance+0x1ae>
    {
        uint32 frame_len;
        dataPtr->debugMsg = 0x69;
 8005dec:	2369      	movs	r3, #105	; 0x69
 8005dee:	7423      	strb	r3, [r4, #16]

        /* Clear good RX frame event and TX frame sent in the DW1000 status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG | SYS_STATUS_TXFRS);
 8005df0:	f44f 4281 	mov.w	r2, #16512	; 0x4080
 8005df4:	2100      	movs	r1, #0
 8005df6:	200f      	movs	r0, #15
 8005df8:	f7ff f9a8 	bl	800514c <dwt_write32bitoffsetreg>

        /* A frame has been received, read it into the local buffer. */
        frame_len = dwt_read32bitreg(RX_FINFO_ID) & RX_FINFO_RXFLEN_MASK;
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	2010      	movs	r0, #16
 8005e00:	f7ff f91c 	bl	800503c <dwt_read32bitoffsetreg>
 8005e04:	f000 017f 	and.w	r1, r0, #127	; 0x7f
        if (frame_len <= RX_BUF_LEN)
 8005e08:	2914      	cmp	r1, #20
 8005e0a:	d979      	bls.n	8005f00 <UWB_Anchor_Get_Distance+0x1a4>
            dwt_readrxdata(rx_buffer, frame_len, 0);
        }

        /* Check that the frame is the expected response from the companion "DS TWR responder" example.
         * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
        rx_buffer[ALL_MSG_SN_IDX] = 0;
 8005e0c:	4849      	ldr	r0, [pc, #292]	; (8005f34 <UWB_Anchor_Get_Distance+0x1d8>)
 8005e0e:	2300      	movs	r3, #0
 8005e10:	7183      	strb	r3, [r0, #6]
        if (memcmp(rx_buffer, rx_resp_msg, ALL_MSG_COMMON_LEN) == 0)
 8005e12:	220a      	movs	r2, #10
 8005e14:	494c      	ldr	r1, [pc, #304]	; (8005f48 <UWB_Anchor_Get_Distance+0x1ec>)
 8005e16:	3004      	adds	r0, #4
 8005e18:	f000 f8f4 	bl	8006004 <memcmp>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	f040 8083 	bne.w	8005f28 <UWB_Anchor_Get_Distance+0x1cc>
        {
            uint32 final_tx_time;
            int ret;

            /* Retrieve poll transmission and response reception timestamp. */
            poll_tx_ts = get_tx_timestamp_u64();
 8005e22:	f7ff ff2a 	bl	8005c7a <get_tx_timestamp_u64>
 8005e26:	4d43      	ldr	r5, [pc, #268]	; (8005f34 <UWB_Anchor_Get_Distance+0x1d8>)
 8005e28:	e9c5 0106 	strd	r0, r1, [r5, #24]
            resp_rx_ts = get_rx_timestamp_u64();
 8005e2c:	f7ff ff48 	bl	8005cc0 <get_rx_timestamp_u64>
 8005e30:	e9c5 0108 	strd	r0, r1, [r5, #32]

            testTagDist = resp_rx_ts - poll_tx_ts;
 8005e34:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8005e38:	1a87      	subs	r7, r0, r2
 8005e3a:	eb61 0803 	sbc.w	r8, r1, r3
 8005e3e:	4e43      	ldr	r6, [pc, #268]	; (8005f4c <UWB_Anchor_Get_Distance+0x1f0>)
 8005e40:	e9c6 7800 	strd	r7, r8, [r6]

            //HAL_GPIO_TogglePin(IR_GPIO_Port, IR_Pin);
            /* Compute final message transmission time. See NOTE 10 below. */
            final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
 8005e44:	4e42      	ldr	r6, [pc, #264]	; (8005f50 <UWB_Anchor_Get_Distance+0x1f4>)
 8005e46:	2700      	movs	r7, #0
 8005e48:	eb16 0800 	adds.w	r8, r6, r0
 8005e4c:	eb47 0901 	adc.w	r9, r7, r1
 8005e50:	ea4f 2018 	mov.w	r0, r8, lsr #8
            dwt_setdelayedtrxtime(final_tx_time);
 8005e54:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
 8005e58:	f7ff fbc6 	bl	80055e8 <dwt_setdelayedtrxtime>

            /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
            final_tx_ts = (((uint64)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;
 8005e5c:	4a3d      	ldr	r2, [pc, #244]	; (8005f54 <UWB_Anchor_Get_Distance+0x1f8>)
 8005e5e:	23ff      	movs	r3, #255	; 0xff
 8005e60:	ea08 0002 	and.w	r0, r8, r2
 8005e64:	ea09 0103 	and.w	r1, r9, r3
 8005e68:	f244 0260 	movw	r2, #16480	; 0x4060
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	1886      	adds	r6, r0, r2
 8005e70:	eb41 0703 	adc.w	r7, r1, r3
 8005e74:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28

            /* Write all timestamps in the final message. See NOTE 11 below. */
            final_msg_set_ts(&tx_final_msg[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
 8005e78:	4e37      	ldr	r6, [pc, #220]	; (8005f58 <UWB_Anchor_Get_Distance+0x1fc>)
 8005e7a:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
 8005e7e:	f106 0026 	add.w	r0, r6, #38	; 0x26
 8005e82:	f7ff feef 	bl	8005c64 <final_msg_set_ts>
            final_msg_set_ts(&tx_final_msg[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
 8005e86:	e9d5 2308 	ldrd	r2, r3, [r5, #32]
 8005e8a:	f106 002a 	add.w	r0, r6, #42	; 0x2a
 8005e8e:	f7ff fee9 	bl	8005c64 <final_msg_set_ts>
            final_msg_set_ts(&tx_final_msg[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);
 8005e92:	e9d5 230a 	ldrd	r2, r3, [r5, #40]	; 0x28
 8005e96:	f106 002e 	add.w	r0, r6, #46	; 0x2e
 8005e9a:	f7ff fee3 	bl	8005c64 <final_msg_set_ts>

            /* Write and send final message. See NOTE 8 below. */
            tx_final_msg[ALL_MSG_SN_IDX] = frame_seq_nb;
 8005e9e:	782b      	ldrb	r3, [r5, #0]
 8005ea0:	77b3      	strb	r3, [r6, #30]
            dwt_writetxdata(sizeof(tx_final_msg), tx_final_msg, 0); /* Zero offset in TX buffer. */
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f106 011c 	add.w	r1, r6, #28
 8005ea8:	2018      	movs	r0, #24
 8005eaa:	f7ff f87d 	bl	8004fa8 <dwt_writetxdata>
            dwt_writetxfctrl(sizeof(tx_final_msg), 0, 1); /* Zero offset in TX buffer, ranging. */
 8005eae:	2201      	movs	r2, #1
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	2018      	movs	r0, #24
 8005eb4:	f7ff f95e 	bl	8005174 <dwt_writetxfctrl>
            dwt_write8bitoffsetreg(PMSC_ID, PMSC_CTRL0_OFFSET, PMSC_CTRL0_TXCLKS_125M);
 8005eb8:	2220      	movs	r2, #32
 8005eba:	2100      	movs	r1, #0
 8005ebc:	2036      	movs	r0, #54	; 0x36
 8005ebe:	f7ff f919 	bl	80050f4 <dwt_write8bitoffsetreg>
            ret = dwt_starttx(DWT_START_TX_DELAYED);
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	f7ff fb98 	bl	80055f8 <dwt_starttx>
            //TODO: TU!
            dataPtr->debugMsg = 0x13;
 8005ec8:	2313      	movs	r3, #19
 8005eca:	7423      	strb	r3, [r4, #16]
            dataPtr->debugError = ret;
 8005ecc:	7460      	strb	r0, [r4, #17]

            /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 12 below. */
            if (ret == DWT_SUCCESS)
 8005ece:	bb58      	cbnz	r0, 8005f28 <UWB_Anchor_Get_Distance+0x1cc>
            {

                /* Poll DW1000 until TX frame sent event set. See NOTE 9 below. */
                while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS))
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	200f      	movs	r0, #15
 8005ed4:	f7ff f8b2 	bl	800503c <dwt_read32bitoffsetreg>
 8005ed8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005edc:	d0f8      	beq.n	8005ed0 <UWB_Anchor_Get_Distance+0x174>
                { };
                HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005ede:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ee2:	481e      	ldr	r0, [pc, #120]	; (8005f5c <UWB_Anchor_Get_Distance+0x200>)
 8005ee4:	f7fa fc8f 	bl	8000806 <HAL_GPIO_TogglePin>
                dataPtr->debugMsg = 0x98;
 8005ee8:	2398      	movs	r3, #152	; 0x98
 8005eea:	7423      	strb	r3, [r4, #16]
                //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
                /* Clear TXFRS event. */
                dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS);
 8005eec:	2280      	movs	r2, #128	; 0x80
 8005eee:	2100      	movs	r1, #0
 8005ef0:	200f      	movs	r0, #15
 8005ef2:	f7ff f92b 	bl	800514c <dwt_write32bitoffsetreg>

                /* Increment frame sequence number after transmission of the final message (modulo 256). */
                frame_seq_nb++;
 8005ef6:	4a0f      	ldr	r2, [pc, #60]	; (8005f34 <UWB_Anchor_Get_Distance+0x1d8>)
 8005ef8:	7813      	ldrb	r3, [r2, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	7013      	strb	r3, [r2, #0]
 8005efe:	e013      	b.n	8005f28 <UWB_Anchor_Get_Distance+0x1cc>
            dwt_readrxdata(rx_buffer, frame_len, 0);
 8005f00:	2200      	movs	r2, #0
 8005f02:	4817      	ldr	r0, [pc, #92]	; (8005f60 <UWB_Anchor_Get_Distance+0x204>)
 8005f04:	f7ff f881 	bl	800500a <dwt_readrxdata>
 8005f08:	e780      	b.n	8005e0c <UWB_Anchor_Get_Distance+0xb0>
        }
    }
    else
    {
        /* Clear RX error/timeout events in the DW1000 status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR);
 8005f0a:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <UWB_Anchor_Get_Distance+0x208>)
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	200f      	movs	r0, #15
 8005f10:	f7ff f91c 	bl	800514c <dwt_write32bitoffsetreg>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, !LED_ACTIVE_STATE);
 8005f14:	2200      	movs	r2, #0
 8005f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f1a:	4810      	ldr	r0, [pc, #64]	; (8005f5c <UWB_Anchor_Get_Distance+0x200>)
 8005f1c:	f7fa fc6d 	bl	80007fa <HAL_GPIO_WritePin>
        dataPtr->debugMsg = 0x03;
 8005f20:	2303      	movs	r3, #3
 8005f22:	7423      	strb	r3, [r4, #16]
        /* Reset RX to properly reinitialise LDE operation. */
        dwt_rxreset();
 8005f24:	f7ff fbc9 	bl	80056ba <dwt_rxreset>
    }

    /* Execute a delay between ranging exchanges. */
    //Sleep(RNG_DELAY_MS);
}
 8005f28:	b005      	add	sp, #20
 8005f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f2e:	bf00      	nop
 8005f30:	08006adc 	.word	0x08006adc
 8005f34:	200002b0 	.word	0x200002b0
 8005f38:	08006ae8 	.word	0x08006ae8
 8005f3c:	08006af4 	.word	0x08006af4
 8005f40:	08006b00 	.word	0x08006b00
 8005f44:	2427d000 	.word	0x2427d000
 8005f48:	2000001c 	.word	0x2000001c
 8005f4c:	200004b0 	.word	0x200004b0
 8005f50:	0c1c0000 	.word	0x0c1c0000
 8005f54:	fffffe00 	.word	0xfffffe00
 8005f58:	20000010 	.word	0x20000010
 8005f5c:	40011000 	.word	0x40011000
 8005f60:	200002b4 	.word	0x200002b4
 8005f64:	24279000 	.word	0x24279000

08005f68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005f68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005f6a:	e003      	b.n	8005f74 <LoopCopyDataInit>

08005f6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005f6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005f70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005f72:	3104      	adds	r1, #4

08005f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005f74:	480a      	ldr	r0, [pc, #40]	; (8005fa0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005f78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005f7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005f7c:	d3f6      	bcc.n	8005f6c <CopyDataInit>
  ldr r2, =_sbss
 8005f7e:	4a0a      	ldr	r2, [pc, #40]	; (8005fa8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005f80:	e002      	b.n	8005f88 <LoopFillZerobss>

08005f82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005f82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005f84:	f842 3b04 	str.w	r3, [r2], #4

08005f88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <LoopFillZerobss+0x24>)
  cmp r2, r3
 8005f8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005f8c:	d3f9      	bcc.n	8005f82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f8e:	f7fe feff 	bl	8004d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f92:	f000 f813 	bl	8005fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005f96:	f7fe fca7 	bl	80048e8 <main>
  bx lr
 8005f9a:	4770      	bx	lr
  ldr r3, =_sidata
 8005f9c:	08006c88 	.word	0x08006c88
  ldr r0, =_sdata
 8005fa0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005fa4:	20000214 	.word	0x20000214
  ldr r2, =_sbss
 8005fa8:	20000218 	.word	0x20000218
  ldr r3, = _ebss
 8005fac:	20000c8c 	.word	0x20000c8c

08005fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005fb0:	e7fe      	b.n	8005fb0 <ADC1_2_IRQHandler>

08005fb2 <atoi>:
 8005fb2:	220a      	movs	r2, #10
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	f000 b8d1 	b.w	800615c <strtol>
	...

08005fbc <__libc_init_array>:
 8005fbc:	b570      	push	{r4, r5, r6, lr}
 8005fbe:	2500      	movs	r5, #0
 8005fc0:	4e0c      	ldr	r6, [pc, #48]	; (8005ff4 <__libc_init_array+0x38>)
 8005fc2:	4c0d      	ldr	r4, [pc, #52]	; (8005ff8 <__libc_init_array+0x3c>)
 8005fc4:	1ba4      	subs	r4, r4, r6
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	42a5      	cmp	r5, r4
 8005fca:	d109      	bne.n	8005fe0 <__libc_init_array+0x24>
 8005fcc:	f000 fd00 	bl	80069d0 <_init>
 8005fd0:	2500      	movs	r5, #0
 8005fd2:	4e0a      	ldr	r6, [pc, #40]	; (8005ffc <__libc_init_array+0x40>)
 8005fd4:	4c0a      	ldr	r4, [pc, #40]	; (8006000 <__libc_init_array+0x44>)
 8005fd6:	1ba4      	subs	r4, r4, r6
 8005fd8:	10a4      	asrs	r4, r4, #2
 8005fda:	42a5      	cmp	r5, r4
 8005fdc:	d105      	bne.n	8005fea <__libc_init_array+0x2e>
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fe4:	4798      	blx	r3
 8005fe6:	3501      	adds	r5, #1
 8005fe8:	e7ee      	b.n	8005fc8 <__libc_init_array+0xc>
 8005fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fee:	4798      	blx	r3
 8005ff0:	3501      	adds	r5, #1
 8005ff2:	e7f2      	b.n	8005fda <__libc_init_array+0x1e>
 8005ff4:	08006c80 	.word	0x08006c80
 8005ff8:	08006c80 	.word	0x08006c80
 8005ffc:	08006c80 	.word	0x08006c80
 8006000:	08006c84 	.word	0x08006c84

08006004 <memcmp>:
 8006004:	b530      	push	{r4, r5, lr}
 8006006:	2400      	movs	r4, #0
 8006008:	42a2      	cmp	r2, r4
 800600a:	d101      	bne.n	8006010 <memcmp+0xc>
 800600c:	2000      	movs	r0, #0
 800600e:	e007      	b.n	8006020 <memcmp+0x1c>
 8006010:	5d03      	ldrb	r3, [r0, r4]
 8006012:	3401      	adds	r4, #1
 8006014:	190d      	adds	r5, r1, r4
 8006016:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800601a:	42ab      	cmp	r3, r5
 800601c:	d0f4      	beq.n	8006008 <memcmp+0x4>
 800601e:	1b58      	subs	r0, r3, r5
 8006020:	bd30      	pop	{r4, r5, pc}
	...

08006024 <siprintf>:
 8006024:	b40e      	push	{r1, r2, r3}
 8006026:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800602a:	b500      	push	{lr}
 800602c:	b09c      	sub	sp, #112	; 0x70
 800602e:	ab1d      	add	r3, sp, #116	; 0x74
 8006030:	9002      	str	r0, [sp, #8]
 8006032:	9006      	str	r0, [sp, #24]
 8006034:	9107      	str	r1, [sp, #28]
 8006036:	9104      	str	r1, [sp, #16]
 8006038:	4808      	ldr	r0, [pc, #32]	; (800605c <siprintf+0x38>)
 800603a:	4909      	ldr	r1, [pc, #36]	; (8006060 <siprintf+0x3c>)
 800603c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006040:	9105      	str	r1, [sp, #20]
 8006042:	6800      	ldr	r0, [r0, #0]
 8006044:	a902      	add	r1, sp, #8
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	f000 f90e 	bl	8006268 <_svfiprintf_r>
 800604c:	2200      	movs	r2, #0
 800604e:	9b02      	ldr	r3, [sp, #8]
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	b01c      	add	sp, #112	; 0x70
 8006054:	f85d eb04 	ldr.w	lr, [sp], #4
 8006058:	b003      	add	sp, #12
 800605a:	4770      	bx	lr
 800605c:	20000044 	.word	0x20000044
 8006060:	ffff0208 	.word	0xffff0208

08006064 <_strtol_l.isra.0>:
 8006064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	4680      	mov	r8, r0
 800606a:	4689      	mov	r9, r1
 800606c:	4692      	mov	sl, r2
 800606e:	461e      	mov	r6, r3
 8006070:	460f      	mov	r7, r1
 8006072:	463d      	mov	r5, r7
 8006074:	9808      	ldr	r0, [sp, #32]
 8006076:	f815 4b01 	ldrb.w	r4, [r5], #1
 800607a:	f000 f885 	bl	8006188 <__locale_ctype_ptr_l>
 800607e:	4420      	add	r0, r4
 8006080:	7843      	ldrb	r3, [r0, #1]
 8006082:	f013 0308 	ands.w	r3, r3, #8
 8006086:	d132      	bne.n	80060ee <_strtol_l.isra.0+0x8a>
 8006088:	2c2d      	cmp	r4, #45	; 0x2d
 800608a:	d132      	bne.n	80060f2 <_strtol_l.isra.0+0x8e>
 800608c:	2201      	movs	r2, #1
 800608e:	787c      	ldrb	r4, [r7, #1]
 8006090:	1cbd      	adds	r5, r7, #2
 8006092:	2e00      	cmp	r6, #0
 8006094:	d05d      	beq.n	8006152 <_strtol_l.isra.0+0xee>
 8006096:	2e10      	cmp	r6, #16
 8006098:	d109      	bne.n	80060ae <_strtol_l.isra.0+0x4a>
 800609a:	2c30      	cmp	r4, #48	; 0x30
 800609c:	d107      	bne.n	80060ae <_strtol_l.isra.0+0x4a>
 800609e:	782b      	ldrb	r3, [r5, #0]
 80060a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80060a4:	2b58      	cmp	r3, #88	; 0x58
 80060a6:	d14f      	bne.n	8006148 <_strtol_l.isra.0+0xe4>
 80060a8:	2610      	movs	r6, #16
 80060aa:	786c      	ldrb	r4, [r5, #1]
 80060ac:	3502      	adds	r5, #2
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	bf14      	ite	ne
 80060b2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80060b6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80060ba:	2700      	movs	r7, #0
 80060bc:	fbb1 fcf6 	udiv	ip, r1, r6
 80060c0:	4638      	mov	r0, r7
 80060c2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80060c6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80060ca:	2b09      	cmp	r3, #9
 80060cc:	d817      	bhi.n	80060fe <_strtol_l.isra.0+0x9a>
 80060ce:	461c      	mov	r4, r3
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	dd23      	ble.n	800611c <_strtol_l.isra.0+0xb8>
 80060d4:	1c7b      	adds	r3, r7, #1
 80060d6:	d007      	beq.n	80060e8 <_strtol_l.isra.0+0x84>
 80060d8:	4584      	cmp	ip, r0
 80060da:	d31c      	bcc.n	8006116 <_strtol_l.isra.0+0xb2>
 80060dc:	d101      	bne.n	80060e2 <_strtol_l.isra.0+0x7e>
 80060de:	45a6      	cmp	lr, r4
 80060e0:	db19      	blt.n	8006116 <_strtol_l.isra.0+0xb2>
 80060e2:	2701      	movs	r7, #1
 80060e4:	fb00 4006 	mla	r0, r0, r6, r4
 80060e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060ec:	e7eb      	b.n	80060c6 <_strtol_l.isra.0+0x62>
 80060ee:	462f      	mov	r7, r5
 80060f0:	e7bf      	b.n	8006072 <_strtol_l.isra.0+0xe>
 80060f2:	2c2b      	cmp	r4, #43	; 0x2b
 80060f4:	bf04      	itt	eq
 80060f6:	1cbd      	addeq	r5, r7, #2
 80060f8:	787c      	ldrbeq	r4, [r7, #1]
 80060fa:	461a      	mov	r2, r3
 80060fc:	e7c9      	b.n	8006092 <_strtol_l.isra.0+0x2e>
 80060fe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006102:	2b19      	cmp	r3, #25
 8006104:	d801      	bhi.n	800610a <_strtol_l.isra.0+0xa6>
 8006106:	3c37      	subs	r4, #55	; 0x37
 8006108:	e7e2      	b.n	80060d0 <_strtol_l.isra.0+0x6c>
 800610a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800610e:	2b19      	cmp	r3, #25
 8006110:	d804      	bhi.n	800611c <_strtol_l.isra.0+0xb8>
 8006112:	3c57      	subs	r4, #87	; 0x57
 8006114:	e7dc      	b.n	80060d0 <_strtol_l.isra.0+0x6c>
 8006116:	f04f 37ff 	mov.w	r7, #4294967295
 800611a:	e7e5      	b.n	80060e8 <_strtol_l.isra.0+0x84>
 800611c:	1c7b      	adds	r3, r7, #1
 800611e:	d108      	bne.n	8006132 <_strtol_l.isra.0+0xce>
 8006120:	2322      	movs	r3, #34	; 0x22
 8006122:	4608      	mov	r0, r1
 8006124:	f8c8 3000 	str.w	r3, [r8]
 8006128:	f1ba 0f00 	cmp.w	sl, #0
 800612c:	d107      	bne.n	800613e <_strtol_l.isra.0+0xda>
 800612e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006132:	b102      	cbz	r2, 8006136 <_strtol_l.isra.0+0xd2>
 8006134:	4240      	negs	r0, r0
 8006136:	f1ba 0f00 	cmp.w	sl, #0
 800613a:	d0f8      	beq.n	800612e <_strtol_l.isra.0+0xca>
 800613c:	b10f      	cbz	r7, 8006142 <_strtol_l.isra.0+0xde>
 800613e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006142:	f8ca 9000 	str.w	r9, [sl]
 8006146:	e7f2      	b.n	800612e <_strtol_l.isra.0+0xca>
 8006148:	2430      	movs	r4, #48	; 0x30
 800614a:	2e00      	cmp	r6, #0
 800614c:	d1af      	bne.n	80060ae <_strtol_l.isra.0+0x4a>
 800614e:	2608      	movs	r6, #8
 8006150:	e7ad      	b.n	80060ae <_strtol_l.isra.0+0x4a>
 8006152:	2c30      	cmp	r4, #48	; 0x30
 8006154:	d0a3      	beq.n	800609e <_strtol_l.isra.0+0x3a>
 8006156:	260a      	movs	r6, #10
 8006158:	e7a9      	b.n	80060ae <_strtol_l.isra.0+0x4a>
	...

0800615c <strtol>:
 800615c:	4b08      	ldr	r3, [pc, #32]	; (8006180 <strtol+0x24>)
 800615e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006160:	681c      	ldr	r4, [r3, #0]
 8006162:	4d08      	ldr	r5, [pc, #32]	; (8006184 <strtol+0x28>)
 8006164:	6a23      	ldr	r3, [r4, #32]
 8006166:	2b00      	cmp	r3, #0
 8006168:	bf08      	it	eq
 800616a:	462b      	moveq	r3, r5
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	4613      	mov	r3, r2
 8006170:	460a      	mov	r2, r1
 8006172:	4601      	mov	r1, r0
 8006174:	4620      	mov	r0, r4
 8006176:	f7ff ff75 	bl	8006064 <_strtol_l.isra.0>
 800617a:	b003      	add	sp, #12
 800617c:	bd30      	pop	{r4, r5, pc}
 800617e:	bf00      	nop
 8006180:	20000044 	.word	0x20000044
 8006184:	200000a8 	.word	0x200000a8

08006188 <__locale_ctype_ptr_l>:
 8006188:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800618c:	4770      	bx	lr

0800618e <__ascii_mbtowc>:
 800618e:	b082      	sub	sp, #8
 8006190:	b901      	cbnz	r1, 8006194 <__ascii_mbtowc+0x6>
 8006192:	a901      	add	r1, sp, #4
 8006194:	b142      	cbz	r2, 80061a8 <__ascii_mbtowc+0x1a>
 8006196:	b14b      	cbz	r3, 80061ac <__ascii_mbtowc+0x1e>
 8006198:	7813      	ldrb	r3, [r2, #0]
 800619a:	600b      	str	r3, [r1, #0]
 800619c:	7812      	ldrb	r2, [r2, #0]
 800619e:	1c10      	adds	r0, r2, #0
 80061a0:	bf18      	it	ne
 80061a2:	2001      	movne	r0, #1
 80061a4:	b002      	add	sp, #8
 80061a6:	4770      	bx	lr
 80061a8:	4610      	mov	r0, r2
 80061aa:	e7fb      	b.n	80061a4 <__ascii_mbtowc+0x16>
 80061ac:	f06f 0001 	mvn.w	r0, #1
 80061b0:	e7f8      	b.n	80061a4 <__ascii_mbtowc+0x16>

080061b2 <__ssputs_r>:
 80061b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061b6:	688e      	ldr	r6, [r1, #8]
 80061b8:	4682      	mov	sl, r0
 80061ba:	429e      	cmp	r6, r3
 80061bc:	460c      	mov	r4, r1
 80061be:	4690      	mov	r8, r2
 80061c0:	4699      	mov	r9, r3
 80061c2:	d837      	bhi.n	8006234 <__ssputs_r+0x82>
 80061c4:	898a      	ldrh	r2, [r1, #12]
 80061c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061ca:	d031      	beq.n	8006230 <__ssputs_r+0x7e>
 80061cc:	2302      	movs	r3, #2
 80061ce:	6825      	ldr	r5, [r4, #0]
 80061d0:	6909      	ldr	r1, [r1, #16]
 80061d2:	1a6f      	subs	r7, r5, r1
 80061d4:	6965      	ldr	r5, [r4, #20]
 80061d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061da:	fb95 f5f3 	sdiv	r5, r5, r3
 80061de:	f109 0301 	add.w	r3, r9, #1
 80061e2:	443b      	add	r3, r7
 80061e4:	429d      	cmp	r5, r3
 80061e6:	bf38      	it	cc
 80061e8:	461d      	movcc	r5, r3
 80061ea:	0553      	lsls	r3, r2, #21
 80061ec:	d530      	bpl.n	8006250 <__ssputs_r+0x9e>
 80061ee:	4629      	mov	r1, r5
 80061f0:	f000 fb46 	bl	8006880 <_malloc_r>
 80061f4:	4606      	mov	r6, r0
 80061f6:	b950      	cbnz	r0, 800620e <__ssputs_r+0x5c>
 80061f8:	230c      	movs	r3, #12
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	f8ca 3000 	str.w	r3, [sl]
 8006202:	89a3      	ldrh	r3, [r4, #12]
 8006204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006208:	81a3      	strh	r3, [r4, #12]
 800620a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800620e:	463a      	mov	r2, r7
 8006210:	6921      	ldr	r1, [r4, #16]
 8006212:	f000 fac4 	bl	800679e <memcpy>
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800621c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006220:	81a3      	strh	r3, [r4, #12]
 8006222:	6126      	str	r6, [r4, #16]
 8006224:	443e      	add	r6, r7
 8006226:	6026      	str	r6, [r4, #0]
 8006228:	464e      	mov	r6, r9
 800622a:	6165      	str	r5, [r4, #20]
 800622c:	1bed      	subs	r5, r5, r7
 800622e:	60a5      	str	r5, [r4, #8]
 8006230:	454e      	cmp	r6, r9
 8006232:	d900      	bls.n	8006236 <__ssputs_r+0x84>
 8006234:	464e      	mov	r6, r9
 8006236:	4632      	mov	r2, r6
 8006238:	4641      	mov	r1, r8
 800623a:	6820      	ldr	r0, [r4, #0]
 800623c:	f000 faba 	bl	80067b4 <memmove>
 8006240:	68a3      	ldr	r3, [r4, #8]
 8006242:	2000      	movs	r0, #0
 8006244:	1b9b      	subs	r3, r3, r6
 8006246:	60a3      	str	r3, [r4, #8]
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	441e      	add	r6, r3
 800624c:	6026      	str	r6, [r4, #0]
 800624e:	e7dc      	b.n	800620a <__ssputs_r+0x58>
 8006250:	462a      	mov	r2, r5
 8006252:	f000 fb6f 	bl	8006934 <_realloc_r>
 8006256:	4606      	mov	r6, r0
 8006258:	2800      	cmp	r0, #0
 800625a:	d1e2      	bne.n	8006222 <__ssputs_r+0x70>
 800625c:	6921      	ldr	r1, [r4, #16]
 800625e:	4650      	mov	r0, sl
 8006260:	f000 fac2 	bl	80067e8 <_free_r>
 8006264:	e7c8      	b.n	80061f8 <__ssputs_r+0x46>
	...

08006268 <_svfiprintf_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	461d      	mov	r5, r3
 800626e:	898b      	ldrh	r3, [r1, #12]
 8006270:	b09d      	sub	sp, #116	; 0x74
 8006272:	061f      	lsls	r7, r3, #24
 8006274:	4680      	mov	r8, r0
 8006276:	460c      	mov	r4, r1
 8006278:	4616      	mov	r6, r2
 800627a:	d50f      	bpl.n	800629c <_svfiprintf_r+0x34>
 800627c:	690b      	ldr	r3, [r1, #16]
 800627e:	b96b      	cbnz	r3, 800629c <_svfiprintf_r+0x34>
 8006280:	2140      	movs	r1, #64	; 0x40
 8006282:	f000 fafd 	bl	8006880 <_malloc_r>
 8006286:	6020      	str	r0, [r4, #0]
 8006288:	6120      	str	r0, [r4, #16]
 800628a:	b928      	cbnz	r0, 8006298 <_svfiprintf_r+0x30>
 800628c:	230c      	movs	r3, #12
 800628e:	f8c8 3000 	str.w	r3, [r8]
 8006292:	f04f 30ff 	mov.w	r0, #4294967295
 8006296:	e0c8      	b.n	800642a <_svfiprintf_r+0x1c2>
 8006298:	2340      	movs	r3, #64	; 0x40
 800629a:	6163      	str	r3, [r4, #20]
 800629c:	2300      	movs	r3, #0
 800629e:	9309      	str	r3, [sp, #36]	; 0x24
 80062a0:	2320      	movs	r3, #32
 80062a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062a6:	2330      	movs	r3, #48	; 0x30
 80062a8:	f04f 0b01 	mov.w	fp, #1
 80062ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062b0:	9503      	str	r5, [sp, #12]
 80062b2:	4637      	mov	r7, r6
 80062b4:	463d      	mov	r5, r7
 80062b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80062ba:	b10b      	cbz	r3, 80062c0 <_svfiprintf_r+0x58>
 80062bc:	2b25      	cmp	r3, #37	; 0x25
 80062be:	d13e      	bne.n	800633e <_svfiprintf_r+0xd6>
 80062c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80062c4:	d00b      	beq.n	80062de <_svfiprintf_r+0x76>
 80062c6:	4653      	mov	r3, sl
 80062c8:	4632      	mov	r2, r6
 80062ca:	4621      	mov	r1, r4
 80062cc:	4640      	mov	r0, r8
 80062ce:	f7ff ff70 	bl	80061b2 <__ssputs_r>
 80062d2:	3001      	adds	r0, #1
 80062d4:	f000 80a4 	beq.w	8006420 <_svfiprintf_r+0x1b8>
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	4453      	add	r3, sl
 80062dc:	9309      	str	r3, [sp, #36]	; 0x24
 80062de:	783b      	ldrb	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 809d 	beq.w	8006420 <_svfiprintf_r+0x1b8>
 80062e6:	2300      	movs	r3, #0
 80062e8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	9307      	str	r3, [sp, #28]
 80062f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062f8:	931a      	str	r3, [sp, #104]	; 0x68
 80062fa:	462f      	mov	r7, r5
 80062fc:	2205      	movs	r2, #5
 80062fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006302:	4850      	ldr	r0, [pc, #320]	; (8006444 <_svfiprintf_r+0x1dc>)
 8006304:	f000 fa3d 	bl	8006782 <memchr>
 8006308:	9b04      	ldr	r3, [sp, #16]
 800630a:	b9d0      	cbnz	r0, 8006342 <_svfiprintf_r+0xda>
 800630c:	06d9      	lsls	r1, r3, #27
 800630e:	bf44      	itt	mi
 8006310:	2220      	movmi	r2, #32
 8006312:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006316:	071a      	lsls	r2, r3, #28
 8006318:	bf44      	itt	mi
 800631a:	222b      	movmi	r2, #43	; 0x2b
 800631c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006320:	782a      	ldrb	r2, [r5, #0]
 8006322:	2a2a      	cmp	r2, #42	; 0x2a
 8006324:	d015      	beq.n	8006352 <_svfiprintf_r+0xea>
 8006326:	462f      	mov	r7, r5
 8006328:	2000      	movs	r0, #0
 800632a:	250a      	movs	r5, #10
 800632c:	9a07      	ldr	r2, [sp, #28]
 800632e:	4639      	mov	r1, r7
 8006330:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006334:	3b30      	subs	r3, #48	; 0x30
 8006336:	2b09      	cmp	r3, #9
 8006338:	d94d      	bls.n	80063d6 <_svfiprintf_r+0x16e>
 800633a:	b1b8      	cbz	r0, 800636c <_svfiprintf_r+0x104>
 800633c:	e00f      	b.n	800635e <_svfiprintf_r+0xf6>
 800633e:	462f      	mov	r7, r5
 8006340:	e7b8      	b.n	80062b4 <_svfiprintf_r+0x4c>
 8006342:	4a40      	ldr	r2, [pc, #256]	; (8006444 <_svfiprintf_r+0x1dc>)
 8006344:	463d      	mov	r5, r7
 8006346:	1a80      	subs	r0, r0, r2
 8006348:	fa0b f000 	lsl.w	r0, fp, r0
 800634c:	4318      	orrs	r0, r3
 800634e:	9004      	str	r0, [sp, #16]
 8006350:	e7d3      	b.n	80062fa <_svfiprintf_r+0x92>
 8006352:	9a03      	ldr	r2, [sp, #12]
 8006354:	1d11      	adds	r1, r2, #4
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	9103      	str	r1, [sp, #12]
 800635a:	2a00      	cmp	r2, #0
 800635c:	db01      	blt.n	8006362 <_svfiprintf_r+0xfa>
 800635e:	9207      	str	r2, [sp, #28]
 8006360:	e004      	b.n	800636c <_svfiprintf_r+0x104>
 8006362:	4252      	negs	r2, r2
 8006364:	f043 0302 	orr.w	r3, r3, #2
 8006368:	9207      	str	r2, [sp, #28]
 800636a:	9304      	str	r3, [sp, #16]
 800636c:	783b      	ldrb	r3, [r7, #0]
 800636e:	2b2e      	cmp	r3, #46	; 0x2e
 8006370:	d10c      	bne.n	800638c <_svfiprintf_r+0x124>
 8006372:	787b      	ldrb	r3, [r7, #1]
 8006374:	2b2a      	cmp	r3, #42	; 0x2a
 8006376:	d133      	bne.n	80063e0 <_svfiprintf_r+0x178>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	3702      	adds	r7, #2
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	9203      	str	r2, [sp, #12]
 8006382:	2b00      	cmp	r3, #0
 8006384:	bfb8      	it	lt
 8006386:	f04f 33ff 	movlt.w	r3, #4294967295
 800638a:	9305      	str	r3, [sp, #20]
 800638c:	4d2e      	ldr	r5, [pc, #184]	; (8006448 <_svfiprintf_r+0x1e0>)
 800638e:	2203      	movs	r2, #3
 8006390:	7839      	ldrb	r1, [r7, #0]
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f9f5 	bl	8006782 <memchr>
 8006398:	b138      	cbz	r0, 80063aa <_svfiprintf_r+0x142>
 800639a:	2340      	movs	r3, #64	; 0x40
 800639c:	1b40      	subs	r0, r0, r5
 800639e:	fa03 f000 	lsl.w	r0, r3, r0
 80063a2:	9b04      	ldr	r3, [sp, #16]
 80063a4:	3701      	adds	r7, #1
 80063a6:	4303      	orrs	r3, r0
 80063a8:	9304      	str	r3, [sp, #16]
 80063aa:	7839      	ldrb	r1, [r7, #0]
 80063ac:	2206      	movs	r2, #6
 80063ae:	4827      	ldr	r0, [pc, #156]	; (800644c <_svfiprintf_r+0x1e4>)
 80063b0:	1c7e      	adds	r6, r7, #1
 80063b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063b6:	f000 f9e4 	bl	8006782 <memchr>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d038      	beq.n	8006430 <_svfiprintf_r+0x1c8>
 80063be:	4b24      	ldr	r3, [pc, #144]	; (8006450 <_svfiprintf_r+0x1e8>)
 80063c0:	bb13      	cbnz	r3, 8006408 <_svfiprintf_r+0x1a0>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	3307      	adds	r3, #7
 80063c6:	f023 0307 	bic.w	r3, r3, #7
 80063ca:	3308      	adds	r3, #8
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063d0:	444b      	add	r3, r9
 80063d2:	9309      	str	r3, [sp, #36]	; 0x24
 80063d4:	e76d      	b.n	80062b2 <_svfiprintf_r+0x4a>
 80063d6:	fb05 3202 	mla	r2, r5, r2, r3
 80063da:	2001      	movs	r0, #1
 80063dc:	460f      	mov	r7, r1
 80063de:	e7a6      	b.n	800632e <_svfiprintf_r+0xc6>
 80063e0:	2300      	movs	r3, #0
 80063e2:	250a      	movs	r5, #10
 80063e4:	4619      	mov	r1, r3
 80063e6:	3701      	adds	r7, #1
 80063e8:	9305      	str	r3, [sp, #20]
 80063ea:	4638      	mov	r0, r7
 80063ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063f0:	3a30      	subs	r2, #48	; 0x30
 80063f2:	2a09      	cmp	r2, #9
 80063f4:	d903      	bls.n	80063fe <_svfiprintf_r+0x196>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0c8      	beq.n	800638c <_svfiprintf_r+0x124>
 80063fa:	9105      	str	r1, [sp, #20]
 80063fc:	e7c6      	b.n	800638c <_svfiprintf_r+0x124>
 80063fe:	fb05 2101 	mla	r1, r5, r1, r2
 8006402:	2301      	movs	r3, #1
 8006404:	4607      	mov	r7, r0
 8006406:	e7f0      	b.n	80063ea <_svfiprintf_r+0x182>
 8006408:	ab03      	add	r3, sp, #12
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	4622      	mov	r2, r4
 800640e:	4b11      	ldr	r3, [pc, #68]	; (8006454 <_svfiprintf_r+0x1ec>)
 8006410:	a904      	add	r1, sp, #16
 8006412:	4640      	mov	r0, r8
 8006414:	f3af 8000 	nop.w
 8006418:	f1b0 3fff 	cmp.w	r0, #4294967295
 800641c:	4681      	mov	r9, r0
 800641e:	d1d6      	bne.n	80063ce <_svfiprintf_r+0x166>
 8006420:	89a3      	ldrh	r3, [r4, #12]
 8006422:	065b      	lsls	r3, r3, #25
 8006424:	f53f af35 	bmi.w	8006292 <_svfiprintf_r+0x2a>
 8006428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800642a:	b01d      	add	sp, #116	; 0x74
 800642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006430:	ab03      	add	r3, sp, #12
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	4622      	mov	r2, r4
 8006436:	4b07      	ldr	r3, [pc, #28]	; (8006454 <_svfiprintf_r+0x1ec>)
 8006438:	a904      	add	r1, sp, #16
 800643a:	4640      	mov	r0, r8
 800643c:	f000 f882 	bl	8006544 <_printf_i>
 8006440:	e7ea      	b.n	8006418 <_svfiprintf_r+0x1b0>
 8006442:	bf00      	nop
 8006444:	08006b4a 	.word	0x08006b4a
 8006448:	08006b50 	.word	0x08006b50
 800644c:	08006b54 	.word	0x08006b54
 8006450:	00000000 	.word	0x00000000
 8006454:	080061b3 	.word	0x080061b3

08006458 <_printf_common>:
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	4691      	mov	r9, r2
 800645e:	461f      	mov	r7, r3
 8006460:	688a      	ldr	r2, [r1, #8]
 8006462:	690b      	ldr	r3, [r1, #16]
 8006464:	4606      	mov	r6, r0
 8006466:	4293      	cmp	r3, r2
 8006468:	bfb8      	it	lt
 800646a:	4613      	movlt	r3, r2
 800646c:	f8c9 3000 	str.w	r3, [r9]
 8006470:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006474:	460c      	mov	r4, r1
 8006476:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800647a:	b112      	cbz	r2, 8006482 <_printf_common+0x2a>
 800647c:	3301      	adds	r3, #1
 800647e:	f8c9 3000 	str.w	r3, [r9]
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	0699      	lsls	r1, r3, #26
 8006486:	bf42      	ittt	mi
 8006488:	f8d9 3000 	ldrmi.w	r3, [r9]
 800648c:	3302      	addmi	r3, #2
 800648e:	f8c9 3000 	strmi.w	r3, [r9]
 8006492:	6825      	ldr	r5, [r4, #0]
 8006494:	f015 0506 	ands.w	r5, r5, #6
 8006498:	d107      	bne.n	80064aa <_printf_common+0x52>
 800649a:	f104 0a19 	add.w	sl, r4, #25
 800649e:	68e3      	ldr	r3, [r4, #12]
 80064a0:	f8d9 2000 	ldr.w	r2, [r9]
 80064a4:	1a9b      	subs	r3, r3, r2
 80064a6:	42ab      	cmp	r3, r5
 80064a8:	dc29      	bgt.n	80064fe <_printf_common+0xa6>
 80064aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	3300      	adds	r3, #0
 80064b2:	bf18      	it	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	0692      	lsls	r2, r2, #26
 80064b8:	d42e      	bmi.n	8006518 <_printf_common+0xc0>
 80064ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064be:	4639      	mov	r1, r7
 80064c0:	4630      	mov	r0, r6
 80064c2:	47c0      	blx	r8
 80064c4:	3001      	adds	r0, #1
 80064c6:	d021      	beq.n	800650c <_printf_common+0xb4>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	68e5      	ldr	r5, [r4, #12]
 80064cc:	f003 0306 	and.w	r3, r3, #6
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	bf18      	it	ne
 80064d4:	2500      	movne	r5, #0
 80064d6:	f8d9 2000 	ldr.w	r2, [r9]
 80064da:	f04f 0900 	mov.w	r9, #0
 80064de:	bf08      	it	eq
 80064e0:	1aad      	subeq	r5, r5, r2
 80064e2:	68a3      	ldr	r3, [r4, #8]
 80064e4:	6922      	ldr	r2, [r4, #16]
 80064e6:	bf08      	it	eq
 80064e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80064ec:	4293      	cmp	r3, r2
 80064ee:	bfc4      	itt	gt
 80064f0:	1a9b      	subgt	r3, r3, r2
 80064f2:	18ed      	addgt	r5, r5, r3
 80064f4:	341a      	adds	r4, #26
 80064f6:	454d      	cmp	r5, r9
 80064f8:	d11a      	bne.n	8006530 <_printf_common+0xd8>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e008      	b.n	8006510 <_printf_common+0xb8>
 80064fe:	2301      	movs	r3, #1
 8006500:	4652      	mov	r2, sl
 8006502:	4639      	mov	r1, r7
 8006504:	4630      	mov	r0, r6
 8006506:	47c0      	blx	r8
 8006508:	3001      	adds	r0, #1
 800650a:	d103      	bne.n	8006514 <_printf_common+0xbc>
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006514:	3501      	adds	r5, #1
 8006516:	e7c2      	b.n	800649e <_printf_common+0x46>
 8006518:	2030      	movs	r0, #48	; 0x30
 800651a:	18e1      	adds	r1, r4, r3
 800651c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006526:	4422      	add	r2, r4
 8006528:	3302      	adds	r3, #2
 800652a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800652e:	e7c4      	b.n	80064ba <_printf_common+0x62>
 8006530:	2301      	movs	r3, #1
 8006532:	4622      	mov	r2, r4
 8006534:	4639      	mov	r1, r7
 8006536:	4630      	mov	r0, r6
 8006538:	47c0      	blx	r8
 800653a:	3001      	adds	r0, #1
 800653c:	d0e6      	beq.n	800650c <_printf_common+0xb4>
 800653e:	f109 0901 	add.w	r9, r9, #1
 8006542:	e7d8      	b.n	80064f6 <_printf_common+0x9e>

08006544 <_printf_i>:
 8006544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006548:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800654c:	460c      	mov	r4, r1
 800654e:	7e09      	ldrb	r1, [r1, #24]
 8006550:	b085      	sub	sp, #20
 8006552:	296e      	cmp	r1, #110	; 0x6e
 8006554:	4617      	mov	r7, r2
 8006556:	4606      	mov	r6, r0
 8006558:	4698      	mov	r8, r3
 800655a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800655c:	f000 80b3 	beq.w	80066c6 <_printf_i+0x182>
 8006560:	d822      	bhi.n	80065a8 <_printf_i+0x64>
 8006562:	2963      	cmp	r1, #99	; 0x63
 8006564:	d036      	beq.n	80065d4 <_printf_i+0x90>
 8006566:	d80a      	bhi.n	800657e <_printf_i+0x3a>
 8006568:	2900      	cmp	r1, #0
 800656a:	f000 80b9 	beq.w	80066e0 <_printf_i+0x19c>
 800656e:	2958      	cmp	r1, #88	; 0x58
 8006570:	f000 8083 	beq.w	800667a <_printf_i+0x136>
 8006574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006578:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800657c:	e032      	b.n	80065e4 <_printf_i+0xa0>
 800657e:	2964      	cmp	r1, #100	; 0x64
 8006580:	d001      	beq.n	8006586 <_printf_i+0x42>
 8006582:	2969      	cmp	r1, #105	; 0x69
 8006584:	d1f6      	bne.n	8006574 <_printf_i+0x30>
 8006586:	6820      	ldr	r0, [r4, #0]
 8006588:	6813      	ldr	r3, [r2, #0]
 800658a:	0605      	lsls	r5, r0, #24
 800658c:	f103 0104 	add.w	r1, r3, #4
 8006590:	d52a      	bpl.n	80065e8 <_printf_i+0xa4>
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	da03      	bge.n	80065a2 <_printf_i+0x5e>
 800659a:	222d      	movs	r2, #45	; 0x2d
 800659c:	425b      	negs	r3, r3
 800659e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80065a2:	486f      	ldr	r0, [pc, #444]	; (8006760 <_printf_i+0x21c>)
 80065a4:	220a      	movs	r2, #10
 80065a6:	e039      	b.n	800661c <_printf_i+0xd8>
 80065a8:	2973      	cmp	r1, #115	; 0x73
 80065aa:	f000 809d 	beq.w	80066e8 <_printf_i+0x1a4>
 80065ae:	d808      	bhi.n	80065c2 <_printf_i+0x7e>
 80065b0:	296f      	cmp	r1, #111	; 0x6f
 80065b2:	d020      	beq.n	80065f6 <_printf_i+0xb2>
 80065b4:	2970      	cmp	r1, #112	; 0x70
 80065b6:	d1dd      	bne.n	8006574 <_printf_i+0x30>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	f043 0320 	orr.w	r3, r3, #32
 80065be:	6023      	str	r3, [r4, #0]
 80065c0:	e003      	b.n	80065ca <_printf_i+0x86>
 80065c2:	2975      	cmp	r1, #117	; 0x75
 80065c4:	d017      	beq.n	80065f6 <_printf_i+0xb2>
 80065c6:	2978      	cmp	r1, #120	; 0x78
 80065c8:	d1d4      	bne.n	8006574 <_printf_i+0x30>
 80065ca:	2378      	movs	r3, #120	; 0x78
 80065cc:	4865      	ldr	r0, [pc, #404]	; (8006764 <_printf_i+0x220>)
 80065ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065d2:	e055      	b.n	8006680 <_printf_i+0x13c>
 80065d4:	6813      	ldr	r3, [r2, #0]
 80065d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065da:	1d19      	adds	r1, r3, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6011      	str	r1, [r2, #0]
 80065e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065e4:	2301      	movs	r3, #1
 80065e6:	e08c      	b.n	8006702 <_printf_i+0x1be>
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065ee:	6011      	str	r1, [r2, #0]
 80065f0:	bf18      	it	ne
 80065f2:	b21b      	sxthne	r3, r3
 80065f4:	e7cf      	b.n	8006596 <_printf_i+0x52>
 80065f6:	6813      	ldr	r3, [r2, #0]
 80065f8:	6825      	ldr	r5, [r4, #0]
 80065fa:	1d18      	adds	r0, r3, #4
 80065fc:	6010      	str	r0, [r2, #0]
 80065fe:	0628      	lsls	r0, r5, #24
 8006600:	d501      	bpl.n	8006606 <_printf_i+0xc2>
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	e002      	b.n	800660c <_printf_i+0xc8>
 8006606:	0668      	lsls	r0, r5, #25
 8006608:	d5fb      	bpl.n	8006602 <_printf_i+0xbe>
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	296f      	cmp	r1, #111	; 0x6f
 800660e:	bf14      	ite	ne
 8006610:	220a      	movne	r2, #10
 8006612:	2208      	moveq	r2, #8
 8006614:	4852      	ldr	r0, [pc, #328]	; (8006760 <_printf_i+0x21c>)
 8006616:	2100      	movs	r1, #0
 8006618:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800661c:	6865      	ldr	r5, [r4, #4]
 800661e:	2d00      	cmp	r5, #0
 8006620:	60a5      	str	r5, [r4, #8]
 8006622:	f2c0 8095 	blt.w	8006750 <_printf_i+0x20c>
 8006626:	6821      	ldr	r1, [r4, #0]
 8006628:	f021 0104 	bic.w	r1, r1, #4
 800662c:	6021      	str	r1, [r4, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d13d      	bne.n	80066ae <_printf_i+0x16a>
 8006632:	2d00      	cmp	r5, #0
 8006634:	f040 808e 	bne.w	8006754 <_printf_i+0x210>
 8006638:	4665      	mov	r5, ip
 800663a:	2a08      	cmp	r2, #8
 800663c:	d10b      	bne.n	8006656 <_printf_i+0x112>
 800663e:	6823      	ldr	r3, [r4, #0]
 8006640:	07db      	lsls	r3, r3, #31
 8006642:	d508      	bpl.n	8006656 <_printf_i+0x112>
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	6862      	ldr	r2, [r4, #4]
 8006648:	429a      	cmp	r2, r3
 800664a:	bfde      	ittt	le
 800664c:	2330      	movle	r3, #48	; 0x30
 800664e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006652:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006656:	ebac 0305 	sub.w	r3, ip, r5
 800665a:	6123      	str	r3, [r4, #16]
 800665c:	f8cd 8000 	str.w	r8, [sp]
 8006660:	463b      	mov	r3, r7
 8006662:	aa03      	add	r2, sp, #12
 8006664:	4621      	mov	r1, r4
 8006666:	4630      	mov	r0, r6
 8006668:	f7ff fef6 	bl	8006458 <_printf_common>
 800666c:	3001      	adds	r0, #1
 800666e:	d14d      	bne.n	800670c <_printf_i+0x1c8>
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	b005      	add	sp, #20
 8006676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800667a:	4839      	ldr	r0, [pc, #228]	; (8006760 <_printf_i+0x21c>)
 800667c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006680:	6813      	ldr	r3, [r2, #0]
 8006682:	6821      	ldr	r1, [r4, #0]
 8006684:	1d1d      	adds	r5, r3, #4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6015      	str	r5, [r2, #0]
 800668a:	060a      	lsls	r2, r1, #24
 800668c:	d50b      	bpl.n	80066a6 <_printf_i+0x162>
 800668e:	07ca      	lsls	r2, r1, #31
 8006690:	bf44      	itt	mi
 8006692:	f041 0120 	orrmi.w	r1, r1, #32
 8006696:	6021      	strmi	r1, [r4, #0]
 8006698:	b91b      	cbnz	r3, 80066a2 <_printf_i+0x15e>
 800669a:	6822      	ldr	r2, [r4, #0]
 800669c:	f022 0220 	bic.w	r2, r2, #32
 80066a0:	6022      	str	r2, [r4, #0]
 80066a2:	2210      	movs	r2, #16
 80066a4:	e7b7      	b.n	8006616 <_printf_i+0xd2>
 80066a6:	064d      	lsls	r5, r1, #25
 80066a8:	bf48      	it	mi
 80066aa:	b29b      	uxthmi	r3, r3
 80066ac:	e7ef      	b.n	800668e <_printf_i+0x14a>
 80066ae:	4665      	mov	r5, ip
 80066b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80066b4:	fb02 3311 	mls	r3, r2, r1, r3
 80066b8:	5cc3      	ldrb	r3, [r0, r3]
 80066ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80066be:	460b      	mov	r3, r1
 80066c0:	2900      	cmp	r1, #0
 80066c2:	d1f5      	bne.n	80066b0 <_printf_i+0x16c>
 80066c4:	e7b9      	b.n	800663a <_printf_i+0xf6>
 80066c6:	6813      	ldr	r3, [r2, #0]
 80066c8:	6825      	ldr	r5, [r4, #0]
 80066ca:	1d18      	adds	r0, r3, #4
 80066cc:	6961      	ldr	r1, [r4, #20]
 80066ce:	6010      	str	r0, [r2, #0]
 80066d0:	0628      	lsls	r0, r5, #24
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	d501      	bpl.n	80066da <_printf_i+0x196>
 80066d6:	6019      	str	r1, [r3, #0]
 80066d8:	e002      	b.n	80066e0 <_printf_i+0x19c>
 80066da:	066a      	lsls	r2, r5, #25
 80066dc:	d5fb      	bpl.n	80066d6 <_printf_i+0x192>
 80066de:	8019      	strh	r1, [r3, #0]
 80066e0:	2300      	movs	r3, #0
 80066e2:	4665      	mov	r5, ip
 80066e4:	6123      	str	r3, [r4, #16]
 80066e6:	e7b9      	b.n	800665c <_printf_i+0x118>
 80066e8:	6813      	ldr	r3, [r2, #0]
 80066ea:	1d19      	adds	r1, r3, #4
 80066ec:	6011      	str	r1, [r2, #0]
 80066ee:	681d      	ldr	r5, [r3, #0]
 80066f0:	6862      	ldr	r2, [r4, #4]
 80066f2:	2100      	movs	r1, #0
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 f844 	bl	8006782 <memchr>
 80066fa:	b108      	cbz	r0, 8006700 <_printf_i+0x1bc>
 80066fc:	1b40      	subs	r0, r0, r5
 80066fe:	6060      	str	r0, [r4, #4]
 8006700:	6863      	ldr	r3, [r4, #4]
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	2300      	movs	r3, #0
 8006706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800670a:	e7a7      	b.n	800665c <_printf_i+0x118>
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	462a      	mov	r2, r5
 8006710:	4639      	mov	r1, r7
 8006712:	4630      	mov	r0, r6
 8006714:	47c0      	blx	r8
 8006716:	3001      	adds	r0, #1
 8006718:	d0aa      	beq.n	8006670 <_printf_i+0x12c>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	079b      	lsls	r3, r3, #30
 800671e:	d413      	bmi.n	8006748 <_printf_i+0x204>
 8006720:	68e0      	ldr	r0, [r4, #12]
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	4298      	cmp	r0, r3
 8006726:	bfb8      	it	lt
 8006728:	4618      	movlt	r0, r3
 800672a:	e7a3      	b.n	8006674 <_printf_i+0x130>
 800672c:	2301      	movs	r3, #1
 800672e:	464a      	mov	r2, r9
 8006730:	4639      	mov	r1, r7
 8006732:	4630      	mov	r0, r6
 8006734:	47c0      	blx	r8
 8006736:	3001      	adds	r0, #1
 8006738:	d09a      	beq.n	8006670 <_printf_i+0x12c>
 800673a:	3501      	adds	r5, #1
 800673c:	68e3      	ldr	r3, [r4, #12]
 800673e:	9a03      	ldr	r2, [sp, #12]
 8006740:	1a9b      	subs	r3, r3, r2
 8006742:	42ab      	cmp	r3, r5
 8006744:	dcf2      	bgt.n	800672c <_printf_i+0x1e8>
 8006746:	e7eb      	b.n	8006720 <_printf_i+0x1dc>
 8006748:	2500      	movs	r5, #0
 800674a:	f104 0919 	add.w	r9, r4, #25
 800674e:	e7f5      	b.n	800673c <_printf_i+0x1f8>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1ac      	bne.n	80066ae <_printf_i+0x16a>
 8006754:	7803      	ldrb	r3, [r0, #0]
 8006756:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800675a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800675e:	e76c      	b.n	800663a <_printf_i+0xf6>
 8006760:	08006b5b 	.word	0x08006b5b
 8006764:	08006b6c 	.word	0x08006b6c

08006768 <__ascii_wctomb>:
 8006768:	b149      	cbz	r1, 800677e <__ascii_wctomb+0x16>
 800676a:	2aff      	cmp	r2, #255	; 0xff
 800676c:	bf8b      	itete	hi
 800676e:	238a      	movhi	r3, #138	; 0x8a
 8006770:	700a      	strbls	r2, [r1, #0]
 8006772:	6003      	strhi	r3, [r0, #0]
 8006774:	2001      	movls	r0, #1
 8006776:	bf88      	it	hi
 8006778:	f04f 30ff 	movhi.w	r0, #4294967295
 800677c:	4770      	bx	lr
 800677e:	4608      	mov	r0, r1
 8006780:	4770      	bx	lr

08006782 <memchr>:
 8006782:	b510      	push	{r4, lr}
 8006784:	b2c9      	uxtb	r1, r1
 8006786:	4402      	add	r2, r0
 8006788:	4290      	cmp	r0, r2
 800678a:	4603      	mov	r3, r0
 800678c:	d101      	bne.n	8006792 <memchr+0x10>
 800678e:	2300      	movs	r3, #0
 8006790:	e003      	b.n	800679a <memchr+0x18>
 8006792:	781c      	ldrb	r4, [r3, #0]
 8006794:	3001      	adds	r0, #1
 8006796:	428c      	cmp	r4, r1
 8006798:	d1f6      	bne.n	8006788 <memchr+0x6>
 800679a:	4618      	mov	r0, r3
 800679c:	bd10      	pop	{r4, pc}

0800679e <memcpy>:
 800679e:	b510      	push	{r4, lr}
 80067a0:	1e43      	subs	r3, r0, #1
 80067a2:	440a      	add	r2, r1
 80067a4:	4291      	cmp	r1, r2
 80067a6:	d100      	bne.n	80067aa <memcpy+0xc>
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067b2:	e7f7      	b.n	80067a4 <memcpy+0x6>

080067b4 <memmove>:
 80067b4:	4288      	cmp	r0, r1
 80067b6:	b510      	push	{r4, lr}
 80067b8:	eb01 0302 	add.w	r3, r1, r2
 80067bc:	d807      	bhi.n	80067ce <memmove+0x1a>
 80067be:	1e42      	subs	r2, r0, #1
 80067c0:	4299      	cmp	r1, r3
 80067c2:	d00a      	beq.n	80067da <memmove+0x26>
 80067c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067cc:	e7f8      	b.n	80067c0 <memmove+0xc>
 80067ce:	4283      	cmp	r3, r0
 80067d0:	d9f5      	bls.n	80067be <memmove+0xa>
 80067d2:	1881      	adds	r1, r0, r2
 80067d4:	1ad2      	subs	r2, r2, r3
 80067d6:	42d3      	cmn	r3, r2
 80067d8:	d100      	bne.n	80067dc <memmove+0x28>
 80067da:	bd10      	pop	{r4, pc}
 80067dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067e0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067e4:	e7f7      	b.n	80067d6 <memmove+0x22>
	...

080067e8 <_free_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	4605      	mov	r5, r0
 80067ec:	2900      	cmp	r1, #0
 80067ee:	d043      	beq.n	8006878 <_free_r+0x90>
 80067f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067f4:	1f0c      	subs	r4, r1, #4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	bfb8      	it	lt
 80067fa:	18e4      	addlt	r4, r4, r3
 80067fc:	f000 f8d0 	bl	80069a0 <__malloc_lock>
 8006800:	4a1e      	ldr	r2, [pc, #120]	; (800687c <_free_r+0x94>)
 8006802:	6813      	ldr	r3, [r2, #0]
 8006804:	4610      	mov	r0, r2
 8006806:	b933      	cbnz	r3, 8006816 <_free_r+0x2e>
 8006808:	6063      	str	r3, [r4, #4]
 800680a:	6014      	str	r4, [r2, #0]
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006812:	f000 b8c6 	b.w	80069a2 <__malloc_unlock>
 8006816:	42a3      	cmp	r3, r4
 8006818:	d90b      	bls.n	8006832 <_free_r+0x4a>
 800681a:	6821      	ldr	r1, [r4, #0]
 800681c:	1862      	adds	r2, r4, r1
 800681e:	4293      	cmp	r3, r2
 8006820:	bf01      	itttt	eq
 8006822:	681a      	ldreq	r2, [r3, #0]
 8006824:	685b      	ldreq	r3, [r3, #4]
 8006826:	1852      	addeq	r2, r2, r1
 8006828:	6022      	streq	r2, [r4, #0]
 800682a:	6063      	str	r3, [r4, #4]
 800682c:	6004      	str	r4, [r0, #0]
 800682e:	e7ed      	b.n	800680c <_free_r+0x24>
 8006830:	4613      	mov	r3, r2
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	b10a      	cbz	r2, 800683a <_free_r+0x52>
 8006836:	42a2      	cmp	r2, r4
 8006838:	d9fa      	bls.n	8006830 <_free_r+0x48>
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	1858      	adds	r0, r3, r1
 800683e:	42a0      	cmp	r0, r4
 8006840:	d10b      	bne.n	800685a <_free_r+0x72>
 8006842:	6820      	ldr	r0, [r4, #0]
 8006844:	4401      	add	r1, r0
 8006846:	1858      	adds	r0, r3, r1
 8006848:	4282      	cmp	r2, r0
 800684a:	6019      	str	r1, [r3, #0]
 800684c:	d1de      	bne.n	800680c <_free_r+0x24>
 800684e:	6810      	ldr	r0, [r2, #0]
 8006850:	6852      	ldr	r2, [r2, #4]
 8006852:	4401      	add	r1, r0
 8006854:	6019      	str	r1, [r3, #0]
 8006856:	605a      	str	r2, [r3, #4]
 8006858:	e7d8      	b.n	800680c <_free_r+0x24>
 800685a:	d902      	bls.n	8006862 <_free_r+0x7a>
 800685c:	230c      	movs	r3, #12
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	e7d4      	b.n	800680c <_free_r+0x24>
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1821      	adds	r1, r4, r0
 8006866:	428a      	cmp	r2, r1
 8006868:	bf01      	itttt	eq
 800686a:	6811      	ldreq	r1, [r2, #0]
 800686c:	6852      	ldreq	r2, [r2, #4]
 800686e:	1809      	addeq	r1, r1, r0
 8006870:	6021      	streq	r1, [r4, #0]
 8006872:	6062      	str	r2, [r4, #4]
 8006874:	605c      	str	r4, [r3, #4]
 8006876:	e7c9      	b.n	800680c <_free_r+0x24>
 8006878:	bd38      	pop	{r3, r4, r5, pc}
 800687a:	bf00      	nop
 800687c:	200002e0 	.word	0x200002e0

08006880 <_malloc_r>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	1ccd      	adds	r5, r1, #3
 8006884:	f025 0503 	bic.w	r5, r5, #3
 8006888:	3508      	adds	r5, #8
 800688a:	2d0c      	cmp	r5, #12
 800688c:	bf38      	it	cc
 800688e:	250c      	movcc	r5, #12
 8006890:	2d00      	cmp	r5, #0
 8006892:	4606      	mov	r6, r0
 8006894:	db01      	blt.n	800689a <_malloc_r+0x1a>
 8006896:	42a9      	cmp	r1, r5
 8006898:	d903      	bls.n	80068a2 <_malloc_r+0x22>
 800689a:	230c      	movs	r3, #12
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	2000      	movs	r0, #0
 80068a0:	bd70      	pop	{r4, r5, r6, pc}
 80068a2:	f000 f87d 	bl	80069a0 <__malloc_lock>
 80068a6:	4a21      	ldr	r2, [pc, #132]	; (800692c <_malloc_r+0xac>)
 80068a8:	6814      	ldr	r4, [r2, #0]
 80068aa:	4621      	mov	r1, r4
 80068ac:	b991      	cbnz	r1, 80068d4 <_malloc_r+0x54>
 80068ae:	4c20      	ldr	r4, [pc, #128]	; (8006930 <_malloc_r+0xb0>)
 80068b0:	6823      	ldr	r3, [r4, #0]
 80068b2:	b91b      	cbnz	r3, 80068bc <_malloc_r+0x3c>
 80068b4:	4630      	mov	r0, r6
 80068b6:	f000 f863 	bl	8006980 <_sbrk_r>
 80068ba:	6020      	str	r0, [r4, #0]
 80068bc:	4629      	mov	r1, r5
 80068be:	4630      	mov	r0, r6
 80068c0:	f000 f85e 	bl	8006980 <_sbrk_r>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	d124      	bne.n	8006912 <_malloc_r+0x92>
 80068c8:	230c      	movs	r3, #12
 80068ca:	4630      	mov	r0, r6
 80068cc:	6033      	str	r3, [r6, #0]
 80068ce:	f000 f868 	bl	80069a2 <__malloc_unlock>
 80068d2:	e7e4      	b.n	800689e <_malloc_r+0x1e>
 80068d4:	680b      	ldr	r3, [r1, #0]
 80068d6:	1b5b      	subs	r3, r3, r5
 80068d8:	d418      	bmi.n	800690c <_malloc_r+0x8c>
 80068da:	2b0b      	cmp	r3, #11
 80068dc:	d90f      	bls.n	80068fe <_malloc_r+0x7e>
 80068de:	600b      	str	r3, [r1, #0]
 80068e0:	18cc      	adds	r4, r1, r3
 80068e2:	50cd      	str	r5, [r1, r3]
 80068e4:	4630      	mov	r0, r6
 80068e6:	f000 f85c 	bl	80069a2 <__malloc_unlock>
 80068ea:	f104 000b 	add.w	r0, r4, #11
 80068ee:	1d23      	adds	r3, r4, #4
 80068f0:	f020 0007 	bic.w	r0, r0, #7
 80068f4:	1ac3      	subs	r3, r0, r3
 80068f6:	d0d3      	beq.n	80068a0 <_malloc_r+0x20>
 80068f8:	425a      	negs	r2, r3
 80068fa:	50e2      	str	r2, [r4, r3]
 80068fc:	e7d0      	b.n	80068a0 <_malloc_r+0x20>
 80068fe:	684b      	ldr	r3, [r1, #4]
 8006900:	428c      	cmp	r4, r1
 8006902:	bf16      	itet	ne
 8006904:	6063      	strne	r3, [r4, #4]
 8006906:	6013      	streq	r3, [r2, #0]
 8006908:	460c      	movne	r4, r1
 800690a:	e7eb      	b.n	80068e4 <_malloc_r+0x64>
 800690c:	460c      	mov	r4, r1
 800690e:	6849      	ldr	r1, [r1, #4]
 8006910:	e7cc      	b.n	80068ac <_malloc_r+0x2c>
 8006912:	1cc4      	adds	r4, r0, #3
 8006914:	f024 0403 	bic.w	r4, r4, #3
 8006918:	42a0      	cmp	r0, r4
 800691a:	d005      	beq.n	8006928 <_malloc_r+0xa8>
 800691c:	1a21      	subs	r1, r4, r0
 800691e:	4630      	mov	r0, r6
 8006920:	f000 f82e 	bl	8006980 <_sbrk_r>
 8006924:	3001      	adds	r0, #1
 8006926:	d0cf      	beq.n	80068c8 <_malloc_r+0x48>
 8006928:	6025      	str	r5, [r4, #0]
 800692a:	e7db      	b.n	80068e4 <_malloc_r+0x64>
 800692c:	200002e0 	.word	0x200002e0
 8006930:	200002e4 	.word	0x200002e4

08006934 <_realloc_r>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	4607      	mov	r7, r0
 8006938:	4614      	mov	r4, r2
 800693a:	460e      	mov	r6, r1
 800693c:	b921      	cbnz	r1, 8006948 <_realloc_r+0x14>
 800693e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006942:	4611      	mov	r1, r2
 8006944:	f7ff bf9c 	b.w	8006880 <_malloc_r>
 8006948:	b922      	cbnz	r2, 8006954 <_realloc_r+0x20>
 800694a:	f7ff ff4d 	bl	80067e8 <_free_r>
 800694e:	4625      	mov	r5, r4
 8006950:	4628      	mov	r0, r5
 8006952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006954:	f000 f826 	bl	80069a4 <_malloc_usable_size_r>
 8006958:	42a0      	cmp	r0, r4
 800695a:	d20f      	bcs.n	800697c <_realloc_r+0x48>
 800695c:	4621      	mov	r1, r4
 800695e:	4638      	mov	r0, r7
 8006960:	f7ff ff8e 	bl	8006880 <_malloc_r>
 8006964:	4605      	mov	r5, r0
 8006966:	2800      	cmp	r0, #0
 8006968:	d0f2      	beq.n	8006950 <_realloc_r+0x1c>
 800696a:	4631      	mov	r1, r6
 800696c:	4622      	mov	r2, r4
 800696e:	f7ff ff16 	bl	800679e <memcpy>
 8006972:	4631      	mov	r1, r6
 8006974:	4638      	mov	r0, r7
 8006976:	f7ff ff37 	bl	80067e8 <_free_r>
 800697a:	e7e9      	b.n	8006950 <_realloc_r+0x1c>
 800697c:	4635      	mov	r5, r6
 800697e:	e7e7      	b.n	8006950 <_realloc_r+0x1c>

08006980 <_sbrk_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	2300      	movs	r3, #0
 8006984:	4c05      	ldr	r4, [pc, #20]	; (800699c <_sbrk_r+0x1c>)
 8006986:	4605      	mov	r5, r0
 8006988:	4608      	mov	r0, r1
 800698a:	6023      	str	r3, [r4, #0]
 800698c:	f000 f812 	bl	80069b4 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_sbrk_r+0x1a>
 8006994:	6823      	ldr	r3, [r4, #0]
 8006996:	b103      	cbz	r3, 800699a <_sbrk_r+0x1a>
 8006998:	602b      	str	r3, [r5, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	20000c88 	.word	0x20000c88

080069a0 <__malloc_lock>:
 80069a0:	4770      	bx	lr

080069a2 <__malloc_unlock>:
 80069a2:	4770      	bx	lr

080069a4 <_malloc_usable_size_r>:
 80069a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069a8:	1f18      	subs	r0, r3, #4
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	bfbc      	itt	lt
 80069ae:	580b      	ldrlt	r3, [r1, r0]
 80069b0:	18c0      	addlt	r0, r0, r3
 80069b2:	4770      	bx	lr

080069b4 <_sbrk>:
 80069b4:	4b04      	ldr	r3, [pc, #16]	; (80069c8 <_sbrk+0x14>)
 80069b6:	4602      	mov	r2, r0
 80069b8:	6819      	ldr	r1, [r3, #0]
 80069ba:	b909      	cbnz	r1, 80069c0 <_sbrk+0xc>
 80069bc:	4903      	ldr	r1, [pc, #12]	; (80069cc <_sbrk+0x18>)
 80069be:	6019      	str	r1, [r3, #0]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	4402      	add	r2, r0
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	4770      	bx	lr
 80069c8:	200002e8 	.word	0x200002e8
 80069cc:	20000c90 	.word	0x20000c90

080069d0 <_init>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr

080069dc <_fini>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	bf00      	nop
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr
